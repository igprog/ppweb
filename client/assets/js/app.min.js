/*!
app.js
(c) 2018 IG PROG, www.igprog.hr
*/
angular.module("app", ["ui.router", "pascalprecht.translate", "chart.js", "ngStorage", "functions", "charts"]).config(["$stateProvider", "$urlRouterProvider", "$translateProvider", "$translatePartialLoaderProvider", "$httpProvider", function (t, e, a, n, i) { a.useLoader("$translatePartialLoader", { urlTemplate: "./assets/json/translations/{lang}/{part}.json" }), a.preferredLanguage("hr"), n.addPart("main"), a.useSanitizeValueStrategy("escape"), i.defaults.headers.get || (i.defaults.headers.get = {}), i.defaults.headers.get["If-Modified-Since"] = "Mon, 26 Jul 1997 05:00:00 GMT", i.defaults.headers.get["Cache-Control"] = "no-cache", i.defaults.headers.get.Pragma = "no-cache" }]).controller("AppCtrl", ["$scope", "$timeout", "$q", "$log", "$rootScope", "$localStorage", "$sessionStorage", "$window", "$http", "$translate", "$translatePartialLoader", "functions", "charts", function (t, e, a, n, i, l, o, r, d, c, u, s, f) { var g = location.search; s.isNullOrEmpty(g) || ("uid" == g.split("&")[0].substring(1, 4) && (t.userId = g.split("&")[0].substring(5)), "cid" == g.split("&")[1].substring(0, 3) && (t.clientId = g.split("&")[1].substring(4))), t.today = new Date; i.loadPals = function () { d({ url: o.config.backend + "Calculations.asmx/LoadPal", method: "POST", data: "" }).then(function (t) { i.pals = JSON.parse(t.data.d) }, function (t) { alert(t.data.d) }) }, i.loadData = function () { i.loadPals() }, t.toggleCurrTpl = function (e) { t.currTpl = "./assets/partials/" + e }, t.toggleCurrTpl("clientdata.html"), t.toggleTpl = function (e) { t.tpl = e }, t.toggleTpl("inputData"), t.toggleSubTpl = function (e) { t.subTpl = e }, t.toggleSubTpl("clientLog"), t.showSaveMessage = !1, i.saveClientData = function (t) { h(t) }; var h = function (e) { e.userId = i.user.userId, e.clientId = null == e.clientId ? i.client.clientId : e.clientId, d({ url: o.config.backend + "ClientsData.asmx/Save", method: "POST", data: { userId: o.usergroupid, x: e } }).then(function (e) { t.clientData.date = new Date(i.clientData.date) }, function (t) { alert(t.data.d) }) }; t.showTabs = function () { if (angular.isUndefined(i.clientData)) return !1; var e = t.clientData; return null != e.clientId && e.height > 0 && e.weight > 0 && e.pal.value > 0 }, t.hideMsg = function () { i.mainMessage = null }; var p = function () { d({ url: o.config.backend + "Clients.asmx/Get", method: "POST", data: { userId: t.userId, clientId: t.clientId } }).then(function (e) { t.client = JSON.parse(e.data.d), m() }, function (t) { alert(t.data.d) }) }, m = function () { d({ url: o.config.backend + "ClientsData.asmx/Get", method: "POST", data: { userId: t.userId, clientId: t.clientId } }).then(function (e) { t.clientData = JSON.parse(e.data.d), t.clientData.date = new Date((new Date).setHours(0, 0, 0, 0)), t.calculate(), D() }, function (t) { alert(t.data.d) }) }, D = function () { d({ url: o.config.backend + "ClientsData.asmx/GetClientLog", method: "POST", data: { userId: t.userId, clientId: t.clientId } }).then(function (e) { t.clientLog = JSON.parse(e.data.d), b(0) }, function (t) { alert(t.data.d) }) }; t.save = function (e) { d({ url: o.config.backend + "ClientsData.asmx/Save", method: "POST", data: { userId: t.userId, x: e } }).then(function (t) { D() }, function (t) { alert(t.data.d) }) }, t.updateClientLog = function (e) { d({ url: o.config.backend + "ClientsData.asmx/UpdateClientLog", method: "POST", data: { userId: t.userId, clientData: e } }).then(function (t) { D() }, function (t) { alert(t.data.d) }) }, t.getDateFormat = function (t) { return new Date(t) }; var I = function () { var e = t.calculation.bmi.value.toFixed(1); google.charts.setOnLoadCallback(f.guageChart("bmiChart", e, "BMI", { title: "BMI", min: 15, max: 34, greenFrom: 18.5, greenTo: 25, yellowFrom: 25, yellowTo: 30, redFrom: 30, redTo: 34, minorTicks: 5 })) }; t.displayType = 0; t.calculate = function () { d({ url: o.config.backend + "Calculations.asmx/GetCalculation", method: "POST", data: { client: t.clientData } }).then(function (e) { t.calculation = JSON.parse(e.data.d) }, function (t) { alert(t.data.d) }), google.charts.load("current", { packages: ["gauge"] }), e(function () { I() }, 1e3) }; var b = function (e) { var a = [], n = [], i = [], l = []; t.clientLogGraphData = f.createGraph([c.instant("tracking of anthropometric measures")], [a, n, i], l, ["#3399ff", "#ff3333", "#33ff33"], [{ label: c.instant("measured value"), borderWidth: 5, type: "line", fill: !0 }, { label: c.instant("lower limit"), borderWidth: 2, backgroundColor: "#e6e6ff", fill: !1, type: "line" }, { label: c.instant("upper limit"), borderWidth: 2, backgroundColor: "#e6e6ff", fill: !1, type: "line" }], !0), angular.isDefined(t.calculation.recommendedWeight) && angular.forEach(t.clientLog, function (o, r) { 0 == e && (a.push(o.weight), n.push(t.calculation.recommendedWeight.min), i.push(t.calculation.recommendedWeight.max)), 1 == e && (a.push(o.waist), n.push(95)), 2 == e && (a.push(o.hip), n.push(97)), r % (Math.floor(t.clientLog.length / 31) + 1) == 0 ? l.push(new Date(o.date).toLocaleDateString()) : l.push("") }) }; t.setClientLogGraphData = function (t) { b(t) }, t.removeClientLog = function (t) { 1 == confirm(c.instant("delete record") + "?") && S(t) }; var S = function (e) { d({ url: o.config.backend + "ClientsData.asmx/Delete", method: "POST", data: { userId: t.userId, clientData: e } }).then(function (t) { D() }, function (t) { alert(t.data.d) }) }; d.get("./config/config.json").then(function (t) { i.config = t.data, o.config = t.data, p(); var e = location.search.substring(6); angular.isDefined(e) && ("hr" != e && "sr" != e && "en" != e || i.setLanguage(e)), 1 == o.islogin && i.loadData() }), t.loading = !1, t.loadMenues = function () { t.loading = !0, d({ url: o.config.backend + "Menues.asmx/LoadClientMenues", method: "POST", data: { userId: t.userId, clientId: t.clientId } }).then(function (e) { t.menues = JSON.parse(e.data.d), t.loading = !1 }, function (e) { t.loading = !1, alert(e.data.d) }) }, t.getMenu = function (e) { d({ url: o.config.backend + "Menues.asmx/Get", method: "POST", data: { userId: t.userId, id: e.id } }).then(function (e) { t.menu = JSON.parse(e.data.d), P(t.menu), t.toggleTpl("menu") }, function (t) { alert(t.data.d) }) }, t.getMealTitle = function (t) { return "B" == t ? "breakfast" : "MS" == t ? "morning snack" : "L" == t ? "lunch" : "AS" == t ? "afternoon snack" : "D" == t ? "dinner" : "MBS" == t ? "meal before sleep" : void 0 }; var P = function (e) { d({ url: o.config.backend + "Foods.asmx/GetTotals", method: "POST", data: { selectedFoods: e.data.selectedFoods, meals: e.data.meals } }).then(function (e) { t.totals = JSON.parse(e.data.d), t.totals.price.currency = i.config.currency }, function (t) { alert(t.data.d) }) }; t.pdfLink = null, t.creatingPdf = !1, t.createMenuPdf = function () { t.pdfLink = null, t.creatingPdf = !0, d({ url: o.config.backend + "PrintPdf.asmx/MenuPdf", method: "POST", data: { userId: t.userId, currentMenu: t.menu, clientData: t.clientData, totals: t.totals, consumers: 1, lang: i.config.language } }).then(function (e) { var a = e.data.d; t.creatingPdf = !1, t.pdfLink = o.config.backend + "upload/users/" + t.userId + "/pdf/" + a + ".pdf" }, function (e) { t.creatingPdf = !1, alert(e.data.d) }) }, t.change = function (e, a) { "height" === a && (t.clientData.height += e, t.calculate()), "weight" === a && (t.clientData.weight += e, t.calculate()), "waist" === a && (t.clientData.waist += e, t.calculate()), "hip" === a && (t.clientData.hip += e, t.calculate()) }, t.clientLogDiff = function (t, e, a, n) { var i = 0; if (e.length - n == 1) return { diff: i.toFixed(1), icon: "fa fa-circle text-success" }; switch (t) { case "weight": i = (a.weight - e[e.length - n - 2].weight).toFixed(1); break; case "waist": i = (a.waist - e[e.length - n - 2].waist).toFixed(1); break; case "hip": i = (a.hip - e[e.length - n - 2].hip).toFixed(1); break; default: i = 0 } return i > 0 ? { diff: i, icon: "fa fa-arrow-up text-danger" } : i < 0 ? { diff: i, icon: "fa fa-arrow-down text-info" } : 0 == i ? { diff: i, icon: "fa fa-circle text-success" } : void 0 } }]);