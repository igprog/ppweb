/*!
app.js
(c) 2017-2019 IG PROG, www.igprog.hr
*/
angular.module("app", ["ui.router", "pascalprecht.translate", "ngMaterial", "chart.js", "ngStorage", "functions", "charts"]).config(["$translateProvider", "$translatePartialLoaderProvider", "$httpProvider", function (e, t, n) { e.useLoader("$translatePartialLoader", { urlTemplate: "./assets/json/translations/{lang}/{part}.json" }), e.preferredLanguage("en"), t.addPart("main"), e.useSanitizeValueStrategy("escape"), n.defaults.headers.get || (n.defaults.headers.get = {}), n.defaults.headers.get["If-Modified-Since"] = "Mon, 26 Jul 1997 05:00:00 GMT", n.defaults.headers.get["Cache-Control"] = "no-cache", n.defaults.headers.get.Pragma = "no-cache" }]).config(function (e) { e.formatDate = function (e) { return moment(e).format("DD.MM.YYYY") } }).controller("AppCtrl", ["$scope", "$mdDialog", "$timeout", "$q", "$log", "$rootScope", "$localStorage", "$sessionStorage", "$window", "$http", "$translate", "$translatePartialLoader", "functions", function (e, t, n, a, i, o, r, s, l, c, d, u, f) { o.loginUser = s.loginuser, o.user = s.user, e.today = new Date, o.unitSystem = 1, -1 == navigator.userAgent.indexOf("MSIE") && 1 != !!document.documentMode || (o.browserMsg = { title: "you are currently using internet explorer", description: "for a better experience in using the application, please use some of the modern browsers such as google chrome, mozilla firefox, microsoft edge etc." }), angular.isDefined(s.user) && null != s.user && "demo" == s.user.licenceStatus && (o.mainMessage = d.instant("you are currently working in a demo version") + ". " + d.instant("some functions are disabled") + ".", o.mainMessageBtn = d.instant("activate full version")), o.initMyCalculation = function () { c({ url: s.config.backend + "Calculations.asmx/Init", method: "POST", data: "" }).then(function (e) { o.myCalculation = JSON.parse(e.data.d), o.myCalculation.recommendedEnergyIntake = null, o.myCalculation.recommendedEnergyExpenditure = null }, function (e) { alert(e.data.d) }) }; !function () { if ("lang" == location.search.substring(1, 5)) var e = location.search.substring(6); c.get("./config/config.json").then(function (t) { o.config = t.data, s.config = t.data, localStorage.language ? o.setLanguage(localStorage.language) : o.setLanguage(o.config.language), angular.isDefined(e) && ("hr" != e && "ba" != e && "sr" != e && "sr_cyrl" != e && "en" != e || o.setLanguage(e)), 1 == s.islogin && o.loadData(), angular.isUndefined(o.myCalculation) && o.initMyCalculation(), localStorage.version ? localStorage.version != o.config.version && n(function () { p() }, 600) : n(function () { p() }, 600) }) }(), o.getUserSettings = function () { c({ url: s.config.backend + "Files.asmx/GetFile", method: "POST", data: { foldername: "users/" + o.user.userGroupId, filename: "settings" } }).then(function (e) { o.settings = angular.fromJson(e.data.d), null != e.data.d ? ("" != o.settings.language && (o.config.language = o.settings.language), "" != o.settings.currency && (o.config.currency = o.settings.currency)) : o.settings = { language: o.config.language, currency: o.config.currency }, s.settings = o.settings }, function (e) { f.alert(d.instant(e.data.d), "") }) }, o.setLanguage = function (e) { d.use(e), u.addPart("main"), o.config.language = e, "undefined" != typeof Storage && (localStorage.language = e), s.config.language = e, null == s.usergroupid && null == s.usergroupid || o.loadData() }, o.loadFoods = function () { o.loading = !0, c({ url: s.config.backend + "Foods.asmx/Load", method: "POST", data: { userId: s.usergroupid, userType: o.user.userType, lang: o.config.language } }).then(function (e) { var t = JSON.parse(e.data.d); o.foods = t.foods, o.myFoods = t.myFoods, o.foodGroups = t.foodGroups, o.loading = !1 }, function (e) { o.loading = !1, alert(e.data.d) }) }, o.loadPals = function () { c({ url: s.config.backend + "Calculations.asmx/LoadPal", method: "POST", data: "" }).then(function (e) { o.pals = JSON.parse(e.data.d) }, function (e) { alert(e.data.d) }) }, o.loadGoals = function () { c({ url: s.config.backend + "Goals.asmx/Load", method: "POST", data: "" }).then(function (e) { o.goals = JSON.parse(e.data.d) }, function (e) { alert(e.data.d) }) }, o.loadActivities = function () { o.loading = !0, c({ url: s.config.backend + "Activities.asmx/Load", method: "POST", data: "" }).then(function (e) { o.activities = JSON.parse(e.data.d), angular.forEach(o.activities, function (e, t) { o.activities[t].activity = d.instant(o.activities[t].activity).replace("&gt;", "<").replace("&lt;", ">") }), o.loading = !1 }, function (e) { o.loading = !1, alert(e.data.d) }) }, o.loadDiets = function () { c({ url: s.config.backend + "Diets.asmx/Load", method: "POST", data: "" }).then(function (e) { o.diets = JSON.parse(e.data.d), angular.forEach(o.diets, function (e, t) { o.diets[t].diet = d.instant(o.diets[t].diet).replace("&gt;", "<").replace("&lt;", ">"), o.diets[t].dietDescription = d.instant(o.diets[t].dietDescription).replace("&gt;", "<").replace("&lt;", ">"), o.diets[t].note = d.instant(o.diets[t].note).replace("&gt;", "<").replace("&lt;", ">") }) }, function (e) { alert(e.data.d) }) }, o.loadData = function () { null == s.user ? (e.toggleTpl("login"), o.isLogin = !1) : (o.loadFoods(), o.loadPals(), o.loadGoals(), o.loadActivities(), o.loadDiets()) }, e.toggleTpl = function (e) { o.currTpl = "./assets/partials/" + e + ".html" }; "" == s.userid || null == s.userid || null == s.user || "expired" == s.user.licenceStatus ? (e.toggleTpl("login"), o.isLogin = !1) : (e.toggleTpl("dashboard"), e.activeTab = 0, o.isLogin = !0); var m = function () { return null != o.clientData.clientId && (o.clientData.height <= 0 ? (f.alert(d.instant("height is required")), !1) : o.clientData.weight <= 0 ? (f.alert(d.instant("weight is required")), !1) : !(o.clientData.pal.value <= 0) || (f.alert(d.instant("choose physical activity level")), !1)) }; e.toggleNewTpl = function (e) { if (void 0 !== o.clientData) { if (0 == m()) return !1; if (null == o.clientData.meals) return o.newTpl = "assets/partials/meals.html", o.selectedNavItem = "meals", f.alert(d.instant("choose meals"), ""), !1; if ("menu" == e && o.clientData.meals.length > 0 && !o.isMyMeals && "B" == o.clientData.meals[0].code) { if (0 == o.clientData.meals[1].isSelected && 1 == o.clientData.meals[5].isSelected) return o.newTpl = "./assets/partials/meals.html", f.alert(d.instant("the selected meal combination is not allowed in the menu") + "!", o.clientData.meals[5].title + " " + d.instant("in this combination must be turned off") + "."), !1; if (0 == o.clientData.meals[3].isSelected && 1 == o.clientData.meals[5].isSelected) return o.newTpl = "./assets/partials/meals.html", f.alert(d.instant("the selected meal combination is not allowed in the menu") + "!", o.clientData.meals[5].title + " " + d.instant("in this combination must be turned off") + "."), !1 } "menu" == e && void 0 !== o.myMeals && o.setMealCode(), o.saveClientData(o.clientData) } o.newTpl = "./assets/partials/" + e + ".html", o.selectedNavItem = e }, e.toggleNewTpl("clientsdata"), e.logout = function () { s.loginuser = null, s.user = null, o.user = null, s.userid = "", s.username = "", o.isLogin = !1, o.client = null, o.isLogin = !1, s.islogin = !1, s.usergroupid = null, o.mainMessage = null, o.currTpl = "assets/partials/login.html" }, o.saveClientData = function (e) { if (0 == m()) return !1; if (null == o.clientData.meals) return o.newTpl = "assets/partials/meals.html", o.selectedNavItem = "meals", f.alert(d.instant("choose meals"), ""), !1; if (o.clientData.meals.length > 0 && !o.isMyMeals && "B" == o.clientData.meals[0].code) { if (0 == o.clientData.meals[1].isSelected && 1 == o.clientData.meals[5].isSelected) return o.newTpl = "assets/partials/meals.html", f.alert(d.instant("the selected meal combination is not allowed in the menu") + "!", o.clientData.meals[5].title + " " + d.instant("in this combination must be turned off") + "."), !1; if (0 == o.clientData.meals[3].isSelected && 1 == o.clientData.meals[5].isSelected) return o.newTpl = "assets/partials/meals.html", f.alert(d.instant("the selected meal combination is not allowed in the menu") + "!", o.clientData.meals[5].title + " " + d.instant("in this combination must be turned off") + "."), !1 } g(e) }; var g = function (e) { e.userId = o.user.userId, e.clientId = null == e.clientId ? o.client.clientId : e.clientId, c({ url: s.config.backend + "ClientsData.asmx/Save", method: "POST", data: { userId: s.usergroupid, x: e, userType: o.user.userType } }).then(function (e) { o.clientData.date = new Date(o.clientData.date) }, function (e) { alert(e.data.d) }) }; e.hideMsg = function () { o.mainMessage = null }, o.getMealTitle = function (e) { return "B" == e.code ? d.instant("breakfast") : "MS" == e.code ? d.instant("morning snack") : "L" == e.code ? d.instant("lunch") : "AS" == e.code ? d.instant("afternoon snack") : "D" == e.code ? d.instant("dinner") : "MBS" == e.code ? d.instant("meal before sleep") : e.title }, e.changeUnitSystem = function (e) { o.unitSystem = e, o.convertToStandardSystem() }, e.standard = { height_feet: 0, height_inches: 0, weight: 0, waist: 0, hip: 0 }, e.convertToMetricSystem = function (e) { o.clientData.height = (30.48 * e.height_feet + 2.54 * e.height_inches).toFixed(1), o.clientData.weight = (.45349237 * e.weight).toFixed(1), o.clientData.waist = (2.54 * e.waist).toFixed(1), o.clientData.hip = (2.54 * e.hip).toFixed(1) }, o.convertToStandardSystem = function () { var t = .3937 * o.clientData.height; e.standard.height_feet = parseInt(t / 12).toFixed(0); var n = 12 * (t / 12 - parseInt(t / 12)); e.standard.height_inches = n.toFixed(0), e.standard.weight = (o.clientData.weight / .45349237).toFixed(0), e.standard.waist = (o.clientData.waist / 2.54).toFixed(0), e.standard.hip = (o.clientData.hip / 2.54).toFixed(0) }, e.populateDdl = function (e, t) { for (var n = [], a = e; a <= t; a++) n.push(a); return n }, e.showUpdates = !1, e.toggleUpdates = function () { e.showUpdates = !e.showUpdates }, e.dateDiff = function () { return localStorage.lastvisit ? f.getDateDiff(localStorage.lastvisit) : 0 }; var p = function () { t.show({ controller: h, templateUrl: "assets/partials/popup/notification.html", parent: angular.element(document.body), clickOutsideToClose: !0, d: {} }).then(function (e) { window.location.reload(!0) }, function () { window.location.reload(!0) }) }, h = function (e, t, n, a) { e.config = t.config, e.showUpdates = !1, e.toggleUpdates = function () { e.showUpdates = !e.showUpdates }, "undefined" != typeof Storage && (localStorage.version = e.config.version), e.hide = function () { n.hide() }, e.cancel = function () { n.cancel() } }; "undefined" != typeof Storage && (localStorage.socailshare || n(function () { y() }, 6e5)); var y = function () { t.show({ controller: v, templateUrl: "assets/partials/popup/socialshare.html", parent: angular.element(document.body), clickOutsideToClose: !0, d: {} }).then(function (e) { }, function () { }) }, v = function (e, t, n, a) { localStorage.socailshare = "ok", e.hide = function () { n.hide() }, e.cancel = function () { n.cancel() } }; e.reportABug = function () { S() }; var S = function () { t.show({ controller: w, templateUrl: "assets/partials/popup/reportabug.html", parent: angular.element(document.body), clickOutsideToClose: !0, d: { user: o.user } }).then(function (e) { }, function () { }) }, w = function (e, t, n, a, i, r) { e.d = { description: null, email: r.isNullOrEmpty(a.user) ? null : a.user.email, alert_des: null, alert_email: null }; e.cancel = function () { t.cancel() }, e.confirm = function (a) { !function (a) { if (e.titlealert = null, e.emailalert = null, r.isNullOrEmpty(a.description)) return a.alert_des = i.instant("description is required"), !1; if (r.isNullOrEmpty(a.email)) return a.alert_email = i.instant("email is required"), !1; t.hide(); var l = a.description + " E-mail: " + a.email; n({ url: s.config.backend + "Mail.asmx/SendMessage", method: "POST", data: { sendTo: s.config.email, messageSubject: "BUG - " + a.email, messageBody: l, lang: o.config.language } }).then(function (e) { r.alert(e.data.d, "") }, function (e) { r.alert(i.instant(e.data.d), "") }) }(a) } } }]).controller("loginCtrl", ["$scope", "$http", "$localStorage", "$sessionStorage", "$window", "$rootScope", "functions", "$translate", "$mdDialog", function (e, t, n, a, i, o, r, s, l) { e.toggleTpl = function (t) { e.tpl = t }, e.toggleTpl("loginTpl"), e.login = function (n, i) { if (e.errorMesage = null, r.isNullOrEmpty(n) || r.isNullOrEmpty(i)) return e.errorLogin = !0, e.errorMesage = s.instant("enter user name (email) and password"), !1; o.loading = !0, t({ url: o.config.backend + "Users.asmx/Login", method: "POST", data: { userName: n, password: i } }).then(function (t) { if (null != JSON.parse(t.data.d).userId) { if (o.user = JSON.parse(t.data.d), o.user.userId !== o.user.userGroupId && !1 === o.user.isActive) return o.loading = !1, e.errorLogin = !0, e.errorMesage = s.instant("your account is not active") + ". " + s.instant("please contact your administrator"), !1; o.loginUser = JSON.parse(t.data.d), a.loginuser = o.loginUser, a.userid = o.user.userId, a.usergroupid = o.user.userGroupId, a.username = o.user.userName, a.user = o.user, a.islogin = !0, o.isLogin = !0, o.loadData(), "undefined" != typeof Storage && (localStorage.lastvisit = new Date), "expired" == o.user.licenceStatus ? (o.isLogin = !1, r.alert(s.instant("your subscription has expired"), s.instant("renew subscription")), o.currTpl = "./assets/partials/order.html") : (o.currTpl = "./assets/partials/dashboard.html", o.user.daysToExpite <= 10 && o.user.daysToExpite > 0 && (o.mainMessage = s.instant("your subscription will expire in") + " " + o.user.daysToExpite + " " + (1 == o.user.daysToExpite ? s.instant("day") : s.instant("days")) + ".", o.mainMessageBtn = s.instant("renew subscription")), 0 == o.user.daysToExpite && (o.mainMessage = s.instant("your subscription will expire today") + ".", o.mainMessageBtn = s.instant("renew subscription")), "demo" == o.user.licenceStatus && (o.mainMessage = s.instant("you are currently working in a demo version") + ". " + s.instant("some functions are disabled") + ".", o.mainMessageBtn = s.instant("activate full version")), "en" == o.config.language ? o.unitSystem = 0 : o.unitSystem = 1) } else o.loading = !1, e.errorLogin = !0, e.errorMesage = s.instant("wrong user name or password") }, function (t) { e.errorLogin = !0, e.errorMesage = s.instant("user was not found") }) }, e.signup = function () { o.currTpl = "assets/partials/signup.html" }, e.forgotPasswordPopup = function () { l.show({ controller: e.forgotPasswordPopupCtrl, templateUrl: "assets/partials/popup/forgotpassword.html", parent: angular.element(document.body), targetEvent: "", clickOutsideToClose: !0, fullscreen: e.customFullscreen, d: "" }).then(function (e) { }, function () { }) }, e.forgotPasswordPopupCtrl = function (e, t, n, i) { e.confirm = function (e) { s(e) }; var s = function (e) { n({ url: a.config.backend + "Users.asmx/ForgotPassword", method: "POST", data: { email: e, lang: o.config.language } }).then(function (e) { t.hide(), r.alert(JSON.parse(e.data.d), "") }, function (e) { r.alert(e.data.d, "") }) }; e.hide = function () { t.hide() }, e.cancel = function () { t.cancel() } } }]).controller("signupCtrl", ["$scope", "$http", "$sessionStorage", "$window", "$rootScope", "functions", "$translate", function (e, t, n, a, i, o, r) { e.showAlert = !1, e.passwordConfirm = "", e.emailConfirm = "", e.signupdisabled = !1, e.accept = !1; t({ url: n.config.backend + "Users.asmx/Init", method: "POST", data: "" }).then(function (t) { e.newUser = JSON.parse(t.data.d) }, function (e) { alert(e.data.d) }), e.signup = function () { return e.signupdisabled = !0, e.newUser.userName = e.newUser.email, o.isNullOrEmpty(e.newUser.firstName) || o.isNullOrEmpty(e.newUser.lastName) || o.isNullOrEmpty(e.newUser.email) || o.isNullOrEmpty(e.newUser.password) || o.isNullOrEmpty(e.passwordConfirm) || o.isNullOrEmpty(e.emailConfirm) ? (o.alert(r.instant("all fields are required"), ""), e.signupdisabled = !1, !1) : e.newUser.email != e.emailConfirm ? (e.signupdisabled = !1, o.alert(r.instant("emails are not the same"), ""), !1) : e.newUser.password != e.passwordConfirm ? (e.signupdisabled = !1, o.alert(r.instant("passwords are not the same"), ""), !1) : 0 == e.accept ? (e.signupdisabled = !1, o.alert(r.instant("you must agree to the terms and conditions"), ""), !1) : void t({ url: n.config.backend + "Users.asmx/Signup", method: "POST", data: { x: e.newUser, lang: i.config.language } }).then(function (t) { "registration completed successfully" == t.data.d ? (e.alertMessage = t.data.d, e.showAlert = !0) : o.alert(r.instant(t.data.d), "") }, function (t) { e.showAlert = !1, e.signupdisabled = !1, o.alert(r.instant(t.data.d), "") }) } }]).controller("schedulerCtrl", ["$scope", "$localStorage", "$http", "$rootScope", "$timeout", "$sessionStorage", "functions", "$translate", function (e, t, n, a, i, o, r, s) { e.id = "#myScheduler", e.room = 0, e.uid = null; e.getSchedulerEvents = function (t) { n({ url: o.config.backend + "Scheduler.asmx/GetSchedulerEvents", method: "POST", data: { user: a.user, room: e.room, uid: t } }).then(function (t) { a.events = JSON.parse(t.data.d), i(function () { YUI().use("aui-scheduler", function (t) { var n = new t.SchedulerAgendaView, i = new t.SchedulerDayView, o = new t.SchedulerWeekView, r = new t.SchedulerMonthView, c = new t.SchedulerEventRecorder({ on: { save: function (e) { l(this.getTemplateData(), e) }, edit: function (e) { l(this.getTemplateData(), e) }, delete: function (e) { d(this.getTemplateData(), e) } } }); e.id = null == e.uid ? "myScheduler" : e.uid, new t.Scheduler({ activeView: o, boundingBox: "#" + e.id, date: new Date, eventRecorder: c, items: a.events, render: !0, views: [i, o, r, n], strings: { agenda: s.instant("agenda"), day: s.instant("day_"), month: s.instant("month"), table: s.instant("table"), today: s.instant("today"), week: s.instant("week"), year: s.instant("year") } }) }) }, 200) }, function (e) { r.alert(s.instant(e.data.d)) }) }, n({ url: o.config.backend + "Users.asmx/GetUsersByUserGroup", method: "POST", data: { userGroupId: a.user.userGroupId } }).then(function (t) { e.users = JSON.parse(t.data.d), e.getSchedulerEvents(null) }, function (e) { r.alert(s.instant(e.data.d)) }); var l = function (t, n) { a.events.push({ room: e.room, clientId: angular.isDefined(a.client) && null != a.client ? a.client.clientId : null, content: n.details[0].newSchedulerEvent.changed.content, endDate: t.endDate, startDate: t.startDate, userId: a.user.userId }); var o = {}; o.room = e.room, o.clientId = angular.isDefined(a.client) && null != a.client ? a.client.clientId : null, o.content = null == n.details[0].newSchedulerEvent.changed.content ? t.content : n.details[0].newSchedulerEvent.changed.content, o.endDate = t.endDate, o.startDate = t.startDate, o.userId = a.user.userId; var r = {}; r.room = e.room, r.clientId = angular.isDefined(a.client) && null != a.client ? a.client.clientId : null, r.content = angular.isUndefined(n.details[0].newSchedulerEvent.lastChange.content) ? t.content : n.details[0].newSchedulerEvent.lastChange.content.prevVal, r.endDate = angular.isUndefined(n.details[0].newSchedulerEvent.lastChange.endDate) ? t.endDate : Date.parse(n.details[0].newSchedulerEvent.lastChange.endDate.prevVal), r.startDate = angular.isUndefined(n.details[0].newSchedulerEvent.lastChange.startDate) ? t.startDate : Date.parse(n.details[0].newSchedulerEvent.lastChange.startDate.prevVal), r.userId = a.user.userId, u(r), i(function () { c(o) }, 500) }, c = function (e) { if ("demo" == a.user.licenceStatus) return r.demoAlert("the saving function is disabled in demo version"), !1; n({ url: o.config.backend + "Scheduler.asmx/Save", method: "POST", data: { userGroupId: a.user.userGroupId, userId: a.user.userId, x: e } }).then(function (e) { f() }, function (e) { r.alert(s.instant(e.data.d)) }) }, d = function (t, n) { var i = {}; i.room = e.room, i.clientId = "0", i.content = t.content, i.endDate = t.endDate, i.startDate = t.startDate, i.userId = a.user.userId, u(i) }, u = function (e) { n({ url: o.config.backend + "Scheduler.asmx/Delete", method: "POST", data: { userGroupId: a.user.userGroupId, userId: a.user.userId, x: e } }).then(function (e) { f() }, function (e) { r.alert(s.instant(e.data)) }) }; e.toggleTpl = function (e) { a.currTpl = "./assets/partials/" + e + ".html" }; var f = function () { n({ url: o.config.backend + "Scheduler.asmx/GetAppointmentsCountByUserId", method: "POST", data: { userGroupId: a.user.userGroupId, userId: a.user.userId } }).then(function (e) { a.user.datasum.scheduler = JSON.parse(e.data.d) }, function (e) { r.alert(s.instant(e.data.d)) }) } }]).controller("userCtrl", ["$scope", "$http", "$sessionStorage", "$window", "$rootScope", "$mdDialog", "functions", "$translate", function (e, t, n, a, i, o, r, s) { e.adminTypes = [{ value: 0, text: "Supervizor" }, { value: 1, text: "Admin" }]; var l = function () { t({ url: n.config.backend + "Users.asmx/GetUsersByUserGroup", method: "POST", data: { userGroupId: n.usergroupid } }).then(function (t) { e.users = JSON.parse(t.data.d) }, function (e) { r.alert(s.instant(e.data.d)) }) }; t({ url: n.config.backend + "Users.asmx/Init", method: "POST", data: "" }).then(function (t) { e.newUser = JSON.parse(t.data.d), l() }, function (e) { r.alert(s.instant(e.data.d)) }), e.adminType = function (e) { switch (e) { case 0: return "Supervizor"; case 1: return "Admin"; default: return "" } }, e.signup = function () { return "demo" == i.user.licenceStatus ? (r.demoAlert("this function is not available in demo version"), !1) : e.users.length >= i.user.maxNumberOfUsers ? (r.alert(s.instant("max number of users is") + " " + i.user.maxNumberOfUsers, ""), !1) : (angular.isDefined(i.user) || (i.user = e.newUser), e.newUser.userName = e.newUser.email, e.newUser.companyName = i.user.companyName, e.newUser.address = i.user.address, e.newUser.postalCode = i.user.postalCode, e.newUser.city = i.user.city, e.newUser.country = i.user.country, e.newUser.pin = i.user.pin, e.newUser.phone = i.user.phone, e.newUser.userGroupId = i.user.userGroupId, e.newUser.expirationDate = i.user.expirationDate, e.newUser.isActive = !0, e.newUser.adminType = 1, e.newUser.userType = i.user.userType, "" == e.newUser.password || "" == e.passwordConfirm ? (r.alert(s.instant("enter password"), ""), !1) : e.newUser.password != e.passwordConfirm ? (r.alert(s.instant("passwords are not the same"), ""), !1) : void t({ url: n.config.backend + "Users.asmx/Signup", method: "POST", data: { x: e.newUser, lang: i.config.language } }).then(function (e) { l(), r.alert(s.instant(e.data.d)) }, function (e) { r.alert(s.instant(e.data.d)) })) }, e.update = function (e) { t({ url: n.config.backend + "Users.asmx/Update", method: "POST", data: { x: e } }).then(function (e) { r.alert(s.instant("saved"), "") }, function (e) { r.alert(s.instant(e.data.d)) }) }, e.showUser = function (e) { t({ url: n.config.backend + "Users.asmx/Get", method: "POST", data: { userId: e } }).then(function (e) { i.user = JSON.parse(e.data.d), i.currTpl = "assets/partials/user.html" }, function (e) { r.alert(s.instant(e.data.d)) }) }, e.updateUser = function (e) { t({ url: n.config.backend + "Users.asmx/Update", method: "POST", data: { x: e } }).then(function (e) { r.alert(s.instant(e.data.d)) }, function (e) { r.alert(s.instant(e.data.d)) }) }, e.remove = function (e) { var t = o.confirm().title(s.instant("delete user") + "?").textContent(e.firstName + " " + e.lastName).targetEvent(e).ok(s.instant("yes") + "!").cancel(s.instant("no")); o.show(t).then(function () { c(e) }, function () { }) }; var c = function (e) { t({ url: n.config.backend + "Users.asmx/Delete", method: "POST", data: { x: e } }).then(function (e) { l() }, function (e) { r.alert(s.instant(e.data.d)) }) }; e.showpass = !1, e.showPassword = function () { e.showpass = 1 != e.showpass }; var d = function () { t({ url: n.config.backend + "Files.asmx/IsLogoExists", method: "POST", data: { userId: n.usergroupid, filename: "logo.png" } }).then(function (t) { "TRUE" == t.data.d ? e.showLogo = !0 : (e.showLogo = !1, e.logo = null) }, function (e) { r.alert(s.instant(e.data.d)) }) }; d(), e.logo = "../upload/users/" + i.user.userGroupId + "/logo.png?v=" + (new Date).getTime(), e.upload = function () { if (0 != i.user.adminType) return !1; var a = new FormData(document.getElementById("formUpload")); t({ url: n.config.backend + "/UploadHandler.ashx", method: "POST", headers: { "Content-Type": void 0 }, data: a }).then(function (t) { e.showLogo = !0, e.logo = "../upload/users/" + i.user.userGroupId + "/logo.png?v=" + (new Date).getTime(), "OK" != t.data && r.alert(s.instant(t.data)), d() }, function (e) { r.alert(s.instant(e.data)) }) }, e.removeLogo = function (e) { if (0 != e.adminType) return !1; var t = o.confirm().title(s.instant("remove logo") + "?").targetEvent(e).ok(s.instant("yes") + "!").cancel(s.instant("no")); o.show(t).then(function () { u(e) }, function () { }) }; var u = function (a) { t({ url: n.config.backend + "Files.asmx/DeleteLogo", method: "POST", data: { userId: a.userId, filename: "logo.png" } }).then(function (t) { e.showLogo = !1, e.logo = null, "OK" != t.data.d && r.alert(s.instant(t.data.d)) }, function (e) { r.alert(s.instant(e.data.d)) }) } }]).controller("mainCtrl", ["$scope", "$http", "$sessionStorage", "$window", "$rootScope", "$mdDialog", "functions", function (e, t, n, a, i, o, r) { i.client && i.client.clientId ? (i.newTpl = "assets/partials/clientsdata.html", i.selectedNavItem = "clientsdata") : (i.newTpl = "assets/partials/dashboard.html", i.selectedNavItem = "dashboard") }]).controller("dashboardCtrl", ["$scope", "$http", "$sessionStorage", "$window", "$rootScope", "$mdDialog", "functions", function (e, t, n, a, i, o, r) { t({ url: n.config.backend + "Users.asmx/Get", method: "POST", data: { userId: i.user.userId } }).then(function (t) { i.user = JSON.parse(t.data.d), e.expirationDate = new Date(i.user.expirationDate) }, function (e) { r.alert($translate.instant(e.data.d)) }) }]).controller("clientsCtrl", ["$scope", "$http", "$sessionStorage", "$window", "$rootScope", "$mdDialog", "$timeout", "charts", "$filter", "functions", "$translate", function (e, t, n, a, i, o, r, s, l, c, d) { e.displayType = 0, e.toggleTpl = function (t) { e.clientDataTpl = t }, e.toggleTpl("inputData"), e.toggleSubTpl = function (t) { e.subTpl = t }, e.toggleCurrTpl = function (e) { i.currTpl = "./assets/partials/" + e + ".html" }; var u = function (e) { t({ url: n.config.backend + "ClientsData.asmx/Init", method: "POST", data: { client: e } }).then(function (e) { i.clientData = JSON.parse(e.data.d), i.clientData.date = new Date(i.clientData.date) }, function (e) { c.alert(d.instant(e.data.d), "") }) }, f = function () { i.loading = !0, t({ url: n.config.backend + "Clients.asmx/Load", method: "POST", data: { userId: n.usergroupid, user: i.user } }).then(function (e) { i.clients = JSON.parse(e.data.d), i.loading = !1 }, function (e) { c.alert(d.instant(e.data.d), ""), i.loading = !1 }) }; f(), i.newClient = function () { i.showDetailCalculationOfEnergyExpenditure = !1, t({ url: n.config.backend + "Clients.asmx/Init", method: "POST", data: "" }).then(function (t) { i.client = JSON.parse(t.data.d), i.client.date = new Date((new Date).setHours(0, 0, 0, 0)), i.clientData = [], i.calculation = [], i.initMyCalculation(), e.d = i.client, i.goalWeightValue_ = null, e.openPopup() }, function (e) { c.alert(d.instant(e.data.d), "") }) }, e.openPopup = function () { o.show({ controller: e.popupCtrl, templateUrl: "assets/partials/popup/client.html", parent: angular.element(document.body), targetEvent: "", clickOutsideToClose: !0, d: e.d }).then(function (t) { i.client = t, i.currTpl = "./assets/partials/main.html", e.toggleNewTpl("clientsdata"), "demo" == i.user.licenceStatus ? (u(i.client), i.client.clientId = "demo") : e.get(i.client) }, function () { }) }, e.popupCtrl = function (e, t, a, o, r) { e.d = a, e.d.date = new Date(e.d.date), e.d.birthDate = new Date(e.d.birthDate), e.user = i.user, e.hide = function () { t.hide() }, e.cancel = function () { t.cancel() }, e.firstNameRequiredMsq = null, e.firstNameRequiredMsq = null, e.save = function (a) { return "" == a.firstName || null == a.firstName ? (e.firstNameRequiredMsq = "first name is required", !1) : (e.firstNameRequiredMsq = null, c.getDateDiff(a.birthDate) < 365 ? (e.birthDateRequiredMsq = "birth date is required", !1) : (e.birthDateRequiredMsq = null, a.userId = n.userid, void o({ url: n.config.backend + "Clients.asmx/Save", method: "POST", data: { user: i.user, x: a, lang: i.config.language } }).then(function (e) { if (null != JSON.parse(e.data.d).message) return c.alert(d.instant(JSON.parse(e.data.d).message), ""), !1; f(), r(function () { t.hide(JSON.parse(e.data.d).data) }, 500) }, function (e) { c.alert(d.instant(e.data.d), "") }))) } }, e.edit = function (a) { t({ url: n.config.backend + "Clients.asmx/Get", method: "POST", data: { userId: n.usergroupid, clientId: a.clientId } }).then(function (t) { e.d = JSON.parse(t.data.d), e.openPopup() }, function (e) { alert(e.data.d) }) }, e.search = function () { t({ url: n.config.backend + "Clients.asmx/Load", method: "POST", data: { userId: n.usergroupid, user: i.user } }).then(function (t) { i.clients = JSON.parse(t.data.d), e.d = JSON.parse(t.data.d), e.openSearchPopup() }, function (e) { alert(e.data.d) }) }, e.openSearchPopup = function () { o.show({ controller: e.searchPopupCtrl, templateUrl: "assets/partials/popup/searchclients.html", parent: angular.element(document.body), targetEvent: "", clickOutsideToClose: !0, d: e.d }).then(function (t) { i.client = t, i.currTpl = "./assets/partials/main.html", e.toggleNewTpl("clientsdata"), e.get(t) }, function () { }) }, e.searchPopupCtrl = function (e, t, a, o) { e.d = a, e.limit = 20, e.loadMore = function () { e.limit += 20 }, e.getDateFormat = function (e) { return new Date(e) }, e.hide = function (e) { t.hide(e) }, e.cancel = function () { t.cancel() }, e.get = function (t) { e.hide(t) }, e.addNewClient = function () { t.cancel(), i.newClient() }, e.remove = function (e) { var n = t.confirm().title(d.instant("are you sure you want to delete") + "?").textContent(d.instant("client") + ": " + e.firstName + " " + e.lastName).targetEvent(e).ok(d.instant("yes")).cancel(d.instant("no")); t.show(n).then(function () { r(e) }, function () { }) }; var r = function (e) { o({ url: n.config.backend + "Clients.asmx/Delete", method: "POST", data: { userId: n.usergroupid, clientId: e.clientId, user: i.user } }).then(function (e) { i.clients = JSON.parse(e.data.d), i.client = [], i.clientData = [] }, function (e) { alert(e.data.d) }) } }, e.get = function (a) { i.showDetailCalculationOfEnergyExpenditure = !1, t({ url: n.config.backend + "ClientsData.asmx/Get", method: "POST", data: { userId: n.usergroupid, clientId: a.clientId } }).then(function (t) { null != JSON.parse(t.data.d).id ? (i.clientData = JSON.parse(t.data.d), i.clientData.date = new Date((new Date).setHours(0, 0, 0, 0)), e.getPalDetails(i.clientData.pal.value), g(), p(), null == i.clientData.dailyActivities.activities && (i.clientData.dailyActivities.activities = []), i.clientData.dailyActivities.activities.length > 0 && (i.showDetailCalculationOfEnergyExpenditure = !0), 0 == i.unitSystem && "en" == i.config.language && i.convertToStandardSystem(), i.goalWeightValue_ = null) : u(a) }, function (e) { alert(e.data.d) }) }, e.getPalDetails = function (a) { t({ url: n.config.backend + "Calculations.asmx/GetPalDetails", method: "POST", data: { palValue: a } }).then(function (t) { i.pal = JSON.parse(t.data.d), i.pal.value = a, i.clientData.pal = i.pal, e.toggleTpl("inputData") }, function (e) { alert(e.data.d) }) }, e.getClientLog = function (a) { t({ url: n.config.backend + "ClientsData.asmx/GetClientLog", method: "POST", data: { userId: n.usergroupid, clientId: a.clientId } }).then(function (t) { e.toggleTpl("clientStatictic"), e.clientLog = JSON.parse(t.data.d), angular.forEach(e.clientLog, function (e, t) { e.date = new Date(e.date), c.correctDate(e.date) }), null == i.goalWeightValue_ ? g() : y(e.displayType, e.clientLogsDays) }, function (e) { alert(e.data.d) }) }, e.removeClientLog = function (e, t) { var n = o.confirm().title(d.instant("delete record") + "?").textContent(d.instant("record date") + ": " + l("date")(e.date, "dd.MM.yyyy") + ", " + d.instant("mass") + ": " + e.weight + " kg").targetEvent(e).ok(d.instant("yes")).cancel(d.instant("no")); o.show(n).then(function () { m(e) }, function () { }) }; var m = function (a) { t({ url: n.config.backend + "ClientsData.asmx/Delete", method: "POST", data: { userId: n.usergroupid, clientData: a } }).then(function (t) { e.getClientLog(a) }, function (e) { alert(e.data.d) }) }; e.updateClientLog = function (a) { var i = angular.copy(a); i.date = i.date.toISOString(), t({ url: n.config.backend + "ClientsData.asmx/UpdateClientLog", method: "POST", data: { userId: n.usergroupid, clientData: i } }).then(function (t) { e.getClientLog(a) }, function (e) { alert(e.data.d) }) }; var g = function () { t({ url: n.config.backend + "Calculations.asmx/GetCalculation", method: "POST", data: { client: i.clientData } }).then(function (t) { i.calculation = JSON.parse(t.data.d), y(e.displayType, e.clientLogsDays) }, function (e) { void 0 === e.data.d ? c.alert(d.instant("you have to refresh the page. press Ctrl+F5") + ".", "") : c.alert(e.data.d, "") }) }, p = function () { t({ url: n.config.backend + "Calculations.asmx/GetMyCalculation", method: "POST", data: { userId: n.usergroupid, clientId: i.client.clientId } }).then(function (e) { i.myCalculation = JSON.parse(e.data.d) }, function (e) { alert(e.data.d) }) }; e.chartDays = [{ days: 7, title: "last 7 days" }, { days: 14, title: "last 14 days" }, { days: 30, title: "last 30 days" }, { days: 92, title: "last 3 months" }, { days: 180, title: "last 6 months" }, { days: 365, title: "last 12 months" }, { days: 1e5, title: "all" }], e.clientLogsDays = e.chartDays[2], e.changeDisplayType = function (e, t) { y(e, t) }; var h = function (e) { return { min: Math.round(18.5 * e * e / 1e4 * 10) / 10, max: Math.round(25 * e * e / 1e4 * 10) / 10 } }; e.changeGoalWeightValue = function (e, t, n) { i.goalWeightValue_ = parseInt(e), y(t, n) }; var y = function (t, n) { e.clientLog_ = []; var a = [], o = [], r = [], l = [], u = []; if (angular.isDefined(i.calculation.recommendedWeight)) { var f = 30, m = 0, g = i.calculation.recommendedEnergyIntake - i.calculation.recommendedEnergyExpenditure - i.calculation.tee; void 0 !== n && (f = n.days, e.clientLogsDays = n), angular.forEach(e.clientLog, function (n, s) { c.getDateDiff(n.date) <= f && (e.clientLog_.push(n), 0 == t && (a.push(n.weight), o.push(h(n.height).min), r.push(h(n.height).max), m = function (e, t, n, a, o, r) { var s = (a + c.getTwoDateDiff(o, r) * e / 7e3).toFixed(1), l = void 0 !== i.goalWeightValue_ ? parseInt(i.goalWeightValue_) : 0; return 0 == l && (l = 0 == e ? n.weight : e > 0 ? (h(n.height).min + h(n.height).max) / 2 : h(n.height).max), 0 == t && n.weight, e > 0 ? s <= l ? s : l : s >= l ? s : l }(g, s, n, e.clientLog[0].weight, e.clientLog[0].date, n.date), l.push(m)), 1 == t && (a.push(n.waist), o.push(95)), 2 == t && (a.push(n.hip), o.push(97)), s % (Math.floor(e.clientLog.length / 31) + 1) == 0 ? u.push(new Date(n.date).toLocaleDateString()) : u.push("")) }) } i.clientLogGraphData = s.createGraph([d.instant("measured value"), d.instant("lower limit"), d.instant("upper limit"), d.instant("goal")], [a, o, r, l], u, ["#3399ff", "#ff3333", "#33ff33", "#ffd633"], { responsive: !0, maintainAspectRatio: !0, legend: { display: !0 }, scales: { xAxes: [{ display: !0, scaleLabel: { display: !0 }, ticks: { beginAtZero: !1 } }], yAxes: [{ display: !0, scaleLabel: { display: !0 }, ticks: { beginAtZero: !1 } }] } }, [{ label: d.instant("measured value"), borderWidth: 1, type: "bar", fill: !0 }, { label: d.instant("lower limit"), borderWidth: 2, type: "line", fill: !1 }, { label: d.instant("upper limit"), borderWidth: 2, type: "line", fill: !1 }, { label: d.instant("goal") + " (2 " + d.instant("kg") + "/" + d.instant("mo") + ")", borderWidth: 3, type: "line", fill: !1, strokeColor: "#33ff33", fillColor: "#43ff33" }]) }; i.setClientLogGraphData = function (e, t) { y(e, t) }, e.getDateFormat = function (e) { return new Date(e) }, e.change = function (e, t) { switch (t) { case "height": return i.clientData.height = 1 * i.clientData.height + e; case "weight": return i.clientData.weight = 1 * i.clientData.weight + e; case "waist": return i.clientData.waist = 1 * i.clientData.waist + e; case "hip": return i.clientData.hip = 1 * i.clientData.hip + e; default: return "" } }, e.pdfLink = null, e.creatingPdf = !1, e.printClientPdf = function () { if (1 == e.creatingPdf) return !1; e.creatingPdf = !0, t({ url: n.config.backend + "PrintPdf.asmx/ClientPdf", method: "POST", data: { userId: n.usergroupid, client: i.client, clientData: i.clientData, lang: i.config.language } }).then(function (t) { e.creatingPdf = !1; var a = t.data.d; e.pdfLink = n.config.backend + "upload/users/" + i.user.userGroupId + "/pdf/" + a + ".pdf" }, function (t) { e.creatingPdf = !1, alert(t.data.d) }), e.hidePdfLink = function () { e.pdfLink = null } }, e.pdfLink1 = null, e.printClientLogPdf = function () { if (1 == e.creatingPdf) return !1; e.creatingPdf = !0; var a = null; null != document.getElementById("clientDataChart") && (a = document.getElementById("clientDataChart").toDataURL("image/png").replace(/^data:image\/(png|jpg);base64,/, "")), t({ url: n.config.backend + "PrintPdf.asmx/ClientLogPdf", method: "POST", data: { userId: n.usergroupid, client: i.client, clientData: i.clientData, clientLog: e.clientLog_, lang: i.config.language, imageData: a } }).then(function (t) { e.creatingPdf = !1; var a = t.data.d; e.pdfLink1 = n.config.backend + "upload/users/" + i.user.userGroupId + "/pdf/" + a + ".pdf" }) }, e.hidePdfLink1 = function () { e.pdfLink1 = null }, e.clientLogDiff = function (e, t, n, a) { if (void 0 === n) return !1; var i = 0; if (t.length - a == 1) return { diff: i.toFixed(1), icon: "fa fa-circle text-success" }; switch (e) { case "weight": i = (n.weight - t[t.length - a - 2].weight).toFixed(1); break; case "waist": i = (n.waist - t[t.length - a - 2].waist).toFixed(1); break; case "hip": i = (n.hip - t[t.length - a - 2].hip).toFixed(1); break; default: i = 0 } return i > 0 ? { diff: i, icon: "fa fa-arrow-up text-danger" } : i < 0 ? { diff: i, icon: "fa fa-arrow-down text-info" } : 0 == i ? { diff: i, icon: "fa fa-circle text-success" } : void 0 } }]).controller("detailCalculationOfEnergyExpenditureCtrl", ["$scope", "$http", "$sessionStorage", "$window", "$rootScope", "$mdDialog", "functions", "$translate", "$timeout", function (e, t, n, a, o, r, s, l, c) { o.totalDailyEnergyExpenditure = { value: 0, duration: 0 }; var d = function () { t({ url: n.config.backend + "DetailEnergyExpenditure.asmx/Init", method: "POST", data: "" }).then(function (t) { e.dailyActivity = JSON.parse(t.data.d) }, function (e) { s.alert(l.instant(e.data.d), "") }) }; d(); var u = function (t) { for (e.hours = [], e.minutes = [], i = t; i < 25; i++) e.hours.push(i); for (i = 0; i < 60; i += 5) e.minutes.push(i) }, f = function () { e.from = { hour: 0, min: 0 }, e.to = { hour: 0, min: 0 }, u(0) }; f(), e.clearDailyActivities = function () { o.clientData.dailyActivities.activities = [], o.clientData.dailyActivities.energy = 0, o.clientData.dailyActivities.duration = 0, o.totalDailyEnergyExpenditure.value = 0, o.totalDailyEnergyExpenditure.duration = 0, e.save(o.clientData.dailyActivities.activities), f() }, o.detailCalculationOfEnergyExpenditure = function () { o.showDetailCalculationOfEnergyExpenditure = !o.showDetailCalculationOfEnergyExpenditure, d() }; var m = function () { var e = 0; return angular.forEach(o.clientData.dailyActivities.activities, function (t, n) { e += t.energy }), e }, g = function () { var e = 0; return angular.forEach(o.clientData.dailyActivities.activities, function (t, n) { e += t.duration }), e }; e.confirmActivity = function (t) { if (0 == p(e.from, e.to)) return s.alert(l.instant("the start time and end of activity can not be the same"), ""), !1; e.dailyActivity.id = angular.fromJson(t).id, e.dailyActivity.activity = angular.fromJson(t).activity, e.dailyActivity.from.hour = e.from.hour, e.dailyActivity.from.min = e.from.min, e.dailyActivity.to.hour = e.to.hour, e.dailyActivity.to.min = e.to.min, e.dailyActivity.duration = p(e.from, e.to), e.dailyActivity.energy = h(p(e.from, e.to), angular.fromJson(t).factorKcal), o.clientData.dailyActivities.activities.push(angular.copy(e.dailyActivity)), o.totalDailyEnergyExpenditure.value = m(), o.clientData.dailyActivities.energy = o.totalDailyEnergyExpenditure.value, o.totalDailyEnergyExpenditure.duration = g(), o.clientData.dailyActivities.duration = o.totalDailyEnergyExpenditure.duration, e.from = angular.copy(e.to), u(e.from.hour) }; var p = function (e, t) { return 60 * t.hour + t.min - (60 * e.hour + e.min) }, h = function (e, t) { return e * t }; e.save = function (e) { if ("demo" == o.user.licenceStatus) return s.demoAlert("this function is not available in demo version"), !1; t({ url: n.config.backend + "DetailEnergyExpenditure.asmx/Save", method: "POST", data: { userId: o.user.userGroupId, clientId: o.client.clientId, activities: e } }).then(function (e) { o.clientData.dailyActivities = JSON.parse(e.data.d) }, function (e) { s.alert(l.instant(e.data.d), "") }) }; c(function () { !function () { if (null == o.clientData.dailyActivities.activities && (o.clientData.dailyActivities.activities = []), o.clientData.dailyActivities.activities.length > 0) { o.totalDailyEnergyExpenditure.value = m(), o.totalDailyEnergyExpenditure.duration = g(); var t = o.clientData.dailyActivities.activities[o.clientData.dailyActivities.activities.length - 1]; e.from = { hour: t.to.hour, min: t.to.min }, e.to = { hour: t.to.hour, min: t.to.min }, u(t.to.hour) } }() }, 1e3), e.selectHours = function () { 24 == e.to.hour && (e.to.min = 0, e.minutes = [], e.minutes.push(0)) } }]).controller("calculationCtrl", ["$scope", "$http", "$sessionStorage", "$window", "$rootScope", "$mdDialog", "charts", "$timeout", "functions", "$translate", function (e, t, n, a, i, o, r, s, l, c) { e.getBmiClass = function (e) { return e < 18.5 ? { text: "text-info", icon: "fa fa-exclamation" } : e >= 18.5 && e <= 25 ? { text: "text-success", icon: "fa fa-check" } : e > 25 && e < 30 ? { text: "text-warning", icon: "fa fa-exclamation" } : e >= 30 ? { text: "text-danger", icon: "fa fa-exclamation" } : void 0 }, e.getWaistClass = function (e) { return e.value < e.increasedRisk ? { text: "text-success", icon: "fa fa-check" } : e.value >= e.increasedRisk && e.value < e.highRisk ? { text: "text-warning", icon: "fa fa-exclamation" } : e.value >= e.highRisk ? { text: "text-danger", icon: "fa fa-exclamation" } : void 0 }; var d = function () { var e = i.calculation.bmi.value.toFixed(1); google.charts.setOnLoadCallback(r.guageChart("bmiChart", e, "BMI", { title: "BMI", min: 15, max: 34, greenFrom: 18.5, greenTo: 25, yellowFrom: 25, yellowTo: 30, redFrom: 30, redTo: 34, minorTicks: 5 })) }, u = function () { var e = i.calculation.whr.value.toFixed(1), t = i.calculation.whr.increasedRisk, n = i.calculation.whr.highRisk, a = { title: "WHR", min: 0, max: 1.6, greenFrom: i.calculation.whr.optimal - .1, greenTo: t, yellowFrom: t, yellowTo: n, redFrom: n, redTo: 1.6, minorTicks: .1 }; google.charts.setOnLoadCallback(r.guageChart("whrChart", e, "WHR", a)) }, f = function () { var e = i.calculation.waist.value.toFixed(1), t = i.calculation.waist.increasedRisk, n = i.calculation.waist.highRisk, a = { title: "WHR", min: 0, max: 140, greenFrom: 70, greenTo: t, yellowFrom: t, yellowTo: n, redFrom: n, redTo: 140, minorTicks: 5 }; google.charts.setOnLoadCallback(r.guageChart("waistChart", e, "cm", a)) }; void 0 === i.goalWeightValue_ && (i.goalWeightValue_ = 0), e.changeGoalWeightValue = function (e) { i.goalWeightValue_ = angular.copy(e) }, e.getGoal = function (t) { var n = 0, a = 0; switch (i.goalWeightValue = 0, t) { case "G1": "G1" == i.appCalculation.goal.code && (n = i.appCalculation.recommendedEnergyIntake, a = i.appCalculation.recommendedEnergyExpenditure), "G2" == i.appCalculation.goal.code && (n = i.appCalculation.tee - 300, a = i.appCalculation.recommendedEnergyExpenditure), "G3" == i.appCalculation.goal.code && (n = i.appCalculation.recommendedEnergyIntake + 300, a = i.appCalculation.recommendedEnergyExpenditure), i.goalWeightValue = Math.round(angular.copy(i.calculation.recommendedWeight.max)); break; case "G2": "G1" == i.appCalculation.goal.code && (n = i.appCalculation.tee + i.appCalculation.recommendedEnergyExpenditure, a = i.appCalculation.recommendedEnergyExpenditure), "G2" == i.appCalculation.goal.code && (n = i.appCalculation.recommendedEnergyIntake, a = i.appCalculation.recommendedEnergyExpenditure), "G3" == i.appCalculation.goal.code && (n = i.appCalculation.recommendedEnergyIntake - 300, a = i.appCalculation.recommendedEnergyExpenditure), i.goalWeightValue = Math.round(angular.copy(i.clientData.weight)); break; case "G3": "G1" == i.appCalculation.goal.code && (n = i.appCalculation.recommendedEnergyIntake, a = i.appCalculation.recommendedEnergyExpenditure), "G2" == i.appCalculation.goal.code && (n = i.appCalculation.recommendedEnergyIntake + 300 + i.appCalculation.recommendedEnergyExpenditure, a = i.appCalculation.recommendedEnergyExpenditure), "G3" == i.appCalculation.goal.code && (n = i.appCalculation.recommendedEnergyIntake, a = i.appCalculation.recommendedEnergyExpenditure), "G4" == i.appCalculation.goal.code && (n = i.appCalculation.recommendedEnergyIntake + 500, a = i.appCalculation.recommendedEnergyExpenditure + 200), i.goalWeightValue = i.clientData.weight < i.calculation.recommendedWeight.min ? Math.round(angular.copy(i.calculation.recommendedWeight.min)) : Math.round(angular.copy(i.clientData.weight + 10)); break; case "G4": "G1" == i.appCalculation.goal.code && (n = i.appCalculation.tee + i.calculation.recommendedEnergyExpenditure, a = i.calculation.recommendedEnergyExpenditure + 200), "G2" == i.appCalculation.goal.code && (n = i.appCalculation.tee + 500, a = i.appCalculation.recommendedEnergyExpenditure + 200), "G3" == i.appCalculation.goal.code && (n = i.appCalculation.recommendedEnergyIntake + 400, a = i.appCalculation.recommendedEnergyExpenditure + 100), i.goalWeightValue = Math.round(angular.copy(i.clientData.weight)); break; default: n = 0, a = 0 } e.changeGoalWeightValue(i.goalWeightValue), angular.forEach(i.goals, function (e, n) { e.code == t && (i.clientData.goal.code = e.code, i.clientData.goal.title = e.title, i.calculation.goal.code = t) }), i.calculation.recommendedEnergyIntake = Math.round(n), i.calculation.recommendedEnergyExpenditure = Math.round(a) }; var m = function () { i.calculation.bmi.value < 18.5 && (i.goals[0].isDisabled = !0), i.calculation.bmi.value > 25 && (i.goals[2].isDisabled = !0) }; e.creatingPdf = !1, e.printPdf = function () { e.creatingPdf = !0, t({ url: n.config.backend + "PrintPdf.asmx/CalculationPdf", method: "POST", data: { userId: n.usergroupid, client: i.client, clientData: i.clientData, calculation: i.calculation, myCalculation: i.myCalculation, goal: i.goalWeightValue_, lang: i.config.language } }).then(function (t) { var a = t.data.d; e.creatingPdf = !1, e.pdfLink = n.config.backend + "upload/users/" + i.user.userGroupId + "/pdf/" + a + ".pdf" }, function (t) { e.creatingPdf = !1, alert(t.data.d) }) }, e.hidePdfLink = function () { e.pdfLink = null }, e.clearMyCalculation = function () { i.initMyCalculation() }, e.saveMyCalculation = function (e) { if ("demo" == i.user.licenceStatus) return l.demoAlert("the saving function is disabled in demo version"), !1; var a = angular.copy(i.calculation); a.recommendedEnergyIntake = e.recommendedEnergyIntake, a.recommendedEnergyExpenditure = e.recommendedEnergyExpenditure, t({ url: n.config.backend + "Calculations.asmx/SaveMyCalculation", method: "POST", data: { userId: n.usergroupid, clientId: i.client.clientId, myCalculation: a } }).then(function (e) { l.alert(c.instant(e.data.d), "") }, function (e) { l.alert(c.instant(e.data.d), "") }) }; t({ url: n.config.backend + "Calculations.asmx/GetCalculation", method: "POST", data: { client: i.clientData } }).then(function (a) { i.calculation = JSON.parse(a.data.d), i.appCalculation = JSON.parse(a.data.d), null != i.clientData.goal.code && null != i.clientData.goal.code && 0 != i.clientData.goal.code || (i.clientData.goal.code = i.calculation.goal.code), google.charts.load("current", { packages: ["gauge"] }), s(function () { d(), u(), f() }, 1e3), t({ url: n.config.backend + "Goals.asmx/Load", method: "POST", data: "" }).then(function (e) { i.goals = JSON.parse(e.data.d), m() }, function (e) { alert(e.data.d) }), e.getGoal(i.clientData.goal.code) }, function (e) { void 0 === e.data.d ? l.alert(c.instant("you have to refresh the page. press Ctrl+F5") + ".", "") : l.alert(e.data.d, "") }) }]).controller("activitiesCtrl", ["$scope", "$http", "$sessionStorage", "$window", "$rootScope", "$mdDialog", "functions", "$translate", function (e, t, n, a, i, o, r, s) { e.orderdirection = "-", e.orderby = function (t) { var n = "+" == e.orderdirection ? "-" : "+"; e.order = n + t, e.orderdirection = n }, e.orderby("activity"), null == i.activities && i.loadActivities(), angular.isDefined(i.appCalculation) && angular.isDefined(i.myCalculation) ? i.calculation.recommendedEnergyExpenditure = r.isNullOrEmpty(i.myCalculation.recommendedEnergyExpenditure) ? i.appCalculation.recommendedEnergyExpenditure : i.myCalculation.recommendedEnergyExpenditure : (i.newTpl = "./assets/partials/calculation.html", i.selectedNavItem = "calculation"); e.openPopup = function (t) { var n; energyLeft = (n = 0, i.clientData.activities.length > 0 && angular.forEach(i.clientData.activities, function (e, t) { n += e.energy }), i.calculation.recommendedEnergyExpenditure - n), energyLeft > 10 ? o.show({ controller: e.popupCtrl, templateUrl: "assets/partials/popup/activity.html", parent: angular.element(document.body), targetEvent: "", clickOutsideToClose: !0, fullscreen: e.customFullscreen, d: { activity: t, energy: energyLeft } }).then(function (e) { energyLeft = e }, function () { }) : r.alert(s.instant("the selected additional energy expenditure is the same as recommended"), "") }, e.popupCtrl = function (e, t, n, a) { e.d = n.activity; var o = n.energy; e.duration = Math.round(o / (e.d.factorKcal * i.clientData.weight) * 60), e.cancel = function () { t.cancel() }, e.confirm = function (n) { o = e.duration * (e.d.factorKcal * i.clientData.weight) / 60, i.clientData.activities.push({ id: n.id, activity: n.activity, duration: e.duration, energy: o }), t.hide(o) } }, e.removeActivity = function (e, t) { var n = o.confirm().title(s.instant("delete choosen activity")).textContent(e.title).targetEvent(e).ok(s.instant("yes")).cancel(s.instant("no")); o.show(n).then(function () { i.clientData.activities.splice(t, 1) }, function () { }) } }]).controller("dietsCtrl", ["$scope", "$http", "$sessionStorage", "$window", "$rootScope", "$mdDialog", "functions", function (e, t, n, a, i, o, r) { null == i.clientData.diet.id && function () { var e, a = i.clientData.age, o = "", r = i.clientData.goal.code; if (a < 14) switch (r) { case "G1": o = "d4"; break; case "G2": case "G3": o = "d1"; break; case "G4": o = "d7"; break; default: o = "d1" } if (a >= 14 && a < 18) switch (r) { case "G1": o = "d5"; break; case "G2": case "G3": o = "d2"; break; case "G4": o = "d7"; break; default: o = "d2" } if (a >= 18) switch (r) { case "G1": o = "d6"; break; case "G2": case "G3": o = "d3"; break; case "G4": o = "d7"; break; default: o = "d3" } e = o, t({ url: n.config.backend + "Diets.asmx/Get", method: "POST", data: { id: e } }).then(function (e) { var t = JSON.parse(e.data.d); i.clientData.diet = t }, function (e) { alert(e.data.d) }) }(), e.select = function (e) { i.clientData.diet = e } }]).controller("mealsCtrl", ["$scope", "$http", "$sessionStorage", "$window", "$rootScope", "$mdDialog", "functions", "$translate", function (e, t, n, a, i, o, r, s) { e.toggleMealsTpl = function (t) { e.tpl = t, i.mealsAreChanged = !0 }; !function () { if (void 0 !== i.currentMenu && null != i.currentMenu.id && i.currentMenu.data.meals.length > 0) return "B" == i.currentMenu.data.meals[0].code ? e.tpl = "standardMeals" : e.tpl = "myMeals", !1; void 0 !== i.clientData.myMeals && null != i.clientData.myMeals && null != i.clientData.myMeals.data && i.clientData.myMeals.data.meals.length >= 2 ? e.tpl = "myMeals" : e.tpl = "standardMeals" }() }]).controller("standardMealsCtrl", ["$scope", "$http", "$sessionStorage", "$window", "$rootScope", "$mdDialog", "functions", "$translate", function (e, t, n, a, i, o, r, s) { i.isMyMeals = !1; var l = function () { t({ url: n.config.backend + "Meals.asmx/Load", method: "POST", data: "" }).then(function (e) { i.clientData.meals = JSON.parse(e.data.d), angular.forEach(i.clientData.meals, function (e, t) { i.clientData.meals[t].title = s.instant(i.clientData.meals[t].title) }) }, function (e) { alert(e.data.d) }) }; 0 == i.clientData.meals.length ? l() : "B" != i.clientData.meals[0].code && l() }]).controller("myMealsCtrl", ["$scope", "$http", "$sessionStorage", "$window", "$rootScope", "$mdDialog", "functions", "$translate", function (e, t, n, a, i, o, r, s) { var l = function () { t({ url: n.config.backend + "MyMeals.asmx/Init", method: "POST", data: { user: i.user } }).then(function (e) { i.myMeals = JSON.parse(e.data.d), i.clientData.myMeals = angular.copy(i.myMeals), i.clientData.meals = i.clientData.myMeals.data.meals, i.isMyMeals = !0 }, function (e) { alert(e.data.d) }) }, c = function () { if (void 0 !== i.currentMenu && null != i.currentMenu.id) return !1; void 0 !== i.clientData.myMeals && null != i.clientData.myMeals && null != i.clientData.myMeals.data ? i.clientData.myMeals.data.meals.length > 0 && (i.myMeals = angular.copy(i.clientData.myMeals)) : l() }; angular.isDefined(i.myMeals) ? c() : t({ url: n.config.backend + "MyMeals.asmx/Init", method: "POST", data: { user: i.user } }).then(function (e) { i.myMeals = JSON.parse(e.data.d), c(), i.isMyMeals = !0 }, function (e) { alert(e.data.d) }), e.new = function () { if (i.user.userType < 2) return !1; l() }, e.getTemplate = function () { if (i.user.userType < 2) return !1; t({ url: n.config.backend + "MyMeals.asmx/Template", method: "POST", data: { user: i.user, lang: i.config.language } }).then(function (e) { i.myMeals = JSON.parse(e.data.d), i.user.userType > 2 && (i.clientData.myMeals = angular.copy(i.myMeals), i.clientData.meals = i.clientData.myMeals.data.meals), i.isMyMeals = !0, i.mealsAreChanged = !0 }, function (e) { alert(e.data.d) }) }; var d = function () { void 0 !== i.myMeals && null != i.myMeals.data && i.myMeals.data.meals.length > 0 && (angular.forEach(i.myMeals.data.meals, function (e, t) { e.code = "MM" + t, i.myMeals.data.energyPerc[t].meal.code = e.code }), i.isMyMeals = !0, i.clientData.myMeals = angular.copy(i.myMeals)) }; e.add = function () { void 0 === i.myMeals ? l() : u() }, i.setMealCode = function () { i.isMyMeals && d() }; var u = function () { return !(i.user.userType < 2) && (i.myMeals.data.meals.length >= 9 ? (r.alert(s.instant("you have reached the maximum number of meals"), ""), !1) : (i.myMeals.data.meals.push({ code: "", title: "", description: "", isSelected: !0, isDisabled: !1 }), i.myMeals.data.energyPerc.push({ meal: { code: "", energyMinPercentage: 0, energyMaxPercentage: 0, energyMin: 0, energyMax: 0 } }), void d())) }; e.removeMeal = function (e) { if (i.user.userType < 2) return !1; i.myMeals.data.meals.splice(e, 1), i.myMeals.data.energyPerc.splice(e, 1), d() }, e.save = function () { return "demo" == i.user.licenceStatus ? (r.demoAlert("the saving function is disabled in demo version"), !1) : !(i.user.userType < 2) && (i.myMeals.data.meals.length < 3 ? (r.alert(s.instant("choose at least 3 meals"), ""), !1) : r.isNullOrEmpty(i.myMeals.title) ? (r.alert(s.instant("title is required"), ""), !1) : void t({ url: n.config.backend + "MyMeals.asmx/Save", method: "POST", data: { userId: n.usergroupid, x: i.myMeals } }).then(function (e) { "error" != e.data.d ? (i.myMeals = JSON.parse(e.data.d), i.clientData.myMeals = angular.copy(i.myMeals), i.isMyMeals = !0) : r.alert(s.instant("meals with the same name already exists"), "") }, function (e) { r.alert(s.instant(e.data.d), "") })) }, e.remove = function (e) { if (i.user.userType < 2) return !1; var t = o.confirm().title(s.instant("delete meals") + "?").textContent().targetEvent().ok(s.instant("yes")).cancel(s.instant("no")); o.show(t).then(function () { remove(e) }, function () { }) }, remove = function (a) { t({ url: n.config.backend + "MyMeals.asmx/Delete", method: "POST", data: { userId: n.usergroupid, id: a } }).then(function (t) { e.mealsList = JSON.parse(t.data.d), l() }, function (e) { r.alert(s.instant(e.data.d), "") }) }, e.search = function () { f() }; var f = function () { if (i.user.userType < 2) return !1; o.show({ controller: m, templateUrl: "assets/partials/popup/mymeals.html", parent: angular.element(document.body), clickOutsideToClose: !0 }).then(function (e) { i.myMeals = e, i.clientData.myMeals = angular.copy(i.myMeals), i.clientData.meals = i.clientData.myMeals.data.meals, i.isMyMeals = !0, i.mealsAreChanged = !0 }, function () { }) }, m = function (e, t, a) { e.limit = 20, e.loadMore = function () { e.limit += 20 }; e.loading = !0, a({ url: n.config.backend + "MyMeals.asmx/Load", method: "POST", data: { userId: i.user.userGroupId } }).then(function (t) { e.d = JSON.parse(t.data.d), e.loading = !1 }, function (t) { e.loading = !1, alert(t.data.d) }), e.cancel = function () { t.cancel() }; e.confirm = function (o) { !function (o) { a({ url: n.config.backend + "MyMeals.asmx/Get", method: "POST", data: { userId: i.user.userGroupId, id: o.id } }).then(function (n) { e.meals = JSON.parse(n.data.d), t.hide(e.meals) }, function (e) { alert(e.data.d) }) }(o) } } }]).controller("menuCtrl", ["$scope", "$http", "$sessionStorage", "$window", "$rootScope", "$mdDialog", "charts", "$timeout", "functions", "$translate", function (e, t, n, a, i, o, r, s, l, c) { e.addFoodBtnIcon = "fa fa-plus", e.addFoodBtn = !1, t({ url: n.config.backend + "PrintPdf.asmx/InitMenuSettings", method: "POST", data: {} }).then(function (e) { i.printSettings = JSON.parse(e.data.d) }, function (e) { alert(e.data.d) }), i.selectedFoods = null == i.selectedFoods ? [] : i.selectedFoods, i.clientData.meals.length < 3 && (i.newTpl = "assets/partials/meals.html", i.selectedNavItem = "meals", l.alert(c.instant("choose at least 3 meals"), "")); var d = function (e) { var a = null; void 0 !== e.myMeals && null != e.myMeals && null != e.myMeals.data && e.myMeals.data.meals.length >= 2 && 1 == i.isMyMeals && (e.meals = e.myMeals.data.meals, a = e.myMeals.data.energyPerc), t({ url: n.config.backend + "Foods.asmx/GetRecommendations", method: "POST", data: { client: e, myRecommendedEnergyIntake: i.myCalculation.recommendedEnergyIntake, myMealsEnergyPerc: a } }).then(function (e) { i.recommendations = JSON.parse(e.data.d), M() }, function (e) { void 0 === e.data.d ? l.alert(c.instant("you have to refresh the page. press Ctrl+F5") + ".", "") : l.alert(e.data.d, "") }) }, u = function () { t({ url: n.config.backend + "Foods.asmx/Init", method: "POST", data: { lang: i.config.language } }).then(function (t) { e.food = t.data.d.food, f() }, function (e) { alert(e.data.d) }) }, f = function () { t({ url: n.config.backend + "Menues.asmx/Init", method: "POST", data: {} }).then(function (e) { i.currentMenu = JSON.parse(e.data.d), i.currentMenu.client = i.client, i.currentMenu.client.clientData = i.clientData, i.currentMenu.data.meals = i.clientData.meals, angular.forEach(i.currentMenu.data.meals, function (e, t) { i.currentMenu.data.meals[t].description = "" }), i.currentMeal = "B", void 0 !== i.currentMenu && null !== i.currentMenu.data && i.currentMenu.data.meals.length > 0 && (i.currentMeal = i.currentMenu.data.meals[0].code), w(i.currentMenu), d(i.currentMenu.client.clientData) }, function (e) { alert(e.data.d) }) }; if (e.toggleMeals = function (e) { i.currentMeal = e }, i.mealsAreChanged) i.mealsAreChanged = !1, u(); else if (void 0 === i.currentMenu) u(); else if (0 == i.currentMenu.data.selectedFoods.length) u(); else { var m = i.currentMenu.data.meals; i.currentMenu.data.meals = angular.copy(i.clientData.meals), angular.forEach(i.currentMenu.data.meals, function (e, t) { if (t >= i.currentMenu.data.meals.length || t >= m.length) return !1; m[t].code == e.code && i.currentMenu.data.selectedFoods.length > 0 && (e.description = m[t].description) }), i.currentMenu.client = i.client, i.currentMenu.client.clientData = i.clientData } e.toggleAnalytics = function (t) { e.loading = !0, s(function () { e.loading = !1, e.analyticsTpl = t, "dailyMenuTpl" == i.menuTpl ? w(i.currentMenu) : E(i.weeklyMenu.menuList) }, 700) }, e.toggleAnalytics("chartsTpl"), e.changeQuantity = function (a, o, r) { a.quantity > 1e-4 && 0 == isNaN(a.quantity) && a.mass > 1e-4 && 0 == isNaN(a.mass) && (e.selectedThermalTreatment = null, angular.forEach(i.currentMenu.data.selectedFoods[r].thermalTreatments, function (t, n) { 1 == t.isSelected && (e.selectedThermalTreatment = t) }), s(function () { t({ url: n.config.backend + "Foods.asmx/ChangeFoodQuantity", method: "POST", data: { initFood: i.currentMenu.data.selectedInitFoods[r], newQuantity: a.quantity, newMass: a.mass, type: o, thermalTreatment: e.selectedThermalTreatment } }).then(function (e) { i.currentMenu.data.selectedFoods[r] = JSON.parse(e.data.d), w(i.currentMenu) }, function (e) { }) }, 600)) }, e.change = function (t, n, a) { i.currentMenu.data.selectedFoods[a].quantity + t > 0 && ("quantity" == n && (i.currentMenu.data.selectedFoods[a].quantity = 1 * i.currentMenu.data.selectedFoods[a].quantity + t, e.changeQuantity(i.currentMenu.data.selectedFoods[a], "quantity", a)), "mass" == n && (i.currentMenu.data.selectedFoods[a].mass = 1 * i.currentMenu.data.selectedFoods[a].mass + t, e.changeQuantity(i.currentMenu.data.selectedFoods[a], "mass", a))) }, e.openFoodPopup = function (t, n) { if (e.addFoodBtn = !0, e.addFoodBtnIcon = "fa fa-spinner fa-spin", "demo" == i.user.licenceStatus && i.currentMenu.data.selectedFoods.length > 9) return l.demoAlert("in demo version maximum number of choosen foods is 10"), e.addFoodBtnIcon = "fa fa-plus", e.addFoodBtn = !1, !1; o.show({ controller: i.foodPopupCtrl, templateUrl: "assets/partials/popup/food.html", parent: angular.element(document.body), clickOutsideToClose: !0, d: { foods: i.foods, myFoods: i.myFoods, foodGroups: i.foodGroups, food: t, idx: n, config: i.config } }).then(function (t) { e.addFoodBtnIcon = "fa fa-plus", e.addFoodBtn = !1, void 0 !== t.openAsMyFood && 1 == t.openAsMyFood ? (i.newTpl = "./assets/partials/myfoods.html", i.selectedNavItem = "myfoods", i.myFood_ = t.initFood) : e.addFoodToMeal(t.food, t.initFood, n) }, function () { e.addFoodBtnIcon = "fa fa-plus", e.addFoodBtn = !1 }) }, i.foodPopupCtrl = function (e, t, a, o, r) { e.d = a, e.foods = a.foods, e.myFoods = a.myFoods, e.foodGroups = a.foodGroups; var c, d = null, u = !1; null == a.food ? (e.food = null, d = null, u = !1) : (e.food = a.food, c = a.food, o({ url: n.config.backend + "Foods.asmx/InitFoodForEdit", method: "POST", data: { food: c } }).then(function (e) { d = JSON.parse(e.data.d) }, function (e) { alert(e.data.d) }), u = !0), e.limit = 100, e.initCurrentFoodGroup = function () { e.currentGroup = { code: "A", title: "all foods" } }, e.initCurrentFoodGroup(); o({ url: n.config.backend + "Foods.asmx/InitThermalTreatment", method: "POST", data: "" }).then(function (t) { e.selectedThermalTreatment = JSON.parse(t.data.d) }, function (e) { alert(e.data.d) }), e.showMyFoods = function (t) { e.isShowMyFood = t }, e.getFoodDetails = function (t) { if (1 == e.isShowMyFood) return f(t), !1; o({ url: n.config.backend + "Foods.asmx/Get", method: "POST", data: { userId: i.user.userId, id: JSON.parse(t).id } }).then(function (t) { e.food = JSON.parse(t.data.d), e.food.food = r.instant(e.food.food), e.food.unit = r.instant(e.food.unit), e.food.foodGroup.title = r.instant(e.food.foodGroup.title), e.food.meal.title = r.instant(e.food.meal.title), angular.forEach(e.food.thermalTreatments, function (t, n) { e.food.thermalTreatments[n].thermalTreatment.title = r.instant(e.food.thermalTreatments[n].thermalTreatment.title) }), d = angular.copy(e.food) }, function (e) { alert(e.data.d) }) }; var f = function (t) { o({ url: n.config.backend + "MyFoods.asmx/Get", method: "POST", data: { userId: i.user.userGroupId, id: JSON.parse(t).id } }).then(function (t) { e.food = JSON.parse(t.data.d), e.food.unit = r.instant(e.food.unit), e.food.foodGroup.title = r.instant(e.food.foodGroup.title), d = angular.copy(e.food) }, function (e) { alert(e.data.d) }) }, m = 0; e.getThermalTreatment = function (t, n) { l.isNullOrEmpty(n) && (n = m), angular.forEach(t, function (e, t) { e.isSelected = !1 }), e.selectedThermalTreatment = t[n], t[n].isSelected = !0, m = n, u ? u = !1 : g(e.selectedThermalTreatment) }; var g = function (t) { o({ url: n.config.backend + "Foods.asmx/IncludeThermalTreatment", method: "POST", data: { initFood: d, food: e.food, thermalTreatment: t } }).then(function (t) { e.food = JSON.parse(t.data.d) }, function (e) { alert(e.data.d) }) }; e.cancel = function () { t.cancel() }, e.confirm = function (e) { var n = { food: e, initFood: d }; t.hide(n) }, e.changeQuantity = function (t, a) { if (u = !1, t.quantity > 1e-4 && 0 == isNaN(t.quantity) && t.mass > 1e-4 && 0 == isNaN(t.mass)) { var i = e.food.food; s(function () { o({ url: n.config.backend + "Foods.asmx/ChangeFoodQuantity", method: "POST", data: { initFood: d, newQuantity: t.quantity, newMass: t.mass, type: a, thermalTreatment: e.selectedThermalTreatment } }).then(function (t) { e.food = JSON.parse(t.data.d), e.food.food = i }, function (e) { }) }, 600) } }, e.change = function (t, n) { e.food.quantity + t > 0 && ("quantity" == n && (e.food.quantity = e.food.quantity + t, e.changeQuantity(e.food, "quantity")), "mass" == n && (e.food.mass = e.food.mass + t, e.changeQuantity(e.food, "mass"))) }, e.showFoodSubGroups = function (t) { "A" == t.parent && (e.currentMainGroup = t.group.code) }, e.changeFoodGroup = function (t) { e.searchFood = "", e.limit = e.foods.length + 1, e.showMyFoods(!1), e.currentGroup = { code: t.code, title: t.title } }, e.checkIf = function (t) { return t.foodGroup.code == e.currentGroup.code || "A" == e.currentGroup.code || 1 == e.isShowMyFood || e.currentGroup.code == e.currentMainGroup && (t.foodGroup.parent == e.currentGroup.code || void 0) }, e.loadMore = function () { e.limit = e.limit + e.foods.length }, e.openAsMyFood = function (e) { var n = { food: e, initFood: d, openAsMyFood: !0 }; t.hide(n) } }, e.addFoodToMeal = function (t, n, a) { null == t.food && null == t.food || (t.meal.code = i.currentMeal, angular.forEach(i.clientData.meals, function (e, n) { e.code == t.meal.code && (t.meal.title = c.instant(e.title)) }), null == a ? (i.currentMenu.data.selectedFoods.push(t), i.currentMenu.data.selectedInitFoods.push(n)) : (i.currentMenu.data.selectedFoods[a] = t, i.currentMenu.data.selectedInitFoods[a] = n), n.meal.code = i.currentMeal, e.food = [], e.choosenFood = "", e.thermalTreatment = "", w(i.currentMenu)) }, e.new = function () { u() }, e.delete = function () { var e = o.confirm().title(c.instant("delete menu") + "?").textContent().targetEvent().ok(c.instant("yes")).cancel(c.instant("no")); o.show(e).then(function () { u(), alert("TODO") }, function () { }) }, e.removeFood = function (e, t) { var n = o.confirm().title(c.instant("delete food") + "?").textContent(e.food).targetEvent(e).ok(c.instant("yes")).cancel(c.instant("no")); o.show(n).then(function () { i.currentMenu.data.selectedFoods.splice(t, 1), i.currentMenu.data.selectedInitFoods.splice(t, 1), w(i.currentMenu) }, function () { }) }, e.printPreview = function () { o.show({ controller: e.printPreviewCtrl, templateUrl: "assets/partials/popup/printmenu.html", parent: angular.element(document.body), targetEvent: "", clickOutsideToClose: !0, fullscreen: e.customFullscreen, d: { currentMenu: i.currentMenu, clientData: i.clientData, client: i.client, totals: i.totals, settings: i.printSettings, config: i.config } }).then(function () { }, function () { }) }, e.printPreviewCtrl = function (e, t, a, o) { function r(e, t, n) { return (l.isNullOrEmpty(e) ? "" : e + ", ") + t + " serv. " + c.instant(n) } e.currentMenu = a.currentMenu, e.clientData = a.clientData, e.client = a.client, e.totals = a.totals, e.settings = a.settings, e.config = a.config, e.cancel = function () { t.cancel() }, e.consumers = 1, e.changeNumberOfConsumers = function (t) { if (t < 1 || l.isNullOrEmpty(t)) return !1; e.consumers = t, o({ url: n.config.backend + "Foods.asmx/ChangeNumberOfConsumers", method: "POST", data: { foods: e.currentMenu.data.selectedFoods, number: t } }).then(function (t) { e.foods = JSON.parse(t.data.d) }, function (e) { alert(e.data.d) }) }, angular.isDefined(e.currentMenu) && e.changeNumberOfConsumers(e.consumers), e.copyToClipboard = function (e) { return l.copyToClipboard(e) }, e.getMealTitle = function (e) { return i.getMealTitle(e) }, e.getServDescription = function (e) { var t = ""; return e.cerealsServ > 0 && (t = r(t, e.cerealsServ, "cereals_")), e.vegetablesServ > 0 && (t = r(t, e.vegetablesServ, "vegetables_")), e.fruitServ > 0 && (t = r(t, e.fruitServ, "fruit_")), e.meatServ > 0 && (t = r(t, e.meatServ, "meat_")), e.milkServ > 0 && (t = r(t, e.milkServ, "milk_")), e.fatsServ > 0 && (t = r(t, e.fatsServ, "fats_")), t }, e.isSeparatedDes = function (e) { return e.includes("~") }; e.list = []; var s = []; e.getTitleDes = function (t) { if (s === t) return s; if (l.isNullOrEmpty(t) || e.list.includes(t)) return s = t, t; e.list.push(t); var n = t.split("|"), a = []; return angular.forEach(n, function (e, t) { a.push({ title: e.split("~")[0], description: e.split("~")[1] }) }), t, s = a, a.length > 0 ? a : t }, e.settings = a.settings, e.pdfLink, e.creatingPdf = !1, e.printMenuPdf = function (t) { angular.isDefined(i.currentMenu) && (e.creatingPdf = !0, o({ url: n.config.backend + "Foods.asmx/ChangeNumberOfConsumers", method: "POST", data: { foods: i.currentMenu.data.selectedFoods, number: t } }).then(function (a) { var r = JSON.parse(a.data.d), s = angular.copy(i.currentMenu); s.data.selectedFoods = r, o({ url: n.config.backend + "PrintPdf.asmx/MenuPdf", method: "POST", data: { userId: n.usergroupid, currentMenu: s, totals: i.totals, consumers: t, lang: i.config.language, settings: e.settings } }).then(function (t) { var a = t.data.d; e.creatingPdf = !1, e.pdfLink = n.config.backend + "upload/users/" + i.user.userGroupId + "/pdf/" + a + ".pdf" }, function (t) { e.creatingPdf = !1, alert(t.data.d) }) }, function (e) { alert(e.data.d) })) }, e.hidePdfLink = function () { e.pdfLink = null } }, e.get = function () { "demo" == i.user.licenceStatus ? l.demoAlert("this function is not available in demo version") : g() }; var g = function () { o.show({ controller: p, templateUrl: "assets/partials/popup/getmenu.html", parent: angular.element(document.body), clickOutsideToClose: !0, data: { config: i.config, clientData: i.clientData } }).then(function (e) { i.currentMenu.id = e.id, i.currentMenu.title = e.title, i.currentMenu.note = e.note, i.currentMenu.userId = e.userId, i.currentMenu.data = e.data, i.currentMenu.client.clientData = i.clientData, i.currentMenu.client.clientData.meals = e.data.meals, i.currentMenu.client.clientData.myMeals = e.client.clientData.myMeals, i.isMyMeals = !1, null != i.currentMenu.client.clientData.myMeals && null != i.currentMenu.client.clientData.myMeals.data && i.currentMenu.client.clientData.myMeals.data.meals.length >= 2 && (i.isMyMeals = !0), d(angular.copy(i.currentMenu.client.clientData)), w(i.currentMenu), i.currentMeal = e.data.meals[0].code }, function () { }) }, p = function (e, t, a, o, r, s, c) { e.config = o.config, e.clientData = o.clientData, e.loadType = 0, e.type = 0, e.appMenues = !1, e.toTranslate = !1, e.toLanguage = "", e.limit = 20, e.loadMore = function () { e.limit += 20 }; var d = function () { e.loading = !0, e.appMenues = !1, a({ url: n.config.backend + "Menues.asmx/Load", method: "POST", data: { userId: i.user.userGroupId } }).then(function (t) { e.d = JSON.parse(t.data.d), angular.forEach(e.d, function (e, t) { e.date = new Date(e.date), l.correctDate(e.date) }), e.loading = !1 }, function (t) { e.loading = !1, alert(t.data.d) }) }; d(), e.load = function () { d() }, e.remove = function (e) { var n = t.confirm().title(r.instant("remove menu") + "?").textContent(e.title).targetEvent(e).ok(r.instant("yes")).cancel(r.instant("no")); t.show(n).then(function () { u(e) }, function () { }) }; var u = function (t) { a({ url: n.config.backend + "Menues.asmx/Delete", method: "POST", data: { userId: i.user.userGroupId, id: t.id } }).then(function (t) { e.d = JSON.parse(t.data.d) }, function (e) { alert(e.data.d) }) }; e.cancel = function () { t.cancel() }; e.loadAppMenues = function () { e.appMenues = !0, a({ url: n.config.backend + "Menues.asmx/LoadAppMenues", method: "POST", data: { lang: i.config.language } }).then(function (t) { e.d = JSON.parse(t.data.d) }, function (e) { alert(e.data.d) }) }; e.confirm = function (o) { 1 == e.appMenues ? function (o) { a({ url: n.config.backend + "Menues.asmx/GetAppMenu", method: "POST", data: { id: o.id, lang: i.config.language, toTranslate: e.toTranslate } }).then(function (n) { var a = JSON.parse(n.data.d); 1 == e.toTranslate && f(a), t.hide(a) }, function (e) { alert(e.data.d) }) }(o) : function (e) { a({ url: n.config.backend + "Menues.asmx/Get", method: "POST", data: { userId: i.user.userGroupId, id: e.id } }).then(function (e) { var n = JSON.parse(e.data.d); t.hide(n) }, function (e) { alert(e.data.d) }) }(o) }, e.setToTranslate = function (t) { e.toTranslate = t }, e.setToLanguage = function (t) { e.toLanguage = t }; var f = function (n) { i.setLanguage(e.toLanguage), c(function () { angular.forEach(n.data.selectedFoods, function (e, t) { e.food = r.instant(e.food), e.unit = r.instant(e.unit) }), angular.forEach(n.data.selectedInitFoods, function (e, t) { e.food = r.instant(e.food), e.unit = r.instant(e.unit) }), t.hide(n), i.setLanguage("hr") }, 500) } }; e.save = function () { return 0 != i.currentMenu.data.selectedFoods.length && ("demo" == i.user.licenceStatus ? (l.demoAlert("the saving function is disabled in demo version"), !1) : void h()) }; var h = function () { i.client.clientData = i.clientData, o.show({ controller: y, templateUrl: "assets/partials/popup/savemenu.html", parent: angular.element(document.body), clickOutsideToClose: !0, d: { currentMenu: i.currentMenu, client: i.client, totals: i.totals, config: n.config, user: i.user } }).then(function (e) { i.currentMenu = e }, function () { }) }, y = function (e, t, a, o, r) { e.d = angular.copy(o); e.cancel = function () { t.cancel() }, e.confirm = function (s, c) { s.client = o.client, s.userId = o.client.userId, s.id = 1 == c ? null : s.id, s.energy = o.totals.energy, s.date = new Date((new Date).setHours(0, 0, 0, 0)), function (s) { if (l.isNullOrEmpty(s.title)) return document.getElementById("txtMenuTitle").focus(), l.alert(r.instant("enter menu title"), ""), h(), !1; s.diet = o.client.clientData.diet.diet; var c = null; s.data.meals.length > 2 && "B" != s.data.meals[0].code && (c = e.d.client.clientData.myMeals), a({ url: n.config.backend + "Menues.asmx/Save", method: "POST", data: { userId: i.user.userGroupId, x: s, user: e.d.user, myMeals: c } }).then(function (n) { "error" != n.data.d ? (e.d.currentMenu = JSON.parse(n.data.d), t.hide(e.d.currentMenu)) : l.alert(r.instant("there is already a menu with the same name"), "") }, function (e) { l.alert(r.instant(e.data.d), "") }) }(s) }; e.saveAppMenu = function (e) { e.energy = o.totals.energy, function (e) { if (l.isNullOrEmpty(e.title)) return document.getElementById("txtMenuTitle").focus(), l.alert(r.instant("enter menu title"), ""), h(), !1; e.diet = o.client.clientData.diet.diet, a({ url: n.config.backend + "Menues.asmx/SaveAppMenu", method: "POST", data: { x: e, lang: i.config.language } }).then(function (e) { l.alert("ok", "") }, function (e) { l.alert(r.instant(e.data.d), "") }) }(e) } }; e.send = function () { return 0 != i.currentMenu.data.selectedFoods.length && ("demo" == i.user.licenceStatus ? (l.demoAlert("this function is not available in demo version"), !1) : i.user.userType < 1 ? (l.demoAlert("this function is available only in standard and premium package"), !1) : void v()) }; var v = function () { i.client.clientData = i.clientData, o.show({ controller: S, templateUrl: "assets/partials/popup/sendmenu.html", parent: angular.element(document.body), clickOutsideToClose: !0, d: { currentMenu: i.currentMenu, client: i.client, user: i.user } }).then(function (e) { }, function () { }) }, S = function (e, t, a, o, r, s) { e.d = angular.copy(o); e.cancel = function () { t.cancel() }, e.confirm = function (o) { !function (o) { e.titlealert = null, e.emailalert = null, s.isNullOrEmpty(o.currentMenu.title) ? e.titlealert = r.instant("menu title is required") : s.isNullOrEmpty(o.client.email) ? e.emailalert = r.instant("email is required") : (t.hide(), a({ url: n.config.backend + "Mail.asmx/SendMenu", method: "POST", data: { email: o.client.email, currentMenu: o.currentMenu, user: e.d.user, lang: i.config.language } }).then(function (e) { s.alert(e.data.d, "") }, function (e) { s.alert(r.instant(e.data.d), "") })) }(o) } }, w = function (e) { t({ url: n.config.backend + "Foods.asmx/GetTotals", method: "POST", data: { selectedFoods: e.data.selectedFoods, meals: e.data.meals } }).then(function (e) { i.totals = JSON.parse(e.data.d), i.totals.price.currency = i.config.currency, M() }, function (e) { alert(e.data.d) }) }, M = function () { if (void 0 === i.recommendations || void 0 === i.totals) return !1; e.mealsTotals = [], e.mealsMin = [], e.mealsMax = [], e.mealsTitles = [], angular.forEach(i.currentMenu.data.meals, function (t, n) { 1 == t.isSelected && angular.isDefined(i.totals) && angular.isDefined(i.totals.mealsTotal) && n < i.recommendations.mealsRecommendationEnergy.length && (e.mealsTotals.push(i.totals.mealsTotal.length > 0 ? i.totals.mealsTotal[n].energy.val.toFixed(1) : 0), void 0 !== i.recommendations && angular.isDefined(i.recommendations.mealsRecommendationEnergy) && (e.mealsMin.push(i.recommendations.mealsRecommendationEnergy[n].meal.energyMin), e.mealsMax.push(i.recommendations.mealsRecommendationEnergy[n].meal.energyMax)), e.mealsTitles.push(c.instant(i.getMealTitle(t)))) }), T(), k(), D(), b(), O(), P(), C(), x(); var t = i.totals, n = i.recommendations; i.servGraphData = r.createGraph([c.instant("cereals"), c.instant("vegetables"), c.instant("fruit"), c.instant("meat"), c.instant("milk"), c.instant("fats")], [[t.servings.cerealsServ, t.servings.vegetablesServ, t.servings.fruitServ, t.servings.meatServ, t.servings.milkServ, t.servings.fatsServ], [n.servings.cerealsServ, n.servings.vegetablesServ, n.servings.fruitServ, n.servings.meatServ, n.servings.milkServ, n.servings.fatsServ]], [c.instant("cereals"), c.instant("vegetables"), c.instant("fruit"), c.instant("meat"), c.instant("milk"), c.instant("fats")], ["#45b7cd", "#33cc33", "#33cc33"], { responsive: !0, maintainAspectRatio: !0, legend: { display: !0 }, scales: { xAxes: [{ display: !0, scaleLabel: { display: !1 }, ticks: { beginAtZero: !0 } }], yAxes: [{ display: !0, scaleLabel: { display: !1 }, ticks: { beginAtZero: !0 } }] } }, [{ label: c.instant("choosen"), borderWidth: 1, type: "bar", fill: !0 }, { label: c.instant("recommended"), borderWidth: 3, hoverBackgroundColor: "rgba(255,99,132,0.4)", hoverBorderColor: "rgba(255,99,132,1)", type: "line", fill: !0 }]), i.pieGraphData = r.createGraph([c.instant("carbohydrates"), c.instant("proteins"), c.instant("fats")], [t.carbohydratesPercentage, t.proteinsPercentage, t.fatsPercentage], [c.instant("carbohydrates") + " (%)", c.instant("proteins") + " (%)", c.instant("fats") + " (%)"], ["#45b7cd", "#ff6384", "#33cc33"], { responsive: !0, maintainAspectRatio: !0, legend: { display: !0 }, scales: { xAxes: [{ display: !1, scaleLabel: { display: !1 }, ticks: { beginAtZero: !0 } }], yAxes: [{ display: !1, scaleLabel: { display: !1 }, ticks: { beginAtZero: !0 } }] } }, []); var a = function (t) { return r.createGraph(e.mealsTitles, [e.mealsTotals, e.mealsMin, e.mealsMax], e.mealsTitles, ["#45b7cd", "#ff6384", "#33cc33"], { responsive: !0, maintainAspectRatio: !0, legend: { display: t }, scales: { xAxes: [{ display: !0, scaleLabel: { display: !0 }, ticks: { beginAtZero: !0 } }], yAxes: [{ display: !0, scaleLabel: { display: !0 }, ticks: { beginAtZero: !0, stepSize: 200 } }] } }, [{ label: c.instant("choosen") + " (" + c.instant("kcal") + ")", borderWidth: 1, type: "bar", fill: !0 }, { label: c.instant("recommended") + " " + c.instant("from") + " (" + c.instant("kcal") + ")", borderWidth: 3, hoverBackgroundColor: "rgba(255,99,132,0.4)", hoverBorderColor: "rgba(255,99,132,1)", type: "line", fill: !1 }, { label: c.instant("recommended") + " " + c.instant("to") + " (" + c.instant("kcal") + ")", borderWidth: 3, hoverBackgroundColor: "rgba(255,99,132,0.4)", hoverBorderColor: "rgba(255,99,132,1)", type: "line", fill: !1 }]) }; i.mealsGraphData_menu = a(!1), i.mealsGraphData_analysis = a(!0), e.parametersGraphDataOther = r.stackedChart([c.instant("choosen")], [[t.starch, t.totalSugar, t.glucose, t.fructose, t.saccharose, t.maltose, t.lactose]], [c.instant("starch") + " (" + c.instant("g") + ")", c.instant("total sugar") + " (" + c.instant("g") + ")", c.instant("glucose") + " (" + c.instant("g") + ")", c.instant("fructose") + " (" + c.instant("g") + ")", c.instant("saccharose") + " (" + c.instant("g") + ")", c.instant("maltose") + " (" + c.instant("g") + ")", c.instant("lactose") + " (" + c.instant("g") + ")"], ["#33cc33"], ""), e.parametersGraphData = r.stackedChart([c.instant("choosen"), c.instant("recommended dietary allowance") + " (" + c.instant("rda").toUpperCase() + ")"], [[t.fibers, t.monounsaturatedFats, t.polyunsaturatedFats, t.calcium, t.magnesium, t.phosphorus, t.iron, t.copper, t.zinc, t.manganese, t.selenium, t.iodine, t.retinol, t.vitaminD, t.vitaminE, t.vitaminB1, t.vitaminB2, t.vitaminB3, t.vitaminB6, t.vitaminB12, t.folate, t.pantothenicAcid, t.biotin, t.vitaminC, t.vitaminK], [n.fibers.rda, n.monounsaturatedFats.rda, n.polyunsaturatedFats.rda, n.calcium.rda, n.magnesium.rda, n.phosphorus.rda, n.iron.rda, n.copper.rda, n.zinc.rda, n.manganese.rda, n.selenium.rda, n.iodine.rda, n.retinol.rda, n.vitaminD.rda, n.vitaminE.rda, n.vitaminB1.rda, n.vitaminB2.rda, n.vitaminB3.rda, n.vitaminB6.rda, n.vitaminB12.rda, n.folate.rda, n.pantothenicAcid.rda, n.biotin.rda, n.vitaminC.rda, n.vitaminK.rda]], [c.instant("fibers") + " (" + c.instant("g") + ")", c.instant("monounsaturated fats") + " (" + c.instant("g") + ")", c.instant("polyunsaturated fats") + " (" + c.instant("g") + ")", c.instant("calcium") + " (" + c.instant("mg") + ")", c.instant("magnesium") + " (" + c.instant("mg") + ")", c.instant("phosphorus") + " (" + c.instant("mg") + ")", c.instant("iron") + " (" + c.instant("mg") + ")", c.instant("copper") + " (" + c.instant("mg") + ")", c.instant("zinc") + " (" + c.instant("mg") + ")", c.instant("manganese") + " (" + c.instant("mg") + ")", c.instant("selenium") + " (" + c.instant("ug") + ")", c.instant("iodine") + " (" + c.instant("ug") + ")", c.instant("retinol") + " (" + c.instant("ug") + ")", c.instant("vitamin D") + " (" + c.instant("ug") + ")", c.instant("vitamin E") + " (" + c.instant("mg") + ")", c.instant("vitamin B1") + " (" + c.instant("mg") + ")", c.instant("vitamin B2") + " (" + c.instant("mg") + ")", c.instant("vitamin B3") + " (" + c.instant("mg") + ")", c.instant("vitamin B6") + " (" + c.instant("mg") + ")", c.instant("vitamin B12") + " (" + c.instant("ug") + ")", c.instant("folate") + " (" + c.instant("ug") + ")", c.instant("pantothenic acid") + " (" + c.instant("mg") + ")", c.instant("biotin") + " (" + c.instant("ug") + ")", c.instant("vitamin C") + " (" + c.instant("mg") + ")", c.instant("vitamin K") + " (" + c.instant("ug") + ")"], ["#45b7cd", "#33cc33"], c.instant("parameters")), e.parametersGraphDataUI = r.stackedChart([c.instant("choosen"), c.instant("upper intake level") + " (" + c.instant("ul").toUpperCase() + ")"], [[t.saturatedFats, t.trifluoroaceticAcid, t.cholesterol], [n.saturatedFats.ui, n.trifluoroaceticAcid.ui, n.cholesterol.ui]], [c.instant("saturated fats") + " (" + c.instant("g") + ")", c.instant("trifluoroacetic acid") + " (" + c.instant("g") + ")", c.instant("cholesterol") + " (" + c.instant("mg") + ")"], ["#f44242", "#33cc33"], ""), e.parametersGraphDataMDA = r.stackedChart([c.instant("choosen"), c.instant("upper intake level") + " (" + c.instant("ul").toUpperCase() + ")", c.instant("minimum dietary allowance") + " (" + c.instant("mda").toUpperCase() + ")"], [[t.sodium, t.potassium, t.chlorine], [n.sodium.ui], [n.sodium.mda, n.potassium.mda, n.chlorine.mda]], [c.instant("sodium") + " (" + c.instant("mg") + ")", c.instant("potassium") + " (" + c.instant("mg") + ")", c.instant("chlorine") + " (" + c.instant("mg") + ")"], ["#45b7cd", "#33cc33"], "") }, T = function () { var t = parseInt(i.recommendations.energy), n = i.totals.energy.toFixed(0), a = { title: "energy", min: 0, max: t + .06 * t, greenFrom: t - .02 * t, greenTo: t + .02 * t, yellowFrom: t + .02 * t, yellowTo: t + .04 * t, redFrom: t + .04 * t, redTo: t + .06 * t, minorTicks: 5 }; google.charts.load("current", { packages: ["gauge"] }), google.charts.setOnLoadCallback(r.guageChart("energyChart", n, "kcal", a)), e.isEnergyOk = function () { return n < t - .02 * t ? "fa fa-minus" : n >= t - .02 * t && n <= t + .04 * t ? "fa fa-check" : n > t + .04 * t ? "fa fa-exclamation" : void 0 } }, k = function () { var t = i.recommendations.servings.otherFoodsEnergy, n = i.totals.servings.otherFoodsEnergy.toFixed(0), a = { title: "energy", min: 0, max: t + .5 * t, greenFrom: 0, greenTo: t - .02 * t, yellowFrom: t - .02 * t, yellowTo: t, redFrom: t, redTo: t + .5 * t, minorTicks: 5 }; google.charts.load("current", { packages: ["gauge"] }), google.charts.setOnLoadCallback(r.guageChart("otherFoodChart", n, "kcal", a)), e.isOtherFoodOk = function () { return n < t ? "label label-success fa fa-check" : "label label-danger fa fa-exclamation" } }, D = function () { var t = { from: i.recommendations.carbohydratesPercentageMin, to: i.recommendations.carbohydratesPercentageMax }, n = i.totals.carbohydratesPercentage.toFixed(0), a = { title: "carbohidrates", min: 0, max: 100, greenFrom: t.from, greenTo: t.to - .02 * t.to, yellowFrom: t.to - .02 * t.to, yellowTo: t.to, redFrom: t.to, redTo: 100, minorTicks: 5 }; google.charts.load("current", { packages: ["gauge"] }), google.charts.setOnLoadCallback(r.guageChart("carbohydratesChart", n, "%", a)), e.isCarbohydratesOk = function () { return n < t.from ? "fa fa-minus" : n >= t.from && n <= t.to ? "fa fa-check" : n > t.to ? "fa fa-plus" : void 0 } }, b = function () { var t = { from: i.recommendations.proteinsPercentageMin, to: i.recommendations.proteinsPercentageMax }, n = i.totals.proteinsPercentage.toFixed(0), a = { title: "proteins", min: 0, max: 100, greenFrom: t.from, greenTo: t.to - .02 * t.to, yellowFrom: t.to - .02 * t.to, yellowTo: t.to, redFrom: t.to, redTo: 100, minorTicks: 5 }; google.charts.load("current", { packages: ["gauge"] }), google.charts.setOnLoadCallback(r.guageChart("proteinsChart", n, "%", a)), e.isProteinsOk = function () { return n < t.from ? "fa fa-minus" : n >= t.from && n <= t.to ? "fa fa-check" : n > t.to ? "fa fa-plus" : void 0 } }, x = function () { var t = { from: i.recommendations.fatsPercentageMin, to: i.recommendations.fatsPercentageMax }, n = i.totals.fatsPercentage.toFixed(0), a = { title: "fats", min: 0, max: 100, greenFrom: t.from, greenTo: t.to - .02 * t.to, yellowFrom: t.to - .02 * t.to, yellowTo: t.to, redFrom: t.to, redTo: 100, minorTicks: 5 }; google.charts.load("current", { packages: ["gauge"] }), google.charts.setOnLoadCallback(r.guageChart("fatsChart", n, "%", a)), e.isFatsOk = function () { return n < t.from ? "fa fa-minus" : n >= t.from && n <= t.to ? "fa fa-check" : n > t.to ? "fa fa-plus" : void 0 } }, O = function () { var e = i.totals.saturatedFats; unit = "mg"; var t = { title: "saturated fats", min: 0, max: Math.round(i.recommendations.saturatedFats.ui + .4 * i.recommendations.saturatedFats.ui), greenFrom: 0, greenTo: i.recommendations.saturatedFats.ui - .2 * i.recommendations.saturatedFats.ui, yellowFrom: i.recommendations.saturatedFats.ui - .2 * i.recommendations.saturatedFats.ui, yellowTo: i.recommendations.saturatedFats.ui, redFrom: i.recommendations.saturatedFats.ui, redTo: i.recommendations.saturatedFats.ui + .4 * i.recommendations.saturatedFats.ui, minorTicks: 5 }; r.guageChart("saturatedFatsChart", e, unit, t) }, P = function () { var e = i.totals.trifluoroaceticAcid; unit = "mg"; var t = { title: "trifluoroacetic acid", min: 0, max: Math.round(i.recommendations.trifluoroaceticAcid.ui + .4 * i.recommendations.trifluoroaceticAcid.ui), greenFrom: 0, greenTo: i.recommendations.trifluoroaceticAcid.ui - .2 * i.recommendations.trifluoroaceticAcid.ui, yellowFrom: i.recommendations.trifluoroaceticAcid.ui - .2 * i.recommendations.trifluoroaceticAcid.ui, yellowTo: i.recommendations.trifluoroaceticAcid.ui, redFrom: i.recommendations.trifluoroaceticAcid.ui, redTo: i.recommendations.trifluoroaceticAcid.ui + .4 * i.recommendations.trifluoroaceticAcid.ui, minorTicks: 5 }; r.guageChart("trifluoroaceticAcidChart", e, unit, t) }, C = function () { var e = i.totals.cholesterol; unit = "mg"; var t = { title: "cholesterol", min: 0, max: Math.round(i.recommendations.cholesterol.ui + .4 * i.recommendations.cholesterol.ui), greenFrom: 0, greenTo: i.recommendations.cholesterol.ui - .2 * i.recommendations.cholesterol.ui, yellowFrom: i.recommendations.cholesterol.ui - .2 * i.recommendations.cholesterol.ui, yellowTo: i.recommendations.cholesterol.ui, redFrom: i.recommendations.cholesterol.ui, redTo: i.recommendations.cholesterol.ui + .4 * i.recommendations.cholesterol.ui, minorTicks: 5 }; r.guageChart("cholesterolChart", e, unit, t) }; e.moveUp = function (e) { var t = e; if (e > 0) { angular.forEach(i.currentMenu.data.selectedFoods, function (n, a) { n.meal.code == i.currentMeal && a < e && (t = a + 1) }); var n = i.currentMenu.data.selectedFoods[t - 1]; i.currentMenu.data.selectedFoods[t - 1] = i.currentMenu.data.selectedFoods[e], i.currentMenu.data.selectedFoods[e] = n; var a = i.currentMenu.data.selectedInitFoods[t - 1]; i.currentMenu.data.selectedInitFoods[t - 1] = i.currentMenu.data.selectedInitFoods[e], i.currentMenu.data.selectedInitFoods[e] = a } }, e.moveDown = function (e) { var t = e; if (e < i.currentMenu.data.selectedFoods.length - 1) { var n = !0; angular.forEach(i.currentMenu.data.selectedFoods, function (a, o) { a.meal.code == i.currentMeal && 1 == n && o > e && o > 0 && (t = o - 1, n = !1) }); var a = i.currentMenu.data.selectedFoods[t + 1]; i.currentMenu.data.selectedFoods[t + 1] = i.currentMenu.data.selectedFoods[e], i.currentMenu.data.selectedFoods[e] = a; var o = i.currentMenu.data.selectedInitFoods[t + 1]; i.currentMenu.data.selectedInitFoods[t + 1] = i.currentMenu.data.selectedInitFoods[e], i.currentMenu.data.selectedInitFoods[e] = o } }, e.filterMeal = function (e) { return e.meal.code == i.currentMeal }, e.parameterStyle = function (e, t) { return !(!angular.isDefined(e) || !angular.isDefined(t)) && (null != t.mda && e < t.mda ? "background-color:#9bc1ff; color:white" : null != t.ui && e > t.ui ? "background-color:#f94040; color:white" : void 0) }, e.openRecipePopup = function () { F() }; var F = function () { if ("demo" == i.user.licenceStatus) return l.demoAlert("this function is not available in demo version"), !1; o.show({ controller: I, templateUrl: "assets/partials/popup/getrecipe.html", parent: angular.element(document.body), clickOutsideToClose: !0, clientData: i.clientData, config: i.config }).then(function (t) { angular.forEach(t.data.selectedFoods, function (n, a) { var o = i.currentMenu.data.selectedFoods.length; e.addFoodToMeal(n, t.data.selectedInitFoods[a], o) }), w(i.currentMenu) }, function () { }) }, I = function (e, t, a, o, r, s, l, c) { e.clientData = o, e.config = r, e.user = i.user, e.loadType = 0, e.type = 0, e.appRecipes = !1, e.toTranslate = !1, e.toLanguage = "", e.showDescription = !0, e.limit = 20, e.loadMore = function () { e.limit += 20 }; var d = function () { if ("demo" == i.user.licenceStatus) return !1; e.loading = !0, e.appRecipes = !1, a({ url: n.config.backend + "Recipes.asmx/Load", method: "POST", data: { userId: i.user.userGroupId } }).then(function (t) { e.appRecipes = !1, e.d = JSON.parse(t.data.d), e.loading = !1 }, function (t) { e.loading = !1, alert(t.data.d) }) }; d(); !function () { if ("demo" == i.user.licenceStatus) return !1; a({ url: n.config.backend + "Recipes.asmx/Init", method: "POST", data: "" }).then(function (t) { e.recipe = JSON.parse(t.data.d) }, function (e) { alert(e.data.d) }) }(), e.load = function () { d() }, e.cancel = function () { t.cancel() }, e.toggleMyRecipeTpl = function () { t.cancel(), i.newTpl = "./assets/partials/myrecipes.html", i.selectedNavItem = "myrecipes" }, e.get = function (e) { u(e) }; var u = function (o, r) { a({ url: n.config.backend + "Recipes.asmx/Get", method: "POST", data: { userId: i.user.userGroupId, id: o.id } }).then(function (n) { e.recipe = JSON.parse(n.data.d), 1 == r && angular.forEach(i.currentMenu.data.meals, function (t, n) { t.code == i.currentMeal && (t.description = "" == t.description ? e.recipe.title + ".\n" + e.recipe.description : t.description + "\n" + e.recipe.title + ".\n" + e.recipe.description) }), t.hide(e.recipe) }, function (e) { alert(e.data.d) }) }; e.loadAppRecipes = function () { e.appRecipes = !0, a({ url: n.config.backend + "Recipes.asmx/LoadAppRecipes", method: "POST", data: { lang: i.config.language } }).then(function (t) { e.d = JSON.parse(t.data.d) }, function (e) { alert(e.data.d) }) }; e.confirm = function (o, r) { 1 == e.appRecipes ? function (o, r) { a({ url: n.config.backend + "Recipes.asmx/GetAppRecipe", method: "POST", data: { id: o.id, lang: i.config.language, toTranslate: e.toTranslate } }).then(function (n) { e.recipe = JSON.parse(n.data.d), 1 == r && angular.forEach(i.currentMenu.data.meals, function (t, n) { t.code == i.currentMeal && (t.description = "" == t.description ? e.recipe.description : t.description + "\n" + e.recipe.description) }), t.hide(e.recipe) }, function (e) { alert(e.data.d) }) }(o, r) : u(o, r) }, e.setToTranslate = function (t) { e.toTranslate = t }, e.setToLanguage = function (t) { e.toLanguage = t } }, E = function (e) { t({ url: n.config.backend + "WeeklyMenus.asmx/GetWeeklyMenusTotals", method: "POST", data: { userId: n.usergroupid, menuList: e } }).then(function (e) { i.totals = JSON.parse(e.data.d), i.totals.price.currency = i.config.currency, M() }, function (e) { alert(e.data.d) }) }; e.getWeeklyMenuTotals = function (e) { return E(e) }, e.toggleMenu = function (t) { e.loading = !0, s(function () { e.loading = !1, i.menuTpl = t, "dailyMenuTpl" == t && w(i.currentMenu) }, 700) }, "weeklyMenuTpl" !== i.menuTpl && (i.menuTpl = "dailyMenuTpl"); e.pdfLink, e.creatingPdf1 = !1, e.printMenuDetailsPdf = function () { "dailyMenuTpl" == i.menuTpl ? function () { if (0 == i.currentMenu.data.selectedFoods.length) return l.alert(c.instant("menu is empty") + "!", ""), !1; if (e.creatingPdf1 = !0, angular.isDefined(i.currentMenu)) { var a = angular.copy(i.currentMenu); t({ url: n.config.backend + "PrintPdf.asmx/MenuDetailsPdf", method: "POST", data: { userId: n.usergroupid, currentMenu: a, calculation: i.calculation, totals: i.totals, recommendations: i.recommendations, lang: i.config.language } }).then(function (t) { var a = t.data.d; e.creatingPdf1 = !1, e.pdfLink = n.config.backend + "upload/users/" + i.user.userGroupId + "/pdf/" + a + ".pdf" }, function (t) { e.creatingPdf1 = !1, alert(t.data.d) }) } }() : function () { if (e.creatingPdf1 = !0, angular.isDefined(i.currentMenu)) { var a = angular.copy(i.currentMenu); a.title = i.weeklyMenu.title, a.note = i.weeklyMenu.note, a.diet = i.weeklyMenu.diet.diet, t({ url: n.config.backend + "PrintPdf.asmx/MenuDetailsPdf", method: "POST", data: { userId: n.usergroupid, currentMenu: a, calculation: i.calculation, totals: i.totals, recommendations: i.recommendations, lang: i.config.language } }).then(function (t) { var a = t.data.d; e.creatingPdf1 = !1, e.pdfLink = n.config.backend + "upload/users/" + i.user.userGroupId + "/pdf/" + a + ".pdf" }, function (t) { e.creatingPdf1 = !1, alert(t.data.d) }) } }() }, e.hidePdfLink = function () { e.pdfLink = null }, e.saveRecipeFromMenu = function (e, t) { if (0 == e.selectedFoods.length) return !1; i.newTpl = "./assets/partials/myrecipes.html", i.selectedNavItem = "myrecipes", i.recipeData = e, i.currentMealForRecipe = t }, e.getMealTotal = function (e) { var t = null; return angular.forEach(i.totals.mealsTotal, function (n, a) { n.code == e && (t = n) }), t }, e.getMealRecommendation = function (e) { var t = null; return angular.forEach(i.recommendations.mealsRecommendationEnergy, function (n, a) { n.meal.code == e && (t = n.meal) }), t }, e.toggleParamTpl = function (t) { e.parametersTpl = t }, e.toggleParamTpl("parametersChartTpl"), e.checkTotal = function (e, t, n) { var a = "pull-right fa fa-"; return e > n ? a + "chevron-circle-right text-danger" : e < t ? a + "chevron-circle-left text-info" : a + "check-circle text-success" }, e.checkEnergy = function (e, t) { var n = "pull-right fa fa-"; return e / t - 1 > .05 ? n + "chevron-circle-right text-danger" : e / t - 1 < -.05 ? n + "chevron-circle-left text-info" : n + "check-circle text-success" }, e.checkServ = function (e, t) { var n = "pull-right fa fa-"; return e - t > 1 ? n + "chevron-circle-right text-danger" : e - t < -1 ? n + "chevron-circle-left text-info" : n + "check-circle text-success" }, e.checkOtherFoods = function (e, t) { var n = "pull-right fa fa-"; return e > t ? n + "chevron-circle-right text-danger" : n + "check-circle text-success" }, e.shoppingList = [], e.getShoppingList = function (e) { return "demo" == i.user.licenceStatus ? (l.demoAlert("this function is not available in demo version"), !1) : i.user.userType < 2 || "demo" == i.user.licenceStatus ? (l.demoAlert("this function is available only in premium package"), !1) : void N(e) }; var N = function (e) { if (0 == i.currentMenu.data.selectedFoods.length) return !1; o.show({ controller: L, templateUrl: "assets/partials/popup/shoppinglist.html", parent: angular.element(document.body), clickOutsideToClose: !0, d: { currentMenu: e, settings: i.printSettings } }).then(function (e) { alert(e) }, function () { }) }, L = function (e, t, a, i, o, r, s) { e.currentMenu = o.currentMenu, e.settings = o.settings, e.consumers = 1, e.pdfLink, e.creatingPdf1 = !1; var c = function (a, o) { i({ url: n.config.backend + "ShoppingList.asmx/Create", method: "POST", data: { x: a, consumers: o, lang: t.config.language } }).then(function (t) { e.d = JSON.parse(t.data.d), e.d.total && e.d.total.price > 0 && (e.settings.showPrice = !0) }, function (e) { l.alert(r.instant(e.data.d), "") }) }; c(e.currentMenu.data.selectedFoods, e.consumers), e.changeNumberOfConsumers = function (t) { if (t < 1 || l.isNullOrEmpty(t)) return !1; c(e.currentMenu.data.selectedFoods, t) }, e.copyToClipboard = function (e) { return l.copyToClipboard(e) }, e.printShoppingListPdf = function (a, o, r) { e.creatingPdf1 = !0, angular.isDefined(e.currentMenu) && i({ url: n.config.backend + "PrintPdf.asmx/ShoppingList", method: "POST", data: { userId: n.usergroupid, shoppingList: a, currentMenu: e.currentMenu, consumers: o, lang: t.config.language, settings: r } }).then(function (a) { var i = a.data.d; e.creatingPdf1 = !1, e.pdfLink = n.config.backend + "upload/users/" + t.user.userGroupId + "/pdf/" + i + ".pdf" }, function (t) { e.creatingPdf1 = !1, alert(t.data.d) }) }, e.hidePdfLink = function () { e.pdfLink = null }, e.cancel = function () { a.cancel() } }; e.openPrintPdfPopup = function () { openPrintPdfPopup() } }]).controller("myFoodsCtrl", ["$scope", "$http", "$sessionStorage", "$window", "$rootScope", "$mdDialog", "functions", "$translate", function (e, t, n, a, i, o, r, s) { var l = function () { t({ url: n.config.backend + "Foods.asmx/Init", method: "POST", data: { lang: i.config.language } }).then(function (t) { var n = JSON.parse(t.data.d); void 0 !== i.myFood_ && null != i.myFood_ ? (e.myFood = i.myFood_, i.myFood_ = null) : e.myFood = n.food, e.units = n.units, e.mainFoodGroups = n.foodGroups, $(".selectpicker").selectpicker({ style: "btn-default", size: 4 }) }, function (e) { alert(e.data.d) }) }; l(), e.new = function () { l() }, e.remove = function (e) { var t = o.confirm().title(s.instant("delete food") + "?").textContent(e.food).targetEvent(e).ok(s.instant("yes")).cancel(s.instant("no")); o.show(t).then(function () { c(e) }, function () { }) }; var c = function (e) { t({ url: n.config.backend + "MyFoods.asmx/Delete", method: "POST", data: { userId: i.user.userGroupId, id: e.id } }).then(function (e) { d(), l() }, function (e) { r.alert(s.instant(e.data.d), "") }) }, d = function () { t({ url: n.config.backend + "MyFoods.asmx/Load", method: "POST", data: { userId: n.usergroupid } }).then(function (e) { var t = JSON.parse(e.data.d); i.myFoods = t.foods }, function (e) { r.alert(s.instant(e.data.d), "") }) }; e.save = function (e) { return "demo" == i.user.licenceStatus ? (r.demoAlert("this function is not available in demo version"), !1) : r.isNullOrEmpty(e.food) ? (r.alert(s.instant("food title is required"), ""), !1) : r.isNullOrEmpty(e.unit) ? (r.alert(s.instant("choose unit"), ""), !1) : (1 == u(e) && (e.servings.cerealsServ = 0, e.servings.vegetablesServ = 0, e.servings.fruitServ = 0, e.servings.meatServ = 0, e.servings.milkServ = 0, e.servings.fatsServ = 0, e.servings.otherFoodsServ = 1, e.servings.otherFoodsEnergy = e.energy, e.foodGroup.code = "OF"), void t({ url: n.config.backend + "MyFoods.asmx/Save", method: "POST", data: { userId: i.user.userGroupId, x: e } }).then(function (e) { "there is already a food with the same name" != e.data.d ? (r.alert(s.instant(e.data.d), ""), d()) : r.alert(s.instant("there is already a food with the same name"), "") }, function (e) { r.alert(s.instant(e.data.d), "") })) }; var u = e=>!(e.servings.cerealsServ > 0 || e.servings.vegetablesServ > 0 || e.servings.fruitServ > 0 || e.servings.meatServ > 0 || e.servings.milkServ > 0 || e.servings.fatsServ > 0) || (e.servings.otherFoodsServ = 0, e.servings.otherFoodsEnergy = 0, !1); e.search = function () { f() }; var f = function () { if ("demo" == i.user.licenceStatus) return !1; o.show({ controller: m, templateUrl: "assets/partials/popup/myfoods.html", parent: angular.element(document.body), clickOutsideToClose: !0 }).then(function (t) { e.myFood = t }, function () { }) }, m = function (e, t, a) { e.limit = 20, e.loadMore = function () { e.limit += 20 }; e.loading = !0, a({ url: n.config.backend + "MyFoods.asmx/Load", method: "POST", data: { userId: n.usergroupid } }).then(function (t) { var n = JSON.parse(t.data.d); e.d = n.foods, e.loading = !1 }, function (t) { e.loading = !1, alert(t.data.d) }), e.cancel = function () { t.cancel() }; e.confirm = function (e) { !function (e) { a({ url: n.config.backend + "MyFoods.asmx/Get", method: "POST", data: { userId: i.user.userGroupId, id: e.id } }).then(function (e) { var n = JSON.parse(e.data.d); t.hide(n) }, function (e) { alert(e.data.d) }) }(e) }, e.remove = function (e) { var n = t.confirm().title(s.instant("delete food") + "?").textContent(e.food).targetEvent(e).ok(s.instant("yes")).cancel(s.instant("no")); t.show(n).then(function () { o(e), f() }, function () { f() }) }; var o = function (e) { a({ url: n.config.backend + "MyFoods.asmx/Delete", method: "POST", data: { userId: i.user.userGroupId, id: e.id } }).then(function (e) { d(), l() }, function (e) { r.alert(s.instant(e.data.d), "") }) } } }]).controller("myRecipesCtrl", ["$scope", "$http", "$sessionStorage", "$window", "$rootScope", "$mdDialog", "functions", "$translate", function (e, t, n, a, i, o, r, s) { e.addFoodBtnIcon = "fa fa-plus", e.addFoodBtn = !1; var l = function () { t({ url: n.config.backend + "Recipes.asmx/Init", method: "POST", data: "" }).then(function (t) { e.recipe = JSON.parse(t.data.d), e.currentRecipe = null, d(), c() }, function (e) { alert(e.data.d) }) }, c = function () { if ("demo" == i.user.licenceStatus) return !1; i.loading = !0, t({ url: n.config.backend + "Recipes.asmx/Load", method: "POST", data: { userId: n.usergroupid } }).then(function (t) { e.recipes = JSON.parse(t.data.d), i.loading = !1 }, function (e) { i.loading = !1, alert(e.data.d) }) }, d = function () { angular.isDefined(i.recipeData) && null != i.recipeData && angular.isDefined(i.recipeData.selectedFoods) && (angular.forEach(i.recipeData.selectedFoods, function (t, n) { t.meal.code == i.currentMealForRecipe && (e.recipe.data.selectedFoods.push(t), e.recipe.data.selectedInitFoods.push(i.recipeData.selectedFoods[n])) }), angular.forEach(i.recipeData.meals, function (t, n) { t.code == i.currentMealForRecipe && (e.recipe.description = t.description) })) }; l(), e.add = function (t) { e.recipe.push(t) }, e.getTotEnergy = function (e) { var t = 0; return angular.forEach(e, function (e, n) { t += e.energy }), t }, e.openFoodPopup = function (t, n) { e.addFoodBtn = !0, e.addFoodBtnIcon = "fa fa-spinner fa-spin", o.show({ controller: i.foodPopupCtrl, templateUrl: "assets/partials/popup/food.html", parent: angular.element(document.body), clickOutsideToClose: !0, d: { foods: i.foods, myFoods: i.myFoods, foodGroups: i.foodGroups, food: t, idx: n, config: i.config } }).then(function (t) { e.food = t, null == n ? (e.recipe.data.selectedFoods.push(t.food), e.recipe.data.selectedInitFoods.push(t.initFood)) : (e.recipe.data.selectedFoods[n] = t.food, e.recipe.data.selectedInitFoods[n] = t.initFood), e.addFoodBtnIcon = "fa fa-plus", e.addFoodBtn = !1 }, function () { e.addFoodBtnIcon = "fa fa-plus", e.addFoodBtn = !1 }) }, e.new = function () { i.recipeData = null, l() }, e.get = function (a) { if (null == a) return !1; t({ url: n.config.backend + "Recipes.asmx/Get", method: "POST", data: { userId: n.usergroupid, id: a } }).then(function (t) { e.recipe = JSON.parse(t.data.d) }, function (e) { alert(e.data.d) }) }, e.save = function (a) { return "demo" == i.user.licenceStatus ? (r.demoAlert("the saving function is disabled in demo version"), !1) : "" == a.title || null == a.title ? (r.alert(s.instant("enter recipe title"), ""), !1) : 0 == a.data.selectedFoods.length ? (r.alert(s.instant("choose food"), ""), !1) : void t({ url: n.config.backend + "Recipes.asmx/Save", method: "POST", data: { userId: n.usergroupid, x: a } }).then(function (t) { "there is already a recipe with the same name" != t.data.d ? (e.recipe = JSON.parse(t.data.d), c()) : r.alert(s.instant("there is already a recipe with the same name"), "") }, function (e) { alert(e.data.d) }) }, e.removeFood = function (t) { var n = o.confirm().title(s.instant("delete food") + "?").textContent().targetEvent().ok(s.instant("yes")).cancel(s.instant("no")); o.show(n).then(function () { e.recipe.data.selectedFoods.splice(t, 1), e.recipe.data.selectedInitFoods.splice(t, 1) }, function () { }) }, e.remove = function (e) { var t = o.confirm().title(s.instant("delete recipe") + "?").textContent().targetEvent().ok(s.instant("yes")).cancel(s.instant("no")); o.show(t).then(function () { u(e) }, function () { }) }; var u = function (e) { t({ url: n.config.backend + "Recipes.asmx/Delete", method: "POST", data: { userId: i.user.userGroupId, id: e.id } }).then(function (e) { l() }, function (e) { alert(e.data.d) }) }; e.search = function () { f() }; var f = function () { if ("demo" == i.user.licenceStatus) return !1; o.show({ controller: m, templateUrl: "assets/partials/popup/myrecipes.html", parent: angular.element(document.body), clickOutsideToClose: !0 }).then(function (t) { e.recipe = t }, function () { }) }, m = function (e, t, a) { e.limit = 20, e.loadMore = function () { e.limit += 20 }; !function () { if ("demo" == i.user.licenceStatus) return !1; e.loading = !0, a({ url: n.config.backend + "Recipes.asmx/Load", method: "POST", data: { userId: i.user.userGroupId } }).then(function (t) { e.d = JSON.parse(t.data.d), e.loading = !1 }, function (t) { e.loading = !1, alert(t.data.d) }) }(); var o = function () { if ("demo" == i.user.licenceStatus) return !1; a({ url: n.config.backend + "Recipes.asmx/Init", method: "POST", data: "" }).then(function (t) { e.recipe = JSON.parse(t.data.d) }, function (e) { alert(e.data.d) }) }; o(), e.cancel = function () { t.cancel() }; e.confirm = function (o) { !function (o) { a({ url: n.config.backend + "Recipes.asmx/Get", method: "POST", data: { userId: i.user.userGroupId, id: o.id } }).then(function (n) { e.recipe = JSON.parse(n.data.d), t.hide(e.recipe) }, function (e) { alert(e.data.d) }) }(o) }, e.remove = function (e) { var n = t.confirm().title(s.instant("delete recipe") + "?").textContent(e.title).targetEvent(e).ok(s.instant("yes")).cancel(s.instant("no")); t.show(n).then(function () { r(e), f() }, function () { f() }) }; var r = function (e) { a({ url: n.config.backend + "Recipes.asmx/Delete", method: "POST", data: { userId: i.user.userGroupId, id: e.id } }).then(function (e) { o() }, function (e) { alert(e.data.d) }) } }; e.saveRecipeAsMyFood = function (e) { if (0 == e.data.selectedFoods.length) return r.alert(s.instant("choose food"), ""), !1; g(e) }; var g = function (t) { o.show({ controller: p, templateUrl: "assets/partials/popup/saverecipeasmyfood.html", parent: angular.element(document.body), clickOutsideToClose: !0, data: t }).then(function (t) { e.recipe = t }, function () { }) }, p = function (e, t, a, i, o, r) { e.d = { recipe: i, units: [], unit: null, titleAlert: !1, unitAlert: !1 }; a({ url: n.config.backend + "Foods.asmx/Init", method: "POST", data: { lang: r.config.language } }).then(function (t) { var n = JSON.parse(t.data.d); e.d.units = n.units }, function (e) { alert(e.data.d) }), e.cancel = function () { t.cancel() }, e.confirm = function (t) { if ("demo" == r.user.licenceStatus) return o.demoAlert("the saving function is disabled in demo version"), !1; o.isNullOrEmpty(t.recipe.title) ? e.d.titleAlert = !0 : o.isNullOrEmpty(t.unit) ? e.d.unitAlert = !0 : l(t) }; var l = function (e) { a({ url: n.config.backend + "Recipes.asmx/SaveAsFood", method: "POST", data: { userId: r.user.userGroupId, recipe: e.recipe, unit: e.unit } }).then(function (n) { c(), t.hide(e.recipe), o.alert(s.instant(n.data.d), "") }, function (e) { o.alert(s.instant(e.data.d), "") }) }, c = function () { a({ url: n.config.backend + "MyFoods.asmx/Load", method: "POST", data: { userId: r.user.userGroupId } }).then(function (e) { var t = JSON.parse(e.data.d); r.myFoods = t.foods }, function (e) { o.alert(s.instant(e.data.d), "") }) } } }]).controller("pricesCtrl", ["$scope", "$http", "$sessionStorage", "$rootScope", "$translate", "functions", "$mdDialog", function (e, t, n, a, i, o, r) { e.foodListType = 0, e.getFoodList = function (t) { e.foodList = 0 == t ? a.foods : a.myFoods }, e.getFoodList(e.foodListType); t({ url: n.config.backend + "Prices.asmx/Init", method: "POST", data: "" }).then(function (t) { e.price = JSON.parse(t.data.d), e.price.netPrice.currency = n.config.currency, s() }, function (e) { o.alert(i.instant(e.data.d), "") }); var s = function () { t({ url: n.config.backend + "Prices.asmx/Load", method: "POST", data: { userId: a.user.userGroupId } }).then(function (t) { e.prices = JSON.parse(t.data.d) }, function (e) { o.alert(i.instant(e.data.d), "") }) }; e.selectFood = function (t) { var n = JSON.parse(t); e.price.food.id = n.id, e.price.food.title = n.food, e.calculateUnitPrice(t) }, e.calculateUnitPrice = function (e) { angular.isObject(e) && (e.unitPrice.value = e.netPrice.value * (1 / e.mass.value) * 1e3) }, e.save = function (e) { return null != e.food.title && ("demo" == a.user.licenceStatus ? (o.demoAlert("this function is not available in demo version"), !1) : void t({ url: n.config.backend + "Prices.asmx/Save", method: "POST", data: { userId: a.user.userGroupId, x: e } }).then(function (e) { s(), o.alert(i.instant(e.data.d), "") }, function (e) { o.alert(i.instant(e.data.d), "") })) }, e.remove = function (e) { var t = r.confirm().title(i.instant("delete input") + "?").textContent().targetEvent().ok(i.instant("yes")).cancel(i.instant("no")); r.show(t).then(function () { l(e) }, function () { }) }; var l = function (e) { t({ url: n.config.backend + "Prices.asmx/Delete", method: "POST", data: { userId: a.user.userGroupId, x: e } }).then(function (e) { s() }, function (e) { o.alert(i.instant(e.data.d), "") }) } }]).controller("orderCtrl", ["$scope", "$http", "$rootScope", "$translate", "functions", function (e, t, n, a, i) { e.application = a.instant("nutrition program"), e.version = "STANDARD", e.userType = 1, e.showAlert = !1, e.sendicon = "fa fa-angle-double-right", e.sendicontitle = a.instant("send order"), e.showUserDetails = "" == n.user.userName, e.showErrorAlert = !1, e.showPaymentDetails = !1, e.login = function (i, o) { t({ url: n.config.backend + "Users.asmx/Login", method: "POST", data: { userName: i, password: o } }).then(function (t) { var n = JSON.parse(t.data.d); null != n.userId ? (e.user.firstName = n.firstName, e.user.lastName = n.lastName, e.user.companyName = n.companyName, e.user.address = n.address, e.user.postalCode = n.postalCode, e.user.city = n.city, e.user.country = n.country, e.user.pin = n.pin, e.user.email = n.email, e.user.userType = n.userType, e.showUserDetails = !0, e.showErrorAlert = !1, e.calculatePrice()) : (e.showErrorAlert = !0, e.errorMesage = a.instant("wrong user name or password")) }, function (t) { e.errorLogin = !0, e.showErrorAlert = !0, e.errorMesage = a.instant("user was not found"), e.showUserDetails = !1 }) }; var o = function () { t({ url: n.config.backend + "Orders.asmx/Init", method: "POST", data: "" }).then(function (t) { e.user = JSON.parse(t.data.d), e.user.userName = n.user.userName, e.user.password = n.user.password, e.user.application = e.application, e.user.version = e.version, e.user.licence = 1, e.user.licenceNumber = 1, e.user.userType = e.userType, e.login(e.user.userName, e.user.password) }, function (e) { alert(e.data.d) }) }; e.changeUserType = function (t) { e.userType = t }; !function () { e.maxUsers = []; for (var t = 5; t < 101; t++) e.maxUsers.push(t) }(), e.premiumUsers = 5, e.setPremiumUsers = function (t) { e.premiumUsers = t, e.calculatePrice() }, e.calculatePrice = function () { var t, a = 0; e.user.version = e.version, 0 == e.user.userType && (a = n.config.packages[0].price, e.user.version = n.config.packages[0].title), 1 == e.user.userType && (a = n.config.packages[1].price, e.user.version = n.config.packages[1].title), 2 == e.user.userType && (a = n.config.packages[2].price, e.user.version = n.config.packages[2].title), e.user.licence > 1 && (a = a * e.user.licence - a * e.user.licence * (e.user.licence / 10)), e.user.licenceNumber = 1, t = e.user.licenceNumber > 1 ? a * e.user.licenceNumber - a * e.user.licenceNumber * .1 : a; var i = e.premiumUsers > 5 && 2 == e.user.userType ? 50 * (e.premiumUsers - 5) : 0; e.user.price = t + i, e.user.priceEur = (t + i) / n.config.eur }, null == n.config ? t.get("./config/config.json").then(function (e) { n.config = e.data, o() }) : o(), e.order = function (t, n) { o(), window.location.hash = "orderform", e.user.application = t, e.user.version = n, e.calculatePrice() }, e.setApplication = function (t) { e.user.application = t, e.calculatePrice() }, e.sendOrder = function (o) { return e.showErrorAlert = !1, "" == o.email || "" == o.firstName || "" == o.lastName || "" == o.address || "" == o.postalCode || "" == o.city || "" == o.country ? (e.showErrorAlert = !0, e.errorMesage = a.instant("all fields are required"), !1) : 1 != e.userType || "" != o.companyName && "" != o.pin ? (e.sendicon = "fa fa-spinner fa-spin", e.sendicontitle = a.instant("sending"), e.isSendButtonDisabled = !0, void t({ url: n.config.backend + "Orders.asmx/SendOrder", method: "POST", data: { x: o, lang: n.config.language } }).then(function (t) { "error" == t.data.d ? (e.showAlert = !1, e.showPaymentDetails = !1, e.sendicon = "fa fa-paper-plane-o", e.sendicontitle = a.instant("send"), e.isSendButtonDisabled = !1, i.alert(a.instant("order is not sent"), "")) : (e.showAlert = !0, e.showPaymentDetails = !0) }, function (t) { e.showAlert = !1, e.showPaymentDetails = !1, e.sendicon = "fa fa-paper-plane-o", e.isSendButtonDisabled = !1, e.sendicontitle = a.instant("send"), alert(t.data.d) })) : (e.showErrorAlert = !0, e.errorMesage = a.instant("all fields are required"), !1) }, e.registration = function () { window.location.hash = "registration" }, e.backToApp = function () { "expired" == n.user.licenceStatus ? n.currTpl = "./assets/partials/login.html" : n.currTpl = "./assets/partials/dashboard.html" } }]).controller("infoCtrl", ["$scope", "$rootScope", "$translate", function (e, t, n) { }]).controller("settingsCtrl", ["$scope", "$http", "$rootScope", "$translate", "$sessionStorage", "functions", function (e, t, n, a, i, o) { angular.isDefined(i.settings) && (n.settings = i.settings), e.save = function (e) { if ("demo" == n.user.licenceStatus) return o.demoAlert("the saving function is disabled in demo version"), !1; t({ url: i.config.backend + "Files.asmx/SaveJsonToFile", method: "POST", data: { foldername: "users/" + n.user.userGroupId, filename: "settings", json: JSON.stringify(e) } }).then(function (t) { n.config.language = e.language, n.config.currency = e.currency, o.alert(a.instant("settings saved successfully"), "") }, function (e) { o.alert(a.instant(e.data.d), "") }) } }]).controller("weeklyMenuCtrl", ["$scope", "$http", "$sessionStorage", "$window", "$rootScope", "$mdDialog", "functions", "$translate", function (e, t, n, a, i, o, r, s) { e.consumers = 1, e.getDay = function (e) { switch (e) { case 0: return s.instant("monday"); case 1: return s.instant("tuesday"); case 2: return s.instant("wednesday"); case 3: return s.instant("thursday"); case 4: return s.instant("friday"); case 5: return s.instant("saturday"); case 6: return s.instant("sunday"); default: return "" } }; var l = !0; e.isEmptyList = function () { var t; return t = e.weeklyMenu.menuList, l = !0, angular.forEach(t, function (e, t) { if (!r.isNullOrEmpty(e)) return l = !1, !1 }), l }; var c = function () { e.loading = !0, t({ url: n.config.backend + "WeeklyMenus.asmx/Init", method: "POST", data: { user: i.user, client: i.client, lang: i.config.language } }).then(function (t) { i.weeklyMenu = JSON.parse(t.data.d), e.loading = !1 }, function (t) { e.loading = !1, alert(t.data.d) }) }; angular.isDefined(i.weeklyMenu) || c(), e.new = function () { c() }, e.printWindow = function () { window.print() }, e.pdfLink = null, e.creatingPdf = !1, e.openPdf = function () { null != e.pdfLink && window.open(e.pdfLink, window.innerWidth <= 800 && window.innerHeight <= 600 ? "_self" : "_blank") }; e.loading = !0, t({ url: n.config.backend + "Menues.asmx/Load", method: "POST", data: { userId: i.user.userGroupId } }).then(function (t) { e.menus = JSON.parse(t.data.d), 0 == e.menus.length && r.alert(s.instant("first you need to create daily menus"), ""), e.loading = !1 }, function (t) { e.loading = !1, alert(t.data.d) }), e.creatingPdf = !1, e.pageSizes = ["A4", "A3", "A2", "A1"], i.printSettings.pageSize = "A3", i.printSettings.showTitle = !1, i.printSettings.showDescription = !1, i.printSettings.orientation = "L", e.printWeeklyMenu = function (a, o) { if (l) return r.alert(s.instant("select menus"), ""), !1; e.pdfLink = null, e.creatingPdf = !0, t({ url: n.config.backend + "PrintPdf.asmx/WeeklyMenuPdf", method: "POST", data: { userId: n.usergroupid, weeklyMenu: i.weeklyMenu, consumers: a, lang: i.config.language, settings: o } }).then(function (t) { var a = t.data.d; e.pdfLink = n.config.backend + "upload/users/" + i.user.userGroupId + "/pdf/" + a + ".pdf", e.creatingPdf = !1 }, function (t) { e.creatingPdf = !1, alert(t.data.d) }) }, e.hidePdfLink = function () { e.pdfLink = null }, e.search = function () { d() }; var d = function () { o.show({ controller: u, templateUrl: "assets/partials/popup/searchweeklymenus.html", parent: angular.element(document.body), clickOutsideToClose: !0, d: {} }).then(function (e) { i.weeklyMenu = e, i.weeklyMenu.client = i.client, i.weeklyMenu.diet = i.clientData.diet }, function () { }) }, u = function (e, t, a, o, r) { e.type = 0, e.limit = 20, e.loadMore = function () { e.limit += 20 }; var s = function () { e.loading = !0, a({ url: n.config.backend + "WeeklyMenus.asmx/Load", method: "POST", data: { userId: i.user.userGroupId, lang: i.config.language } }).then(function (t) { e.d = JSON.parse(t.data.d), e.loading = !1 }, function (t) { e.loading = !1, r.alert(t.data.d, "") }) }; s(), e.load = function () { s() }, e.remove = function (e) { if (l) return !1; var n = t.confirm().title(o.instant("remove menu") + "?").textContent(e.title).targetEvent(e).ok(o.instant("yes")).cancel(o.instant("no")); t.show(n).then(function () { c(e) }, function () { }) }; var c = function (t) { a({ url: n.config.backend + "WeeklyMenus.asmx/Delete", method: "POST", data: { userId: i.user.userGroupId, id: t.id } }).then(function (t) { e.d = JSON.parse(t.data.d) }, function (e) { alert(e.data.d) }) }; e.cancel = function () { t.cancel() }; e.cancel = function () { t.cancel() }, e.confirm = function (e) { !function (e) { a({ url: n.config.backend + "WeeklyMenus.asmx/Get", method: "POST", data: { userId: i.user.userGroupId, id: e.id, lang: i.config.language } }).then(function (e) { var n = JSON.parse(e.data.d); t.hide(n) }, function (e) { alert(e.data.d) }) }(e) } }; e.save = function () { if (l) return r.alert(s.instant("select menus"), ""), !1; f() }; var f = function () { o.show({ controller: m, templateUrl: "assets/partials/popup/saveweeklymenu.html", parent: angular.element(document.body), clickOutsideToClose: !0, d: { weeklyMenu: i.weeklyMenu } }).then(function (e) { i.weeklyMenu = e }, function () { }) }, m = function (e, t, a, o, r, s) { e.d = a.weeklyMenu; e.cancel = function () { t.cancel() }, e.confirm = function (a, l) { a.id = 1 == l ? null : a.id, a.date = new Date((new Date).setHours(0, 0, 0, 0)), function (a) { "demo" == i.user.licenceStatus ? s.demoAlert("the saving function is disabled in demo version") : s.isNullOrEmpty(a.title) ? s.alert(r.instant("enter menu title"), "") : o({ url: n.config.backend + "WeeklyMenus.asmx/Save", method: "POST", data: { userId: i.user.userGroupId, x: e.d } }).then(function (n) { "error" != n.data.d ? (e.d = JSON.parse(n.data.d), t.hide(e.d)) : s.alert(r.instant("there is already a menu with the same name"), "") }, function (e) { s.alert(r.instant(e.data.d), "") }) }(a) }, e.cancel = function () { t.cancel() }; e.cancel = function () { t.cancel() } }; e.remove = function (e) { if (l) return !1; var t = o.confirm().title(s.instant("remove menu") + "?").textContent(e.title).targetEvent(e).ok(s.instant("yes")).cancel(s.instant("no")); o.show(t).then(function () { g(e) }, function () { }) }; var g = function (a) { t({ url: n.config.backend + "WeeklyMenus.asmx/Delete", method: "POST", data: { userId: i.user.userGroupId, id: a.id } }).then(function (t) { e.d = JSON.parse(t.data.d) }, function (e) { alert(e.data.d) }) }; e.send = function () { p() }; var p = function () { return l ? (r.alert(s.instant("select menus"), ""), !1) : null != e.pdfLink && void o.show({ controller: h, templateUrl: "assets/partials/popup/sendweeklymenu.html", parent: angular.element(document.body), clickOutsideToClose: !0, d: { client: i.client, user: i.user, pdfLink: e.pdfLink } }).then(function (e) { }, function () { }) }, h = function (e, t, a, o, r, s) { e.d = angular.copy(o), e.menu = { title: "", note: "" }; e.cancel = function () { t.cancel() }, e.confirm = function () { e.titlealert = null, e.emailalert = null, s.isNullOrEmpty(e.menu.title) ? e.titlealert = r.instant("menu title is required") : s.isNullOrEmpty(e.d.client.email) ? e.emailalert = r.instant("email is required") : (t.hide(), a({ url: n.config.backend + "Mail.asmx/SendWeeklyMenu", method: "POST", data: { email: e.d.client.email, user: e.d.user, pdfLink: e.d.pdfLink, title: e.menu.title, note: e.menu.note, lang: i.config.language } }).then(function (e) { s.alert(e.data.d, "") }, function (e) { s.alert(r.instant(e.data.d), "") })) } }; e.pdfSLLink = null, e.creatingSLPdf = !1, e.createShoppingList = function (a, o, l) { t({ url: n.config.backend + "ShoppingList.asmx/CreateWeeklyShoppingList", method: "POST", data: { userId: n.usergroupid, menuList: a, consumers: o, lang: i.config.language } }).then(function (t) { var n = JSON.parse(t.data.d); n.total && n.total.price > 0 && (e.printSettings.showPrice = !0), y(n, o, l) }, function (e) { r.alert(s.instant(e.data.d), "") }) }; var y = function (a, o, r) { e.creatingSLPdf = !0, angular.isDefined(e.currentMenu) && t({ url: n.config.backend + "PrintPdf.asmx/WeeklyMenuShoppingList", method: "POST", data: { userId: n.usergroupid, shoppingList: a, consumers: o, lang: i.config.language, settings: r } }).then(function (t) { var a = t.data.d; e.creatingSLPdf = !1, e.pdfSLLink = n.config.backend + "upload/users/" + i.user.userGroupId + "/pdf/" + a + ".pdf" }, function (t) { e.creatingSLPdf = !1, alert(t.data.d) }) }; e.hidePdfSLLink = function () { e.pdfSLLink = null } }]).controller("clientAppCtrl", ["$scope", "$http", "$sessionStorage", "$window", "$rootScope", "$mdDialog", "functions", "$translate", "$timeout", function (e, t, n, a, i, o, r, s, l) { e.show = !1, e.showTitle = s.instant("show access data"), e.toggle = function (t, n) { e.show = !e.show, 1 == e.show ? (null == n.id && e.getActivationCode(t, n), e.showTitle = s.instant("hide access data")) : e.showTitle = s.instant("show access data") }, e.get = function (a) { e.show = !1, e.showTitle = s.instant("show access data"), t({ url: n.config.backend + "ClientApp.asmx/Get", method: "POST", data: { clientId: a.clientId } }).then(function (t) { e.clientApp = JSON.parse(t.data.d) }, function (e) { alert(e.data.d) }) }, e.client = null, e.getActivationCode = function (a, o) { null == o.id && (o.clientId = a.clientId, o.userId = i.user.userGroupId, o.lang = i.config.language), t({ url: n.config.backend + "ClientApp.asmx/GetActivationCode", method: "POST", data: { x: o } }).then(function (t) { e.clientApp = JSON.parse(t.data.d) }, function (e) { alert(e.data.d) }) }, e.clientAppUrl = function (e) { return void 0 !== e ? i.config.clientapppageurl + "?uid=" + i.user.userGroupId + "&cid=" + e.clientId + "&lang=" + i.config.language : void 0 }, e.sendingMail = !1, e.sendAppLinkToClientEmail = function (a) { if (1 == e.sendingMail) return !1; if (r.isNullOrEmpty(a.email)) return r.alert(s.instant("email is required"), ""), !1; e.sendingMail = !0; var o = e.clientAppUrl(a), l = s.instant("nutrition program") + ". " + s.instant("application access data"), c = "<p>" + s.instant("dear") + ",</p>" + s.instant("we send you the access data to track your body weight and download menus") + ".<br /><br />" + s.instant("web application") + ': <strong><a href="' + i.config.clientapppageurl + '">' + i.config.clientapppageurl + "</a></strong><br />" + s.instant("or") + " " + s.instant("android application") + ': <strong><a href="' + i.config.clientapp_apk + '">' + i.config.clientapp_apk + '</a></strong><br /><iframe src="https://www.appsgeyser.com/social_widget/social_widget.php?width=100&height=100&apkName=Program Prehrane Klijent_8297899&simpleVersion=yes" width="180" height="220" vspace="0" hspace="0" frameborder="no" scrolling="no" seamless="" allowtransparency="true"></iframe><br />' + s.instant("activation code") + ": <strong>" + e.clientApp.code + "</strong><br /><hr />" + s.instant("or") + " " + s.instant("web application") + " (" + s.instant("without activation code") + '): <strong><a href="' + o + '">' + o + "</a></strong><br /><br /><i>* " + s.instant("this is an automatically generated email – please do not reply to it") + "</i><br /><p>" + s.instant("best regards") + '</p><a href="' + i.config.webpageurl + '">' + i.config.webpage + "</a>"; t({ url: n.config.backend + "Mail.asmx/SendMessage", method: "POST", data: { sendTo: a.email, messageSubject: l, messageBody: c, lang: i.config.language } }).then(function (t) { e.sendingMail = !1, r.alert(t.data.d, "") }, function (t) { e.sendingMail = !1, r.alert(s.instant(t.data.d), "") }) }, e.backToApp = function () { i.currTpl = "./assets/partials/dashboard.html" } }]).directive("allowOnlyNumbers", function () { return { restrict: "A", link: function (e, t, n, a) { t.on("keydown", function (e) { var t = $(this), n = t.val(); return n = n.replace(",", "."), t.val(n), 64 != e.which && 16 != e.which && (e.which >= 48 && e.which <= 57 || (e.which >= 96 && e.which <= 105 || ([8, 13, 27, 37, 38, 39, 40].indexOf(e.which) > -1 || (110 == e.which || 188 == e.which || 190 == e.which || (46 == e.which || (e.preventDefault(), !1)))))) }) } } });