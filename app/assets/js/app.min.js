/*!
app.min.js
(c) 2017 IG PROG, www.igprog.hr
*/
angular.module("app", ["ui.router", "pascalprecht.translate", "ngMaterial", "chart.js", "ngStorage", "functions", "charts"]).config(["$stateProvider", "$urlRouterProvider", "$translateProvider", "$translatePartialLoaderProvider", "$httpProvider", function (e, t, n, a, o) { t.otherwise("/index"), e.state("index", { url: "/index", templateUrl: "assets/partials/index.html", controller: "appCtrl" }).state("dashboard", { url: "/dashboard", templateUrl: "assets/partials/dashboard.html", controller: "dashboardCtrl" }).state("clientsdata", { url: "/clientsdata", templateUrl: "assets/partials/clientsdata.html", controller: "clientsCtrl" }).state("calculation", { url: "/calculation", templateUrl: "assets/partials/calculation.html", controller: "calculationCtrl" }), n.useLoader("$translatePartialLoader", { urlTemplate: "./assets/json/translations/{lang}/{part}.json" }), n.preferredLanguage("hr"), a.addPart("main"), n.useSanitizeValueStrategy("escape"), o.defaults.headers.get || (o.defaults.headers.get = {}), o.defaults.headers.get["If-Modified-Since"] = "Mon, 26 Jul 1997 05:00:00 GMT", o.defaults.headers.get["Cache-Control"] = "no-cache", o.defaults.headers.get.Pragma = "no-cache" }]).config(function (e) { e.formatDate = function (e) { return moment(e).format("DD.MM.YYYY") } }).controller("AppCtrl", ["$scope", "$mdDialog", "$timeout", "$q", "$log", "$rootScope", "$localStorage", "$sessionStorage", "$window", "$http", "$translate", "$translatePartialLoader", "functions", function (e, t, n, a, o, i, r, c, s, l, d, u, f) { i.loginUser = c.loginuser, i.user = c.user, void 0 != i.user && "demo" == i.user.licenceStatus && (i.mainMessage = d.instant("you are currently working in a demo version") + ". " + d.instant("some functions are disabled.")); (function () { l.get("./config/config.json").then(function (e) { i.config = e.data, c.config = e.data, 1 == c.islogin && i.loadData() }) })(), i.getUserSettings = function () { l({ url: c.config.backend + "Files.asmx/GetFile", method: "POST", data: { foldername: "users/" + i.user.userGroupId, filename: "settings" } }).then(function (e) { i.settings = angular.fromJson(e.data.d), null != e.data.d ? ("" != i.settings.language && (i.config.language = i.settings.language), "" != i.settings.currency && (i.config.currency = i.settings.currency)) : i.settings = { language: i.config.language, currency: i.config.currency }, c.settings = i.settings }, function (e) { f.alert(d.instant(e.data.d), "") }) }, i.setLanguage = function (e) { d.use(e), u.addPart("main"), i.config.language = e, c.config.language = e, void 0 == c.usergroupid && null == c.usergroupid || i.loadData() }, i.loadFoods = function () { i.loading = !0, l({ url: c.config.backend + "Foods.asmx/Load", method: "POST", data: { userId: c.usergroupid } }).then(function (e) { var t = JSON.parse(e.data.d); i.foods = t.foods, angular.forEach(i.foods, function (e, t) { i.foods[t].food = d.instant(i.foods[t].food).replace("&gt;", "<").replace("&lt;", ">") }), i.myFoods = t.myFoods, i.foodGroups = t.foodGroups, i.loading = !1 }, function (e) { i.loading = !1, alert(e.data.d) }) }, i.loadPals = function () { l({ url: c.config.backend + "Calculations.asmx/LoadPal", method: "POST", data: "" }).then(function (e) { i.pals = JSON.parse(e.data.d) }, function (e) { alert(e.data.d) }) }, i.loadGoals = function () { l({ url: c.config.backend + "Goals.asmx/Load", method: "POST", data: "" }).then(function (e) { i.goals = JSON.parse(e.data.d) }, function (e) { alert(e.data.d) }) }, i.loadActivities = function () { i.loading = !0, l({ url: c.config.backend + "Activities.asmx/Load", method: "POST", data: "" }).then(function (e) { i.activities = JSON.parse(e.data.d), angular.forEach(i.activities, function (e, t) { i.activities[t].activity = d.instant(i.activities[t].activity).replace("&gt;", "<").replace("&lt;", ">") }), i.loading = !1 }, function (e) { i.loading = !1, alert(e.data.d) }) }, i.loadDiets = function () { l({ url: c.config.backend + "Diets.asmx/Load", method: "POST", data: "" }).then(function (e) { i.diets = JSON.parse(e.data.d), angular.forEach(i.diets, function (e, t) { i.diets[t].diet = d.instant(i.diets[t].diet).replace("&gt;", "<").replace("&lt;", ">"), i.diets[t].dietDescription = d.instant(i.diets[t].dietDescription).replace("&gt;", "<").replace("&lt;", ">"), i.diets[t].note = d.instant(i.diets[t].note).replace("&gt;", "<").replace("&lt;", ">") }) }, function (e) { alert(e.data.d) }) }, i.loadData = function () { i.loadFoods(), i.loadPals(), i.loadGoals(), i.loadActivities(), i.loadDiets() }, e.toggleTpl = function (e) { i.currTpl = "./assets/partials/" + e }; (function () { "" == c.userid || void 0 == c.userid || "expired" == c.user.licenceStatus ? (e.toggleTpl("login.html"), i.isLogin = !1) : (e.toggleTpl("dashboard.html"), e.activeTab = 0, i.isLogin = !0) })(), e.toggleNewTpl = function (e) { if (void 0 != i.clientData && (i.saveClientData(i.clientData), "menu" == e && i.clientData.meals.length > 0)) { if (0 == i.clientData.meals[1].isSelected && 1 == i.clientData.meals[5].isSelected) return i.newTpl = "./assets/partials/meals.html", f.alert(d.instant("the selected meal combination is not allowed in the menu") + "!", i.clientData.meals[5].title + " " + d.instant("in this combination must be turned off") + "."), !1; if (0 == i.clientData.meals[3].isSelected && 1 == i.clientData.meals[5].isSelected) return i.newTpl = "./assets/partials/meals.html", f.alert(d.instant("the selected meal combination is not allowed in the menu") + "!", i.clientData.meals[5].title + " " + d.instant("in this combination must be turned off") + "."), !1 } i.newTpl = "./assets/partials/" + e + ".html", i.selectedNavItem = e }, e.toggleNewTpl("clientsdata"), e.today = new Date, e.getDateDiff = function (e) { var t = new Date, n = new Date(e); return parseInt((n - t) / 864e5) }, e.showSaveMessage = !1, e.logout = function () { c.loginuser = null, c.user = null, c.userid = "", c.username = "", i.isLogin = !1, i.client = null, i.isLogin = !1, c.islogin = !1, c.usergroupid = null, i.mainMessage = null, i.currTpl = "assets/partials/login.html" }, i.saveClientData = function (e) { if (i.clientData.meals.length > 0) { if (0 == i.clientData.meals[1].isSelected && 1 == i.clientData.meals[5].isSelected) return i.newTpl = "assets/partials/meals.html", f.alert(d.instant("the selected meal combination is not allowed in the menu") + "!", i.clientData.meals[5].title + " " + d.instant("in this combination must be turned off") + "."), !1; if (0 == i.clientData.meals[3].isSelected && 1 == i.clientData.meals[5].isSelected) return i.newTpl = "assets/partials/meals.html", f.alert(d.instant("the selected meal combination is not allowed in the menu") + "!", i.clientData.meals[5].title + " " + d.instant("in this combination must be turned off") + "."), !1 } m(e) }; var m = function (e) { angular.forEach(e.meals, function (t, n) { e.meals[n].title = d.instant(t.title) }), e.userId = i.user.userId, e.clientId = null == e.clientId ? i.client.clientId : e.clientId, l({ url: c.config.backend + "ClientsData.asmx/Save", method: "POST", data: { userId: c.usergroupid, x: e } }).then(function (e) { i.clientData.date = new Date(i.clientData.date) }, function (e) { alert(e.data.d) }) }; e.showTabs = function () { if (angular.isUndefined(i.clientData)) return !1; var e = i.clientData; return null != e.clientId && e.height > 0 && e.weight > 0 && e.pal.value > 0 } }]).controller("loginCtrl", ["$scope", "$http", "$sessionStorage", "$window", "$rootScope", "functions", "$translate", "$mdDialog", function (e, t, n, a, o, i, r, c) { var s = "Users.asmx"; e.toggleTpl = function (t) { e.tpl = t }, e.toggleTpl("loginTpl"), e.login = function (a, c) { o.loading = !0, t({ url: o.config.backend + s + "/Login", method: "POST", data: { userName: a, password: c } }).then(function (t) { JSON.parse(t.data.d).userName == a ? (o.user = JSON.parse(t.data.d), o.loginUser = JSON.parse(t.data.d), n.loginuser = o.loginUser, n.userid = o.user.userId, n.usergroupid = o.user.userGroupId, n.username = o.user.userName, n.user = o.user, n.islogin = !0, o.isLogin = !0, o.loadData(), o.getUserSettings(), "expired" == o.user.licenceStatus ? (o.isLogin = !1, i.alert(r.instant("your account has expired"), r.instant("renew now")), o.currTpl = "./assets/partials/order.html") : (o.currTpl = "./assets/partials/dashboard.html", "demo" == o.user.licenceStatus && (o.mainMessage = r.instant("you are currently working in a demo version") + ". " + r.instant("some functions are disabled") + "."))) : (o.loading = !1, e.errorLogin = !0, e.errorMesage = r.instant("wrong user name or password")) }, function (t) { e.errorLogin = !0, e.errorMesage = r.instant("user was not found") }) }, e.signup = function () { o.currTpl = "assets/partials/signup.html" }, e.forgotPasswordPopup = function () { c.show({ controller: e.forgotPasswordPopupCtrl, templateUrl: "assets/partials/popup/forgotpassword.html", parent: angular.element(document.body), targetEvent: "", clickOutsideToClose: !0, fullscreen: e.customFullscreen, d: "" }).then(function (e) { }, function () { }) }, e.forgotPasswordPopupCtrl = function (e, t, a, o) { e.confirm = function (e) { r(e) }; var r = function (e) { a({ url: n.config.backend + s + "/ForgotPassword", method: "POST", data: { email: e } }).then(function (e) { t.hide(), i.alert(o.instant(JSON.parse(e.data.d)), "") }, function (e) { i.alert(o.instant(e.data.d), "") }) }; e.hide = function () { t.hide() }, e.cancel = function () { t.cancel() } } }]).controller("signupCtrl", ["$scope", "$http", "$sessionStorage", "$window", "$rootScope", "functions", "$translate", function (e, t, n, a, o, i, r) { var c = "Users.asmx"; e.showAlert = !1, e.passwordConfirm = ""; (function () { t({ url: n.config.backend + c + "/Init", method: "POST", data: "" }).then(function (t) { e.newUser = JSON.parse(t.data.d) }, function (e) { alert(e.data.d) }) })(), e.signup = function () { return e.newUser.userName = e.newUser.email, "" == e.newUser.firstName || "" == e.newUser.lastName || "" == e.newUser.email || "" == e.newUser.password || "" == e.passwordConfirm ? (i.alert(r.instant("all fields are required"), ""), !1) : e.newUser.password != e.passwordConfirm ? (i.alert(r.instant("passwords are not the same"), ""), !1) : void t({ url: n.config.backend + c + "/signup", method: "POST", data: { x: e.newUser } }).then(function (t) { "registration completed successfully" == t.data.d ? (e.alertMessage = t.data.d, e.showAlert = !0) : i.alert(r.instant(t.data.d), "") }, function (t) { e.showAlert = !1, i.alert(r.instant(t.data.d), "") }) } }]).controller("schedulerCtrl", ["$scope", "$localStorage", "$http", "$rootScope", "$timeout", "$sessionStorage", "functions", function (e, t, n, a, o, i, r) { var c = "Scheduler.asmx"; e.room = 0, e.getSchedulerByRoom = function () { n({ url: i.config.backend + c + "/GetSchedulerByRoom", method: "POST", data: { userId: a.user.userId, room: e.room } }).then(function (e) { a.events = JSON.parse(e.data.d), s() }, function (e) { alert(e.data.d) }) }, e.getSchedulerByRoom(); var s = function () { YUI().use("aui-scheduler", function (e) { var t = new e.SchedulerAgendaView, n = new e.SchedulerDayView, o = new e.SchedulerWeekView, i = new e.SchedulerMonthView, r = new e.SchedulerEventRecorder({ on: { save: function (e) { l(this.getTemplateData(), e) }, edit: function (e) { l(this.getTemplateData(), e) }, delete: function (e) { f(this.getTemplateData(), e) } } }); new e.Scheduler({ activeView: o, boundingBox: "#myScheduler", date: new Date, eventRecorder: r, items: a.events, render: !0, views: [n, o, i, t], strings: { agenda: "Dnevni red", day: "Dan", month: "Mjesec", table: "Tablica", today: "Danas", week: "Tjedan", year: "Godina" } }) }) }, l = function (t, n) { a.events.push({ room: e.room, clientId: "0", content: n.details[0].newSchedulerEvent.changed.content, endDate: t.endDate, startDate: t.startDate }); var o = {}; o.room = e.room, o.clientId = "0", o.content = null == n.details[0].newSchedulerEvent.changed.content ? t.content : n.details[0].newSchedulerEvent.changed.content, o.endDate = t.endDate, o.startDate = t.startDate, d(o) }, d = function (e) { n({ url: i.config.backend + c + "/Delete", method: "POST", data: { userId: a.user.userId, x: e } }).then(function (t) { u(e) }, function (e) { alert(e.data.d) }) }, u = function (e) { n({ url: i.config.backend + c + "/Save", method: "POST", data: { userId: a.user.userId, x: e } }).then(function (e) { }, function (e) { alert(e.data.d) }) }, f = function (t, n) { var a = {}; a.room = e.room, a.clientId = "0", a.content = t.content, a.endDate = t.endDate, a.startDate = t.startDate, m(a) }, m = function (t) { n({ url: i.config.backend + c + "/Delete", method: "POST", data: { userId: a.user.userId, x: t } }).then(function (t) { e.getSchedulerByRoom() }, function (e) { alert(e.data.d) }) } }]).controller("userCtrl", ["$scope", "$http", "$sessionStorage", "$window", "$rootScope", "$mdDialog", "functions", "$translate", function (e, t, n, a, o, i, r, c) { var s = "Users.asmx"; e.adminTypes = [{ value: "0", text: "Supervizor" }, { value: "1", text: "Admin" }], e.userTypes = [{ value: "0", text: "Tip korisnika" }, { value: "1", text: "tip korisnika" }]; (function () { t({ url: n.config.backend + s + "/Init", method: "POST", data: "" }).then(function (t) { e.newUser = JSON.parse(t.data.d), l() }, function (e) { r.alert(c.instant(e.data.d)) }) })(); var l = function () { t({ url: n.config.backend + s + "/GetUsersByUserGroup", method: "POST", data: { userGroupId: o.user.userGroupId } }).then(function (t) { e.users = JSON.parse(t.data.d) }, function (e) { r.alert(c.instant(e.data.d)) }) }; e.adminType = function (e) { switch (e) { case 0: return "Supervizor"; case 1: return "Admin"; default: return "" } }, e.signup = function () { return "demo" == o.user.licenceStatus && o.clients.length > 0 ? (r.demoAlert("in demo version you can enter only one client"), !1) : e.users.length >= n.config.maxnumberofusers ? (r.alert(c.instant("max number of users is") + " " + n.config.maxnumberofusers, ""), !1) : (void 0 == o.user && (o.user = e.newUser), e.newUser.userName = e.newUser.email, e.newUser.companyName = o.user.companyName, e.newUser.address = o.user.address, e.newUser.postalCode = o.user.postalCode, e.newUser.city = o.user.city, e.newUser.country = o.user.country, e.newUser.pin = o.user.pin, e.newUser.phone = o.user.phone, e.newUser.userGroupId = o.user.userGroupId, e.newUser.expirationDate = o.user.expirationDate, e.newUser.isActive = !0, "" == e.newUser.password || "" == e.passwordConfirm ? (r.alert(c.instant("enter password"), ""), !1) : e.newUser.password != e.passwordConfirm ? (r.alert(c.instant("passwords are not the same"), ""), !1) : void t({ url: n.config.backend + s + "/signup", method: "POST", data: { x: e.newUser } }).then(function (e) { l(), r.alert(c.instant("registration completed successfully"), "") }, function (e) { r.alert(c.instant(e.data.d)) })) }, e.update = function () { t({ url: n.config.backend + s + "/Update", method: "POST", data: { x: o.user } }).then(function (e) { r.alert(c.instant("saved"), "") }, function (e) { r.alert(c.instant(e.data.d)) }) }, e.showUser = function (e) { t({ url: n.config.backend + s + "/Get", method: "POST", data: { userId: e } }).then(function (e) { o.user = JSON.parse(e.data.d), o.currTpl = "assets/partials/user.html" }, function (e) { alert(e.data.d) }) }, e.updateUser = function (e) { t({ url: n.config.backend + s + "/Update", method: "POST", data: { x: e } }).then(function (e) { r.alert(c.instant(e.data.d)) }, function (e) { r.alert(c.instant(e.data.d)) }) }, e.remove = function (e) { var t = i.confirm().title(c.instant("delete user") + "?").textContent(e.firstName + " " + e.lastName).targetEvent(e).ok(c.instant("yes") + "!").cancel(c.instant("no")); i.show(t).then(function () { d(e) }, function () { }) }; var d = function (e) { t({ url: n.config.backend + s + "/Delete", method: "POST", data: { x: e } }).then(function (e) { l() }, function (e) { r.alert(c.instant(e.data.d)) }) } }]).controller("dashboardCtrl", ["$scope", "$http", "$sessionStorage", "$window", "$rootScope", "$mdDialog", "functions", function (e, t, n, a, o, i, r) { o.newTpl = "assets/partials/clientsdata.html", o.selectedNavItem = "clientsdata" }]).controller("clientsCtrl", ["$scope", "$http", "$sessionStorage", "$window", "$rootScope", "$mdDialog", "$timeout", "charts", "$filter", "functions", "$translate", function (e, t, n, a, o, i, r, c, s, l, d) { var u = "Clients.asmx"; e.displayType = 0, e.toggleTpl = function (t) { e.clientDataTpl = t }, e.toggleTpl("inputData"), e.toggleSubTpl = function (t) { e.subTpl = t }, e.toggleSubTpl("pal"); var f = function (e) { t({ url: n.config.backend + "ClientsData.asmx/Init", method: "POST", data: { client: e } }).then(function (e) { o.clientData = JSON.parse(e.data.d), o.clientData.date = new Date(o.clientData.date) }, function (e) { l.alert(d.instant(e.data.d), "") }) }; void 0 == o.clientData && void 0 != o.client && f(o.client); var m = function () { e.toggleSubTpl("pal"), t({ url: n.config.backend + u + "/Load", method: "POST", data: { userId: n.usergroupid } }).then(function (e) { o.clients = JSON.parse(e.data.d) }, function (e) { l.alert(d.instant(e.data.d), "") }) }; m(), e.testPdf = function () { var e = new jsPDF("p", "pt", "a4"), t = { pagesplit: !0 }; $("#printr").show(), e.addHTML($("#printr"), 0, 0, t, function () { $("#printr").hide(), e.output("dataurlnewwindow") }) }, o.newClient = function () { e.toggleSubTpl("pal"), t({ url: n.config.backend + u + "/Init", method: "POST", data: "" }).then(function (t) { o.client = JSON.parse(t.data.d), o.client.date = new Date((new Date).setHours(0, 0, 0, 0)), o.clientData = [], o.calculation = [], e.d = o.client, e.openPopup() }, function (e) { l.alert(d.instant(e.data.d), "") }) }, e.openPopup = function () { i.show({ controller: e.popupCtrl, templateUrl: "assets/partials/popup/client.html", parent: angular.element(document.body), targetEvent: "", clickOutsideToClose: !0, fullscreen: e.customFullscreen, d: e.d }).then(function (t) { o.client = t, e.get(t) }, function () { }) }, e.popupCtrl = function (e, t, a, i, r) { e.d = a, e.d.date = new Date(e.d.date), e.d.birthDate = new Date(e.d.birthDate), e.hide = function () { t.hide() }, e.cancel = function () { t.cancel() }, e.save = function (e) { if ("demo" == o.user.licenceStatus && o.clients.length > 0) return l.demoAlert("in demo version you can enter only one client"), !1; e.userId = n.userid, i({ url: n.config.backend + u + "/Save", method: "POST", data: { userId: n.usergroupid, x: e } }).then(function (e) { m(), r(function () { t.hide(JSON.parse(e.data.d)) }, 500) }, function (e) { l.alert(d.instant(e.data.d), "") }) } }, e.edit = function (a) { t({ url: n.config.backend + u + "/Get", method: "POST", data: { userId: n.usergroupid, clientId: a.clientId } }).then(function (t) { e.d = JSON.parse(t.data.d), e.openPopup() }, function (e) { alert(e.data.d) }) }, e.search = function () { t({ url: n.config.backend + u + "/Load", method: "POST", data: { userId: n.usergroupid } }).then(function (t) { o.clients = JSON.parse(t.data.d), e.d = JSON.parse(t.data.d), e.openSearchPopup() }, function (e) { alert(e.data.d) }) }, o.client, e.openSearchPopup = function () { e.toggleSubTpl("pal"), i.show({ controller: e.searchPopupCtrl, templateUrl: "assets/partials/popup/searchclients.html", parent: angular.element(document.body), targetEvent: "", clickOutsideToClose: !0, fullscreen: e.customFullscreen, d: e.d }).then(function (t) { o.client = t, e.get(t) }, function () { }) }, e.searchPopupCtrl = function (e, t, a, i) { e.d = a, e.getDateFormat = function (e) { return new Date(e) }, e.hide = function (e) { t.hide(e) }, e.cancel = function () { t.cancel() }, e.get = function (t) { e.hide(t) }, e.addNewClient = function () { t.cancel(), o.newClient() }, e.remove = function (e) { var n = t.confirm().title(d.instant("Delete Input") + " ?").textContent(d.instant("client") + ": " + e.firstName + " " + e.lastName).targetEvent(e).ok(d.instant("yes")).cancel(d.instant("no")); t.show(n).then(function () { r(e) }, function () { }) }; var r = function (e) { i({ url: n.config.backend + u + "/Delete", method: "POST", data: { userId: n.userid, clientId: e.clientId } }).then(function (e) { o.clients = JSON.parse(e.data.d), o.client = [], o.clientData = [] }, function (e) { alert(e.data.d) }) } }, e.get = function (a) { t({ url: n.config.backend + "ClientsData.asmx/Get", method: "POST", data: { userId: n.usergroupid, clientId: a.clientId } }).then(function (t) { null != JSON.parse(t.data.d).id ? (o.clientData = JSON.parse(t.data.d), o.clientData.date = new Date((new Date).setHours(0, 0, 0, 0)), e.getPalDetails(o.clientData.pal.value), e.toggleTpl("inputData"), o.calculation = []) : f(a) }, function (e) { alert(e.data.d) }) }, e.getPalDetails = function (e) { t({ url: n.config.backend + "Calculations.asmx/GetPalDetails", method: "POST", data: { palValue: e } }).then(function (t) { o.pal = JSON.parse(t.data.d), o.pal.value = e, o.clientData.pal = o.pal }, function (e) { alert(e.data.d) }) }, e.getClientLog = function (a) { t({ url: n.config.backend + "ClientsData.asmx/GetClientLog", method: "POST", data: { userId: n.usergroupid, clientId: a.clientId } }).then(function (t) { g(), e.toggleTpl("clientStatictic"), e.clientLog = JSON.parse(t.data.d) }, function (e) { alert(e.data.d) }) }, e.removeClientLog = function (e, t) { var n = i.confirm().title(d.instant("Delete Record") + " ?").textContent(d.instant("record date") + ": " + s("date")(e.date, "dd.MM.yyyy") + ", mass: " + e.weight + "kg").targetEvent(e).ok(d.instant("yes")).cancel(d.instant("no")); i.show(n).then(function () { p(e) }, function () { }) }; var p = function (a) { t({ url: n.config.backend + "ClientsData.asmx/Delete", method: "POST", data: { userId: n.usergroupid, clientData: a } }).then(function (t) { e.getClientLog(a) }, function (e) { alert(e.data.d) }) }, g = function () { t({ url: n.config.backend + "Calculations.asmx/GetCalculation", method: "POST", data: { client: o.clientData } }).then(function (t) { o.calculation = JSON.parse(t.data.d), h(e.displayType) }, function (e) { alert(e.data.d) }) }; e.changeDisplayType = function (e) { h(e) }; var h = function (t) { var n = [], a = [], i = [], r = []; o.clientLogGraphData = c.createGraph([d.instant("tracking of anthropometric measures")], [n, a, i], r, ["#3399ff", "#ff3333", "#33ff33"], [{ label: d.instant("measured value"), borderWidth: 5, type: "line", fill: !0 }, { label: d.instant("limit"), borderWidth: 2, backgroundColor: "#e6e6ff", fill: !1, type: "line" }, { label: d.instant("limit"), borderWidth: 2, backgroundColor: "#e6e6ff", fill: !1, type: "line" }], !1), angular.forEach(e.clientLog, function (e, c) { 0 == t && (n.push(e.weight), a.push(o.calculation.recommendedWeight.min), i.push(o.calculation.recommendedWeight.max)), 1 == t && (n.push(e.waist), a.push(95)), 2 == t && (n.push(e.hip), a.push(97)), r.push(new Date(e.date).toLocaleDateString()) }) }; e.getDateFormat = function (e) { return new Date(e) }, e.change = function (e, t) { switch (t) { case "height": return o.clientData.height = o.clientData.height + e; case "weight": return o.clientData.weight = o.clientData.weight + e; case "waist": return o.clientData.waist = o.clientData.waist + e; case "hip": return o.clientData.hip = o.clientData.hip + e; default: return "" } } }]).controller("detailCalculationOfEnergyExpenditureCtrl", ["$scope", "$http", "$sessionStorage", "$window", "$rootScope", "$mdDialog", "functions", "$translate", function (e, t, n, a, o, r, c, s) { o.totalDailyEnergyExpenditure = { value: 0, duration: 0 }; var l = function () { t({ url: n.config.backend + "DetailEnergyExpenditure.asmx/Init", method: "POST", data: "" }).then(function (t) { e.dailyActivity = JSON.parse(t.data.d) }, function (e) { c.alert(s.instant(e.data.d), "") }) }, d = function (t) { for (e.hours = [], e.minutes = [], i = t; i < 25; i++) e.hours.push(i); for (i = 0; i < 60; i += 5) e.minutes.push(i) }, u = function () { e.from = { hour: 0, min: 0 }, e.to = { hour: 0, min: 0 }, d(0) }; o.detailCalculationOfEnergyExpenditure = function (t) { e.showDetailCalculationOfEnergyExpenditure = t, l(), u() }, o.detailCalculationOfEnergyExpenditure(!0), e.clearDailyActivities = function () { o.clientData.dailyActivities = [], o.totalDailyEnergyExpenditure.value = 0, o.totalDailyEnergyExpenditure.duration = 0, u() }; var f = function () { var e = 0; return angular.forEach(o.clientData.dailyActivities, function (t, n) { e += t.energy }), e }, m = function () { var e = 0; return angular.forEach(o.clientData.dailyActivities, function (t, n) { e += t.duration }), e }; e.confirmActivity = function (t) { if (0 == p(e.from, e.to)) return c.alert(s.instant("the start time and end of activity can not be the same"), ""), !1; e.dailyActivity.id = angular.fromJson(t).id, e.dailyActivity.activity = angular.fromJson(t).activity, e.dailyActivity.from.hour = e.from.hour, e.dailyActivity.from.min = e.from.min, e.dailyActivity.to.hour = e.to.hour, e.dailyActivity.to.min = e.to.min, e.dailyActivity.duration = p(e.from, e.to), e.dailyActivity.energy = g(p(e.from, e.to), angular.fromJson(t).factorKcal), o.clientData.dailyActivities.push(angular.copy(e.dailyActivity)), o.totalDailyEnergyExpenditure.value = f(), o.totalDailyEnergyExpenditure.duration = m(), e.from = angular.copy(e.to), d(e.from.hour) }; var p = function (e, t) { return 60 * t.hour + t.min - (60 * e.hour + e.min) }, g = function (e, t) { return e * t }; e.save = function (e) { if ("demo" == o.user.licenceStatus && o.clients.length > 0) return c.demoAlert("this function is not available in demo version"), !1; t({ url: n.config.backend + "DetailEnergyExpenditure.asmx/Save", method: "POST", data: { userId: o.user.userGroupId, clientId: o.client.clientId, activities: e } }).then(function (e) { c.alert(s.instant(e.data.d), "") }, function (e) { c.alert(s.instant(e.data.d), "") }) }; (function () { if (o.clientData.dailyActivities.length > 0) { o.totalDailyEnergyExpenditure.value = f(), o.totalDailyEnergyExpenditure.duration = m(); var t = o.clientData.dailyActivities[o.clientData.dailyActivities.length - 1]; e.from = { hour: t.to.hour, min: t.to.min }, e.to = { hour: t.to.hour, min: t.to.min }, d(t.to.hour) } })() }]).controller("calculationCtrl", ["$scope", "$http", "$sessionStorage", "$window", "$rootScope", "$mdDialog", "charts", "$timeout", "functions", function (e, t, n, a, o, i, r, c, s) { var l = "Calculations.asmx"; (function () { t({ url: n.config.backend + l + "/GetCalculation", method: "POST", data: { client: o.clientData } }).then(function (e) { o.calculation = JSON.parse(e.data.d), o.appCalculation = JSON.parse(e.data.d), angular.isDefined(o.totalDailyEnergyExpenditure) && 1440 == o.totalDailyEnergyExpenditure.duration && (o.calculation.tee = o.totalDailyEnergyExpenditure.value, o.appCalculation.tee = o.totalDailyEnergyExpenditure.value), void 0 != o.clientData.goal.code && null != o.clientData.goal.code && 0 != o.clientData.goal.code || (o.clientData.goal.code = o.calculation.goal.code), d(), p() }, function (e) { alert(e.data.d) }) })(), e.getBmiClass = function (e) { return e < 18.5 ? "alert alert-info fa fa-exclamation" : e >= 18.5 && e <= 25 ? "alert alert-success fa fa-check" : e > 25 && e < 30 ? "alert alert-warning fa fa-exclamation" : e >= 30 ? "alert alert-danger fa fa-exclamation" : void 0 }; var d = function () { google.charts.load("current", { packages: ["gauge"] }), c(function () { u(), f(), m() }, 1e3) }, u = function () { var e = "bmiChart", t = o.calculation.bmi.value.toFixed(0), n = "BMI", a = { title: "BMI", min: 15, max: 34, greenFrom: 18.5, greenTo: 25, yellowFrom: 25, yellowTo: 30, redFrom: 30, redTo: 34, minorTicks: 5 }; google.charts.setOnLoadCallback(r.guageChart(e, t, n, a)) }, f = function () { var e = "whrChart", t = o.calculation.whr.value.toFixed(0), n = "WHR", a = { title: "WHR", min: 0, max: 2, greenFrom: 0, greenTo: 1, yellowFrom: 1, yellowTo: 1.1, redFrom: 1.1, redTo: 2, minorTicks: 5 }; google.charts.setOnLoadCallback(r.guageChart(e, t, n, a)) }, m = function () { var e = "waistChart", t = o.calculation.waist.value.toFixed(0), n = "cm", a = { title: "WHR", min: 60, max: 160, greenFrom: 60, greenTo: 94, yellowFrom: 94, yellowTo: 102, redFrom: 102, redTo: 160, minorTicks: 5 }; google.charts.setOnLoadCallback(r.guageChart(e, t, n, a)) }, p = function () { t({ url: n.config.backend + "Goals.asmx/Load", method: "POST", data: "" }).then(function (e) { o.goals = JSON.parse(e.data.d), g() }, function (e) { alert(e.data.d) }) }; e.getGoal = function (e) { var t = 0, n = 0; switch (e) { case "G1": "G1" == o.appCalculation.goal.code && (t = o.appCalculation.recommendedEnergyIntake, n = o.appCalculation.recommendedEnergyExpenditure), "G2" == o.appCalculation.goal.code && (t = o.appCalculation.tee - 300, n = o.appCalculation.recommendedEnergyExpenditure), "G3" == o.appCalculation.goal.code && (t = o.appCalculation.recommendedEnergyIntake + 300, n = o.appCalculation.recommendedEnergyExpenditure); break; case "G2": "G1" == o.appCalculation.goal.code && (t = o.appCalculation.tee + o.appCalculation.recommendedEnergyExpenditure, n = o.appCalculation.recommendedEnergyExpenditure), "G2" == o.appCalculation.goal.code && (t = o.appCalculation.recommendedEnergyIntake, n = o.appCalculation.recommendedEnergyExpenditure), "G3" == o.appCalculation.goal.code && (t = o.appCalculation.recommendedEnergyIntake - 300, n = o.appCalculation.recommendedEnergyExpenditure); break; case "G3": "G2" == o.appCalculation.goal.code && (t = o.appCalculation.recommendedEnergyIntake, n = o.appCalculation.recommendedEnergyExpenditure), "G2" == o.appCalculation.goal.code && (t = o.appCalculation.recommendedEnergyIntake + 300, n = o.appCalculation.recommendedEnergyExpenditure), "G3" == o.appCalculation.goal.code && (t = o.appCalculation.recommendedEnergyIntake, n = o.appCalculation.recommendedEnergyExpenditure), "G4" == o.appCalculation.goal.code && (t = o.appCalculation.recommendedEnergyIntake + 500, n = o.appCalculation.recommendedEnergyExpenditure + 200); break; case "G4": "G1" == o.appCalculation.goal.code && (t = o.appCalculation.tee + o.calculation.recommendedEnergyExpenditure, n = o.calculation.recommendedEnergyExpenditure + 200), "G2" == o.appCalculation.goal.code && (t = o.appCalculation.tee + 500, n = o.appCalculation.recommendedEnergyExpenditure + 200), "G3" == o.appCalculation.goal.code && (t = o.appCalculation.recommendedEnergyIntake + 400, n = o.appCalculation.recommendedEnergyExpenditure + 100); break; default: t = 0, n = 0 } angular.forEach(o.goals, function (t, n) { t.code == e && (o.clientData.goal.code = t.code, o.clientData.goal.title = t.title) }), o.calculation.recommendedEnergyIntake = Math.round(t), o.calculation.recommendedEnergyExpenditure = Math.round(n) }; var g = function () { o.calculation.bmi.value < 18.5 && (o.goals[0].isDisabled = !0), o.calculation.bmi.value > 25 && (o.goals[2].isDisabled = !0) } }]).controller("activitiesCtrl", ["$scope", "$http", "$sessionStorage", "$window", "$rootScope", "$mdDialog", "functions", "$translate", function (e, t, n, a, o, i, r, c) { e.orderdirection = "-", e.orderby = function (t) { var n = "+" == e.orderdirection ? "-" : "+"; e.order = n + t, e.orderdirection = n }, e.orderby("activity"), void 0 == o.activities && o.loadActivities(); var s = function () { var e = 0; return o.clientData.activities.length > 0 && angular.forEach(o.clientData.activities, function (t, n) { e += t.energy }), o.calculation.recommendedEnergyExpenditure - e }; e.openPopup = function (t) { energyLeft = s(), energyLeft > 10 ? i.show({ controller: e.popupCtrl, templateUrl: "assets/partials/popup/activity.html", parent: angular.element(document.body), targetEvent: "", clickOutsideToClose: !0, fullscreen: e.customFullscreen, d: { activity: t, energy: energyLeft } }).then(function (e) { energyLeft = e }, function () { }) : r.alert(c.instant("the selected additional energy expenditure is the same as recommended."), "") }, e.popupCtrl = function (e, t, n, a) { e.d = n.activity; var i = n.energy; e.duration = Math.round(i / (e.d.factorKcal * o.clientData.weight) * 60), e.cancel = function () { t.cancel() }, e.confirm = function (n) { i = e.duration * (e.d.factorKcal * o.clientData.weight) / 60, o.clientData.activities.push({ id: n.id, activity: n.activity, duration: e.duration, energy: i }), t.hide(i) } }, e.removeActivity = function (e, t) { var n = i.confirm().title(c.instant("Delete choosen Activity")).textContent(e.title).targetEvent(e).ok(c.instant("yes")).cancel(c.instant("no")); i.show(n).then(function () { o.clientData.activities.splice(t, 1) }, function () { }) } }]).controller("dietsCtrl", ["$scope", "$http", "$sessionStorage", "$window", "$rootScope", "$mdDialog", "functions", function (e, t, n, a, o, i, r) { var c = "Diets.asmx", s = function (e) { t({ url: n.config.backend + c + "/Get", method: "POST", data: { id: e } }).then(function (e) { var t = JSON.parse(e.data.d); o.clientData.diet = t }, function (e) { alert(e.data.d) }) }, l = function () { var e = o.clientData.age, t = "", n = o.clientData.goal.code; if (e < 14) switch (n) { case "G1": t = "d4"; break; case "G2": case "G3": t = "d1"; break; case "G4": t = "d7"; break; default: t = "d1" } if (e >= 14 && e < 18) switch (n) { case "G1": t = "d5"; break; case "G2": case "G3": t = "d2"; break; case "G4": t = "d7"; break; default: t = "d2" } if (e >= 18) switch (n) { case "G1": t = "d6"; break; case "G2": case "G3": t = "d3"; break; case "G4": t = "d7"; break; default: t = "d3" } s(t) }; null == o.clientData.diet.id && l(), e.select = function (e) { o.clientData.diet = e } }]).controller("mealsCtrl", ["$scope", "$http", "$sessionStorage", "$window", "$rootScope", "$mdDialog", "functions", function (e, t, n, a, o, i, r) { var c = "Meals.asmx", s = function () { t({ url: n.config.backend + c + "/Load", method: "POST", data: "" }).then(function (e) { o.clientData.meals = JSON.parse(e.data.d), angular.forEach(o.clientData.meals, function (e, t) { o.clientData.meals[t].title = $translate.instant(o.clientData.meals[t].activity) }) }, function (e) { alert(e.data.d) }) }; 0 == o.clientData.meals.length && s() }]).controller("menuCtrl", ["$scope", "$http", "$sessionStorage", "$window", "$rootScope", "$mdDialog", "charts", "$timeout", "functions", "$translate", function (e, t, n, a, o, i, r, c, s, l) { var d = "Foods.asmx"; e.addFoodBtnIcon = "fa fa-plus", e.addFoodBtn = !1, o.selectedFoods = void 0 == o.selectedFoods ? [] : o.selectedFoods, 0 == o.clientData.meals.length && (o.newTpl = "assets/partials/meals.html", o.selectedNavItem = "meals", s.alert(l.instant("choose meals"), "")); (function (e) { t({ url: n.config.backend + d + "/GetRecommendations", method: "POST", data: { client: e } }).then(function (e) { o.recommendations = JSON.parse(e.data.d), b() }, function (e) { alert(e.data.d) }) })(angular.copy(o.clientData)); var u = function () { t({ url: n.config.backend + d + "/Init", method: "POST", data: "" }).then(function (t) { e.food = t.data.d.food, f() }, function (e) { alert(e.data.d) }) }; void 0 == o.currentMenu && u(); var f = function () { t({ url: n.config.backend + "Menues.asmx/Init", method: "POST", data: {} }).then(function (e) { o.currentMenu = JSON.parse(e.data.d), o.currentMenu.data.meals = o.clientData.meals, angular.forEach(o.currentMenu.data.meals, function (e, t) { o.currentMenu.data.meals[t].description = "" }), o.currentMeal = "B", S(o.currentMenu) }, function (e) { alert(e.data.d) }) }; e.toggleMeals = function (e) { o.currentMeal = e }, o.currentMeal = "B", e.toggleAnalytics = function (t) { c(function () { e.analyticsTpl = t, S(o.currentMenu) }, 700) }, e.toggleAnalytics("chartsTpl"), e.changeQuantity = function (e, a, i) { t({ url: n.config.backend + d + "/ChangeFoodQuantity", method: "POST", data: { initFood: o.currentMenu.data.selectedInitFoods[i], newQuantity: e.quantity, newMass: e.mass, type: a } }).then(function (e) { o.currentMenu.data.selectedFoods[i] = JSON.parse(e.data.d), S(o.currentMenu) }, function (e) { alert(e.data.d) }) }, e.change = function (t, n, a) { o.currentMenu.data.selectedFoods[a].quantity + t > 0 && ("quantity" == n && (o.currentMenu.data.selectedFoods[a].quantity = o.currentMenu.data.selectedFoods[a].quantity + t, e.changeQuantity(o.currentMenu.data.selectedFoods[a], "quantity", a)), "mass" == n && (o.currentMenu.data.selectedFoods[a].mass = o.currentMenu.data.selectedFoods[a].mass + t, e.changeQuantity(o.currentMenu.data.selectedFoods[a], "mass", a))) }, e.openFoodPopup = function (t, n) { if ("demo" == o.user.licenceStatus && o.currentMenu.data.selectedFoods.length > 9) return s.demoAlert("in demo version maximum number of choosen foods is 10"), !1; e.addFoodBtn = !0, e.addFoodBtnIcon = "fa fa-spinner fa-spin", i.show({ controller: e.foodPopupCtrl, templateUrl: "assets/partials/popup/food.html", parent: angular.element(document.body), clickOutsideToClose: !0, d: { foods: o.foods, myFoods: o.myFoods, foodGroups: o.foodGroups, food: t, idx: n, config: o.config } }).then(function (t) { e.addFoodBtnIcon = "fa fa-plus", e.addFoodBtn = !1, e.addFoodToMeal(t.food, t.initFood, n) }, function () { e.addFoodBtnIcon = "fa fa-plus", e.addFoodBtn = !1 }) }, e.foodPopupCtrl = function (e, t, a, i, r) { e.d = a, e.foods = a.foods, e.myFoods = a.myFoods, e.foodGroups = a.foodGroups, e.food = void 0 != a.food ? a.food : null; var c = void 0 != a.food ? a.food : null; e.limit = 700, e.initCurrentFoodGroup = function () { e.currentGroup = { code: "A", title: "all foods" } }, e.initCurrentFoodGroup(), e.showMyFoods = function (t) { e.isShowMyFood = t }, e.getFoodDetails = function (t) { if (1 == e.isShowMyFood) return s(t), !1; i({ url: n.config.backend + "Foods.asmx/Get", method: "POST", data: { userId: o.user.userId, id: JSON.parse(t).id } }).then(function (t) { e.food = JSON.parse(t.data.d), e.food.food = r.instant(e.food.food), e.food.unit = r.instant(e.food.unit), e.food.foodGroup.title = r.instant(e.food.foodGroup.title), e.food.meal.title = r.instant(e.food.meal.title), angular.forEach(e.food.thermalTreatments, function (t, n) { e.food.thermalTreatments[n].thermalTreatment.title = r.instant(e.food.thermalTreatments[n].thermalTreatment.title) }), c = angular.copy(e.food) }, function (e) { alert(e.data.d) }) }; var s = function (t) { i({ url: n.config.backend + "MyFoods.asmx/Get", method: "POST", data: { userId: o.user.userId, id: JSON.parse(t).id } }).then(function (t) { e.food = JSON.parse(t.data.d), c = angular.copy(JSON.parse(t.data.d)) }, function (e) { alert(e.data.d) }) }; e.getThermalTreatment = function (e, t) { angular.forEach(e, function (e, t) { e.isSelected = !1 }), e[t].isSelected = !0 }, e.cancel = function () { t.cancel() }, e.confirm = function (e) { var n = { food: e, initFood: c }; t.hide(n) }, e.changeQuantity = function (t, a) { i({ url: n.config.backend + d + "/ChangeFoodQuantity", method: "POST", data: { initFood: c, newQuantity: t.quantity, newMass: t.mass, type: a } }).then(function (t) { e.food = JSON.parse(t.data.d) }, function (e) { }) }, e.change = function (t, n) { e.food.quantity + t > 0 && ("quantity" == n && (e.food.quantity = e.food.quantity + t, e.changeQuantity(e.food, "quantity")), "mass" == n && (e.food.mass = e.food.mass + t, e.changeQuantity(e.food, "mass"))) }, e.showFoodSubGroups = function (t) { "A" == t.parent && (e.currentMainGroup = t.group.code) }, e.changeFoodGroup = function (t) { e.searchFood = "", e.limit = 1e3, e.showMyFoods(!1), e.currentGroup = { code: t.code, title: t.title } }, e.checkIf = function (t) { return t.foodGroup.code == e.currentGroup.code || "A" == e.currentGroup.code || 1 == e.isShowMyFood || e.currentGroup.code == e.currentMainGroup && (t.foodGroup.parent == e.currentGroup.code || void 0) }, e.loadMore = function () { e.limit = 1e3 } }, e.addFoodToMeal = function (t, n, a) { void 0 == t.food && null == t.food || (t.meal.code = o.currentMeal, angular.forEach(o.clientData.meals, function (e, n) { e.code == t.meal.code && (t.meal.title = l.instant(e.title)) }), void 0 == a ? (o.currentMenu.data.selectedFoods.push(t), o.currentMenu.data.selectedInitFoods.push(n)) : (o.currentMenu.data.selectedFoods[a] = t, o.currentMenu.data.selectedInitFoods[a] = n), n.meal.code = o.currentMeal, e.food = [], e.choosenFood = "", e.thermalTreatment = "", S(o.currentMenu)) }, e.new = function () { u() }, e.delete = function () { var e = i.confirm().title(l.instant("delete menu") + "?").textContent().targetEvent().ok(l.instant("yes")).cancel(l.instant("no")); i.show(e).then(function () { u(), alert("TODO") }, function () { }) }, e.removeFood = function (e, t) { var n = i.confirm().title(l.instant("delete food") + "?").textContent(e.food).targetEvent(e).ok(l.instant("yes")).cancel(l.instant("no")); i.show(n).then(function () { o.currentMenu.data.selectedFoods.splice(t, 1), o.currentMenu.data.selectedInitFoods.splice(t, 1), S(o.currentMenu) }, function () { }) }, e.printPreview = function () { i.show({ controller: e.printPreviewCtrl, templateUrl: "assets/partials/popup/printmenu.html", parent: angular.element(document.body), targetEvent: "", clickOutsideToClose: !0, fullscreen: e.customFullscreen, d: { currentMenu: o.currentMenu, clientData: o.clientData } }).then(function () { }, function () { }) }, e.printPreviewCtrl = function (e, t, a, i) { e.d = a.currentMenu.data.selectedFoods, e.clientData = a.clientData, e.meals = a.currentMenu.data.meals, e.cancel = function () { t.cancel() }, e.print = function () { alert("todo"), window.print() }; (function () { var t = "jelovnik"; i({ url: n.config.backend + "PrintPdf.asmx/MenuPdf", method: "POST", data: { userId: o.user.userId, fileName: t, currentMenu: a.currentMenu, clientData: a.clientData } }).then(function (a) { e.pdfLink = n.config.backend + "upload/users/" + o.user.userId + "/pdf/" + t + ".pdf" }, function (e) { alert(e.data.d) }) })() }, e.get = function () { "demo" == o.user.licenceStatus ? s.demoAlert("this function is not available in demo version") : m() }; var m = function (e) { i.show({ controller: p, templateUrl: "assets/partials/popup/getmenu.html", parent: angular.element(document.body), clickOutsideToClose: !0, clientData: o.clientData }).then(function (e) { o.currentMenu = e, o.clientData.meals = e.data.meals, S(o.currentMenu) }, function () { }) }, p = function (e, t, a, i) { e.clientData = i, e.type = 1; (function () { a({ url: n.config.backend + "Menues.asmx/Load", method: "POST", data: { userId: o.user.userGroupId } }).then(function (t) { e.d = JSON.parse(t.data.d) }, function (e) { alert(e.data.d) }) })(), e.remove = function (e) { var n = t.confirm().title(l.instant("remove menu") + "?").textContent(e.title).targetEvent(e).ok(l.instant("yes")).cancel(l.instant("no")); t.show(n).then(function () { r(e) }, function () { }) }; var r = function (t) { a({ url: n.config.backend + "Menues.asmx/Delete", method: "POST", data: { userId: o.user.userGroupId, id: t.id } }).then(function (t) { e.d = JSON.parse(t.data.d) }, function (e) { alert(e.data.d) }) }; e.cancel = function () { t.cancel() }, e.confirm = function (e) { t.hide(e) } }; e.save = function () { "demo" == o.user.licenceStatus ? s.demoAlert("this function is not available in demo version") : g() }; var g = function () { o.client.clientData = o.clientData, i.show({ controller: h, templateUrl: "assets/partials/popup/savemenu.html", parent: angular.element(document.body), clickOutsideToClose: !0, d: { currentMenu: o.currentMenu, client: o.client } }).then(function (e) { }, function () { }) }, h = function (e, t, a, i, r) { e.d = i; var c = function (e) { if (t.hide(), "" == e.title || void 0 == e.title) return document.getElementById("txtMenuTitle").focus(), s.alert(r.instant("enter menu name"), ""), g(), !1; e.diet = i.client.clientData.diet.diet, a({ url: n.config.backend + "Menues.asmx/Save", method: "POST", data: { userId: o.user.userGroupId, x: e } }).then(function (e) { s.alert(r.instant(e.data.d), "") }, function (e) { s.alert(r.instant(e.data.d), "") }) }; e.cancel = function () { t.cancel() }, e.confirm = function (e, t) { e.client = i.client, e.userId = i.client.userId, e.id = 1 == t ? null : e.id, c(e) } }; e.send = function () { "demo" == o.user.licenceStatus ? s.demoAlert("this function is not available in demo version") : v() }; var v = function () { o.client.clientData = o.clientData, i.show({ controller: y, templateUrl: "assets/partials/popup/sendmenu.html", parent: angular.element(document.body), clickOutsideToClose: !0, d: { currentMenu: o.currentMenu, client: o.client } }).then(function (e) { }, function () { }) }, y = function (e, t, a, o, i) { e.d = o; var r = function () { t.hide(), a({ url: n.config.backend + "Mail.asmx/SendMenu", method: "POST", data: { email: o.client.email, messageSubject: o.currentMenu.title, currentMenu: o.currentMenu } }).then(function (e) { s.alert(i.instant(e.data.d), "") }, function (e) { s.alert(i.instant(e.data.d), "") }) }; e.cancel = function () { t.cancel() }, e.confirm = function (e, t) { r() } }, S = function (e) { t({ url: n.config.backend + d + "/GetTotals", method: "POST", data: { selectedFoods: e.data.selectedFoods, meals: e.data.meals } }).then(function (e) { o.totals = JSON.parse(e.data.d), o.totals.price.currency = o.config.currency, b() }, function (e) { alert(e.data.d) }) }, b = function () { w(), D(), T(), C(), O(), F(), x(), k(); (function () { e.mealsTotals = [], e.mealsMin = [], e.mealsMax = [], e.mealsTitles = [], angular.forEach(o.clientData.meals, function (t, n) { 1 == t.isSelected && (e.mealsTotals.push(o.totals.mealsTotalEnergy[n].meal.energy), e.mealsMin.push(o.recommendations.mealsRecommendationEnergy[n].meal.energyMin), e.mealsMax.push(o.recommendations.mealsRecommendationEnergy[n].meal.energyMax), e.mealsTitles.push(t.title)) }) })(); var t = o.totals, n = o.recommendations; o.servGraphData = r.createGraph(["jedinična serviranja"], [[t.servings.cerealsServ, t.servings.vegetablesServ, t.servings.fruitServ, t.servings.meatServ, t.servings.milkServ, t.servings.fatsServ], [n.servings.cerealsServ, n.servings.vegetablesServ, n.servings.fruitServ, n.servings.meatServ, n.servings.milkServ, n.servings.fatsServ]], ["ugljikohidrati", "povrče", "voće", "meso", "mlijeko", "masti"], ["#45b7cd", "#33cc33", "#33cc33"], [{ label: "Odabrano", borderWidth: 1, type: "bar" }, { label: "Preporučeno", borderWidth: 3, hoverBackgroundColor: "rgba(255,99,132,0.4)", hoverBorderColor: "rgba(255,99,132,1)", type: "line" }], !1), o.pieGraphData = r.createGraph(["nutrijenti"], [t.carbohydratesPercentage, t.proteinsPercentage, t.fatsPercentage], ["ugljikohidrati", "bjelančevine", "masti"], !0), o.mealsGraphData = r.createGraph(["obroci"], [e.mealsTotals, e.mealsMin, e.mealsMax], e.mealsTitles, ["#45b7cd", "#ff6384", "#33cc33"], [{ label: "Odabrano", borderWidth: 1, type: "bar" }, { label: "Preporučeno", borderWidth: 3, hoverBackgroundColor: "rgba(255,99,132,0.4)", hoverBorderColor: "rgba(255,99,132,1)", type: "line" }, { label: "Preporučeno", borderWidth: 3, hoverBackgroundColor: "rgba(255,99,132,0.4)", hoverBorderColor: "rgba(255,99,132,1)", type: "line" }], !1), o.parametersGraphData = r.createGraph(["parametri"], [[t.fibers, t.monounsaturatedFats, t.polyunsaturatedFats, t.calcium, t.magnesium, t.phosphorus, t.iron, t.copper, t.zinc, t.manganese, t.selenium, t.iodine, t.retinol, t.vitaminD, t.vitaminE, t.vitaminB1, t.vitaminB2, t.vitaminB3, t.vitaminB6, t.vitaminB12, t.folate, t.pantothenicAcid, t.biotin, t.vitaminC, t.vitaminK], [n.fibers.rda, n.monounsaturatedFats.rda, n.polyunsaturatedFats.rda, n.calcium.rda, n.magnesium.rda, n.phosphorus.rda, n.iron.rda, n.copper.rda, n.zinc.rda, n.manganese.rda, n.selenium.rda, n.iodine.rda, n.retinol.rda, n.vitaminD.rda, n.vitaminE.rda, n.vitaminB1.rda, n.vitaminB2.rda, n.vitaminB3.rda, n.vitaminB6.rda, n.vitaminB12.rda, n.folate.rda, n.pantothenicAcid.rda, n.biotin.rda, n.vitaminC.rda, n.vitaminK.rda]], ["fibers", "monounsaturatedFats", "polyunsaturatedFats", "calcium", "magnesium", "phosphorus", "iron", "copper", "zinc", "manganese", "selenium", "iodine", "retinol", "vitaminD", "vitaminE", "vitaminB1", "vitaminB2", "vitaminB3", "vitaminB6", "vitaminB12", "folate", "pantothenicAcid", "biotin", "vitaminC", "vitaminK"], ["#45b7cd", "#2fed4f", "#ff8e72"], [{ label: "Odabrano", borderWidth: 1, type: "bar" }, { label: "RDA", borderWidth: 3, hoverBackgroundColor: "rgba(255,99,132,0.4)", hoverBorderColor: "rgba(255,99,132,1)", type: "line" }], !1), o.parametersGraphDataUI = r.createGraph(["parametri"], [[t.saturatedFats, t.trifluoroaceticAcid, t.cholesterol], [n.saturatedFats.ui, n.trifluoroaceticAcid.ui, n.cholesterol.ui]], ["saturatedFats", "trifluoroaceticAcid", "cholesterol"], ["#f44242", "#ff6384"], [{ label: "Odabrano", borderWidth: 1, type: "bar", backgroundColor: "rgb(244, 66, 66)", hoverBackgroundColor: "rgb(244, 66, 66)" }, { label: "UI", borderWidth: 3, type: "line" }]), o.parametersGraphDataMDA = r.createGraph(["parametri"], [[t.sodium, t.potassium, t.chlorine], [n.sodium.ui], [n.sodium.mda, n.potassium.mda, n.chlorine.mda]], ["sodium", "potassium", "chlorine"], ["#49a5af", "#f44242", "#2fed4f"], [{ label: "Odabrano", borderWidth: 1, type: "bar", backgroundColor: "rgb(244, 66, 66)", hoverBackgroundColor: "rgb(244, 66, 66)" }, { label: "UI", borderWidth: 10, type: "line", backgroundColor: "rgb(244, 66, 66)" }, { label: "MDA", borderWidth: 3, type: "line" }], !1) }, w = function () { var t = o.recommendations.energy, n = "energyChart", a = o.totals.energy.toFixed(0), i = "kcal", c = { title: "energy", min: 0, max: t + .06 * t, greenFrom: t - .02 * t, greenTo: t + .02 * t, yellowFrom: t + .02 * t, yellowTo: t + .04 * t, redFrom: t + .04 * t, redTo: t + .06 * t, minorTicks: 5 }; google.charts.load("current", { packages: ["gauge"] }), google.charts.setOnLoadCallback(r.guageChart(n, a, i, c)), e.isEnergyOk = function () { return a < t - .02 * t ? "fa fa-minus" : a >= t - .02 * t && a <= t + .04 * t ? "fa fa-check" : a > t + .04 * t ? "fa fa-exclamation" : void 0 } }, D = function () { var t = o.recommendations.servings.otherFoodsEnergy, n = "otherFoodChart", a = o.totals.servings.otherFoodsEnergy.toFixed(0), i = "kcal", c = { title: "energy", min: 0, max: t + .5 * t, greenFrom: 0, greenTo: t - .02 * t, yellowFrom: t - .02 * t, yellowTo: t, redFrom: t, redTo: t + .5 * t, minorTicks: 5 }; google.charts.load("current", { packages: ["gauge"] }), google.charts.setOnLoadCallback(r.guageChart(n, a, i, c)), e.isOtherFoodOk = function () { return a < t ? "label label-success fa fa-check" : "label label-danger fa fa-exclamation" } }, T = function () { var t = { from: o.recommendations.carbohydratesPercentageMin, to: o.recommendations.carbohydratesPercentageMax }, n = "carbohydratesChart", a = o.totals.carbohydratesPercentage.toFixed(0), i = "%", c = { title: "carbohidrates", min: 0, max: 100, greenFrom: t.from, greenTo: t.to - .02 * t.to, yellowFrom: t.to - .02 * t.to, yellowTo: t.to, redFrom: t.to, redTo: 100, minorTicks: 5 }; google.charts.load("current", { packages: ["gauge"] }), google.charts.setOnLoadCallback(r.guageChart(n, a, i, c)), e.isCarbohydratesOk = function () { return a < t.from ? "fa fa-minus" : a >= t.from && a <= t.to ? "fa fa-check" : a > t.to ? "fa fa-plus" : void 0 } }, C = function () { var t = { from: o.recommendations.proteinsPercentageMin, to: o.recommendations.proteinsPercentageMax }, n = "proteinsChart", a = o.totals.proteinsPercentage.toFixed(0), i = "%", c = { title: "proteins", min: 0, max: 100, greenFrom: t.from, greenTo: t.to - .02 * t.to, yellowFrom: t.to - .02 * t.to, yellowTo: t.to, redFrom: t.to, redTo: 100, minorTicks: 5 }; google.charts.load("current", { packages: ["gauge"] }), google.charts.setOnLoadCallback(r.guageChart(n, a, i, c)), e.isProteinsOk = function () { return a < t.from ? "fa fa-minus" : a >= t.from && a <= t.to ? "fa fa-check" : a > t.to ? "fa fa-plus" : void 0 } }, k = function () { var t = { from: o.recommendations.fatsPercentageMin, to: o.recommendations.fatsPercentageMax }, n = "fatsChart", a = o.totals.fatsPercentage.toFixed(0), i = { title: "fats", min: 0, max: 100, greenFrom: t.from, greenTo: t.to - .02 * t.to, yellowFrom: t.to - .02 * t.to, yellowTo: t.to, redFrom: t.to, redTo: 100, minorTicks: 5 }; google.charts.load("current", { packages: ["gauge"] }), google.charts.setOnLoadCallback(r.guageChart(n, a, unit, i)), e.isFatsOk = function () { return a < t.from ? "fa fa-minus" : a >= t.from && a <= t.to ? "fa fa-check" : a > t.to ? "fa fa-plus" : void 0 } }, O = function () { var e = "saturatedFatsChart", t = o.totals.saturatedFats; unit = "mg"; var n = { title: "saturated fats", min: 0, max: o.recommendations.saturatedFats.ui + .4 * o.recommendations.saturatedFats.ui, greenFrom: 0, greenTo: o.recommendations.saturatedFats.ui - .2 * o.recommendations.saturatedFats.ui, yellowFrom: o.recommendations.saturatedFats.ui - .2 * o.recommendations.saturatedFats.ui, yellowTo: o.recommendations.saturatedFats.ui, redFrom: o.recommendations.saturatedFats.ui, redTo: o.recommendations.saturatedFats.ui + .4 * o.recommendations.saturatedFats.ui, minorTicks: 5 }; r.guageChart(e, t, unit, n) }, F = function () { var e = "trifluoroaceticAcidChart", t = o.totals.trifluoroaceticAcid; unit = "mg"; var n = { title: "trifluoroacetic acid", min: 0, max: o.recommendations.trifluoroaceticAcid.ui + .4 * o.recommendations.trifluoroaceticAcid.ui, greenFrom: 0, greenTo: o.recommendations.trifluoroaceticAcid.ui - .2 * o.recommendations.trifluoroaceticAcid.ui, yellowFrom: o.recommendations.trifluoroaceticAcid.ui - .2 * o.recommendations.trifluoroaceticAcid.ui, yellowTo: o.recommendations.trifluoroaceticAcid.ui, redFrom: o.recommendations.trifluoroaceticAcid.ui, redTo: o.recommendations.trifluoroaceticAcid.ui + .4 * o.recommendations.trifluoroaceticAcid.ui, minorTicks: 5 }; r.guageChart(e, t, unit, n) }, x = function () { var e = "cholesterolChart", t = o.totals.cholesterol; unit = "mg"; var n = { title: "cholesterol", min: 0, max: o.recommendations.cholesterol.ui + .4 * o.recommendations.cholesterol.ui, greenFrom: 0, greenTo: o.recommendations.cholesterol.ui - .2 * o.recommendations.cholesterol.ui, yellowFrom: o.recommendations.cholesterol.ui - .2 * o.recommendations.cholesterol.ui, yellowTo: o.recommendations.cholesterol.ui, redFrom: o.recommendations.cholesterol.ui, redTo: o.recommendations.cholesterol.ui + .4 * o.recommendations.cholesterol.ui, minorTicks: 5 }; r.guageChart(e, t, unit, n) } }]).controller("analyticsCtrl", ["$scope", "$http", "$window", "$rootScope", "$mdDialog", "charts", "functions", function (e, t, n, a, o, i, r, c) { e.toggleTpl = function (t) { e.analyticsTpl = t }, e.toggleTpl("tablesTpl"), e.printPreview = function () { i.show({ controller: e.printPreviewCtrl, templateUrl: "assets/partials/popup/printmenu.html", parent: angular.element(document.body), clickOutsideToClose: !0, d: { currentMenu: o.currentMenu } }).then(function () { }, function () { }) }, e.printPreviewCtrl = function (e, t, a, i) { e.d = a.currentMenu.data.selectedFoods, e.meals = a.currentMenu.data.meals, e.cancel = function () { t.cancel() }, e.print = function () { alert("todo print") }, e.pdf = function () { r() }; var r = function () { i({ url: n.config.backend + "PrintPdf.asmx/MenuPdf", method: "POST", data: { userId: o.user.userId, fileName: "testpdf", currentMenu: o.currentMenu, clientData: o.clientData } }).then(function (e) { alert(e.data.d) }, function (e) { alert(e.data.d) }) } } }]).controller("myFoodsCtrl", ["$scope", "$http", "$sessionStorage", "$window", "$rootScope", "$mdDialog", "functions", "$translate", function (e, t, n, a, o, i, r, c) { var s = "MyFoods.asmx", l = function () { t({ url: n.config.backend + "Foods.asmx/Init", method: "POST", data: "" }).then(function (t) { var n = JSON.parse(t.data.d); e.myFood = n.food, e.units = n.units, e.mainFoodGroups = n.foodGroups, $(".selectpicker").selectpicker({ style: "btn-default", size: 4 }) }, function (e) { alert(e.data.d) }) }; l(); var d = function () { o.loading = !0, t({ url: n.config.backend + "Foods.asmx/Load", method: "POST", data: { userId: n.usergroupid } }).then(function (e) { var t = JSON.parse(e.data.d); o.myFoods = t.myFoods, o.loading = !1 }, function (e) { o.loading = !1, alert(e.data.d) }) }; e.new = function () { l() }, e.delete = function (e) { var t = i.confirm().title(c.instant("delete food?")).textContent().targetEvent().ok(c.instant("yes")).cancel(c.instant("no")); i.show(t).then(function () { u(e) }, function () { }) }; var u = function (e) { t({ url: n.config.backend + s + "/Delete", method: "POST", data: { userId: o.user.userGroupId, x: e } }).then(function (e) { d(), l(), alert(e.data.d) }, function (e) { alert(e.data.d) }) }; e.save = function (e) { if ("demo" == o.user.licenceStatus && o.clients.length > 0) return r.demoAlert("this function is not available in demo version"), !1; 1 == f(e) && (e.servings.cerealsServ = 0, e.servings.vegetablesServ = 0, e.servings.fruitServ = 0, e.servings.meatServ = 0, e.servings.milkServ = 0, e.servings.fatsServ = 0, e.servings.otherFoodsServ = 1, e.servings.otherFoodsEnergy = e.energy, e.foodGroup.code = "OF"), t({ url: n.config.backend + s + "/Save", method: "POST", data: { userId: o.user.userGroupId, x: e } }).then(function (e) { d(), r.alert(c.instant(e.data.d), "") }, function (e) { r.alert(c.instant(e.data.d), "") }) }; var f = function (e) { return !!(e.foodGroup.code = "OF") || !(e.servings.cerealsServ > 0 || e.servings.vegetablesServ > 0 || e.servings.fruitServ > 0 || e.servings.meatServ > 0 || e.servings.milkServ > 0 || e.servings.fatsServ > 0) }; e.getMyFoodDetails = function (a) { t({ url: n.config.backend + "MyFoods.asmx/Get", method: "POST", data: { userId: o.user.userGroupId, id: a } }).then(function (t) { e.myFood = JSON.parse(t.data.d) }, function (e) { alert(e.data.d) }) } }]).controller("pricesCtrl", ["$scope", "$http", "$sessionStorage", "$rootScope", "$translate", "functions", "$mdDialog", function (e, t, n, a, o, i, r) { var c = "Prices.asmx"; e.foodListType = 0, e.getFoodList = function (t) { e.foodList = 0 == t ? a.foods : a.myFoods }, e.getFoodList(e.foodListType); (function () { t({ url: n.config.backend + c + "/Init", method: "POST", data: "" }).then(function (t) { e.price = JSON.parse(t.data.d), e.price.netPrice.currency = n.settings.currency, s() }, function (e) { i.alert(o.instant(e.data.d), "") }) })(); var s = function () { t({ url: n.config.backend + c + "/Load", method: "POST", data: { userId: a.user.userGroupId } }).then(function (t) { e.prices = JSON.parse(t.data.d) }, function (e) { i.alert(o.instant(e.data.d), "") }) }; e.selectFood = function (t) { var n = JSON.parse(t); e.price.food.id = n.id, e.price.food.title = n.food, e.calculateUnitPrice(t) }, e.calculateUnitPrice = function (e) { angular.isObject(e) && (e.unitPrice.value = e.netPrice.value * (1 / e.mass.value) * 1e3) }, e.save = function (e) { if ("demo" == a.user.licenceStatus && a.clients.length > 0) return i.demoAlert("this function is not available in demo version"), !1; t({ url: n.config.backend + c + "/Save", method: "POST", data: { userId: a.user.userGroupId, x: e } }).then(function (e) { s() }, function (e) { i.alert(o.instant(e.data.d), "") }) }, e.delete = function (e) { var t = r.confirm().title(o.instant("Delete Input") + "?").textContent().targetEvent().ok(o.instant("yes")).cancel(o.instant("no")); r.show(t).then(function () { l(e) }, function () { }) }; var l = function (e) { t({ url: n.config.backend + c + "/Delete", method: "POST", data: { userId: a.user.userGroupId, x: e } }).then(function (e) { s() }, function (e) { i.alert(o.instant(e.data.d), "") }) } }]).controller("printCtrl", ["$scope", "$http", "$sessionStorage", "$window", "$rootScope", "$mdDialog", "functions", function (e, t, n, a, o, i, r) { e.consumers = 1, e.fontsize = 16, e.toggleTpl = function (t) { e.printTpl = t }, e.toggleTpl("menuTpl"), e.changeFontSize = function (t) { e.fs = { "font-size": +t + "px" } }, e.changeFontSize(e.fontsize), e.printWindow = function () { window.print() }, e.printPdf = function () { var a = "jelovnik"; t({ url: n.config.backend + "PrintPdf.asmx/MenuPdf", method: "POST", data: { userId: n.usergroupid, fileName: a, currentMenu: o.currentMenu, clientData: o.clientData } }).then(function (t) { e.pdfLink = n.config.backend + "upload/users/" + o.user.userGroupId + "/pdf/" + a + ".pdf", window.open(e.pdfLink, "_blank") }, function (e) { alert(e.data.d) }) }; var c = function () { t({ url: n.config.backend + "Clients.asmx/Get", method: "POST", data: { userId: n.userid, clientId: o.client.clientId } }).then(function (t) { e.client = JSON.parse(t.data.d) }, function (e) { alert(e.data.d) }) }; void 0 != o.client && c(), e.changeNumberOfConsumers = function (a) { t({ url: n.config.backend + "Foods.asmx/ChangeNumberOfConsumers", method: "POST", data: { foods: o.currentMenu.data.selectedFoods, number: a } }).then(function (t) { e.foods = JSON.parse(t.data.d) }, function (e) { }) }, void 0 != o.currentMenu && e.changeNumberOfConsumers(e.consumers) }]).controller("orderCtrl", ["$scope", "$http", "$rootScope", "$translate", function (e, t, n, a) { e.application = "Program Prehrane", e.version = "WEB", e.userType = "0", e.showAlert = !1, e.sendicon = "fa fa-angle-double-right", e.sendicontitle = a.instant("send order"), e.showUserDetails = "" == n.user.userName, e.showErrorAlert = !1, e.showPaymentDetails = !1; var o = function () { t({ url: n.config.backend + "Orders.asmx/Init", method: "POST", data: "" }).then(function (t) { e.user = JSON.parse(t.data.d), e.user.userName = n.user.userName, e.user.password = n.user.password, e.user.application = e.application, e.user.version = "WEB", e.user.licence = "0", e.user.licenceNumber = "1", e.login(e.user.userName, e.user.password), e.calculatePrice() }, function (e) { alert(e.data.d) }) }, i = function () { t.get("./config/config.json").then(function (e) { n.config = e.data, o() }) }; void 0 == n.config ? i() : o(), e.calculatePrice = function () { var t = 0, a = 0; e.user.version = e.version, t = 550, e.user.licence = "1", e.user.licenceNumber = "1", a = e.user.licenceNumber > 1 ? t * e.user.licenceNumber - t * e.user.licenceNumber * .1 : t, e.user.price = a, e.user.priceEur = a / n.config.eur }, e.order = function (t, n) { o(), window.location.hash = "orderform", e.user.application = t, e.user.version = n, e.calculatePrice() }, e.setApplication = function (t) { e.user.application = t, e.calculatePrice() }, e.login = function (a, o) { t({ url: n.config.backend + "Users.asmx/Login", method: "POST", data: { userName: a, password: o } }).then(function (t) { var n = JSON.parse(t.data.d); n.userName == a ? (e.user.firstName = n.firstName, e.user.lastName = n.lastName, e.user.companyName = n.companyName, e.user.address = n.address, e.user.postalCode = n.postalCode, e.user.city = n.city, e.user.country = n.country, e.user.pin = n.pin, e.user.email = n.email, e.showUserDetails = !0, e.showErrorAlert = !1) : (e.showErrorAlert = !0, e.errorMesage = "Korisnik nije pronađen.") }, function (t) { e.errorLogin = !0, e.showErrorAlert = !0, e.errorMesage = "Korisnik nije pronađen.", e.showUserDetails = !1 }) }, e.sendOrder = function (o) { e.sendicon = "fa fa-spinner fa-spin", e.sendicontitle = a.instant("sending"), e.isSendButtonDisabled = !0, t({ url: n.config.backend + "Orders.asmx/SendOrder", method: "POST", data: { x: o } }).then(function (t) { e.showAlert = !0, e.showPaymentDetails = !0 }, function (t) { e.showAlert = !1, e.showPaymentDetails = !1, e.sendicon = "fa fa-paper-plane-o", e.sendicontitle = a.instant("send"), alert(t.data.d) }) }, e.registration = function () { window.location.hash = "registration" } }]).controller("helpCtrl", ["$scope", "$rootScope", "$translate", function (e, t, n) { }]).controller("infoCtrl", ["$scope", "$rootScope", "$translate", function (e, t, n) { }]).controller("settingsCtrl", ["$scope", "$http", "$rootScope", "$translate", "$sessionStorage", "functions", function (e, t, n, a, o, i) { var r = "Files.asmx"; angular.isDefined(o.settings) && (n.settings = o.settings), e.save = function (e) { t({ url: o.config.backend + r + "/SaveJsonToFile", method: "POST", data: { foldername: "users/" + n.user.userGroupId, filename: "settings", json: JSON.stringify(e) } }).then(function (t) { n.config.language = e.language, n.config.currency = e.currency, i.alert(a.instant("settings saved successfully"), "") }, function (e) { i.alert(a.instant(e.data.d), "") }) } }]);