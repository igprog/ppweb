/*!
admin.js
(c) 2017 IG PROG, www.igprog.hr
*/
angular.module("app", []).controller("adminCtrl", ["$scope", "$http", "$rootScope", function (n, a, t) { a.get("./config/config.json").then(function (n) { t.config = n.data }), n.islogin = !1; var e = new Date; n.year = e.getFullYear(), n.toggleTpl = function (n) { t.tpl = n }, n.toggleTpl("login"), init = function () { n.user = { username: "", password: "" } }, init(), n.login = function (e) { a({ url: t.config.backend + "Admin.asmx/Login", method: "POST", data: { username: e.username, password: e.password } }).then(function (a) { n.islogin = JSON.parse(a.data.d), 1 == n.islogin ? n.toggleTpl("programPrehraneWeb") : alert("error login") }, function (a) { n.islogin = !1, alert(a.data.d) }) }, n.logout = function () { n.islogin = !1, n.toggleTpl("login"), init() } }]).controller("applicationCtrl", ["$scope", "$http", "$rootScope", function (n, a, t) { a({ url: t.config.backend + "Instal.asmx/Load", method: "POST", data: "" }).then(function (a) { n.d = JSON.parse(a.data.d) }, function (n) { alert(n.data.d) }) }]).controller("webAppCtrl", ["$scope", "$http", "$rootScope", function (n, a, t) { n.showDetails = !1, n.loading = !1, n.limit = 10, n.page = 1, n.searchQuery = ""; var e = function () { n.loading = !0, a({ url: t.config.backend + "Users.asmx/Total", method: "POST", data: "" }).then(function (a) { n.t = JSON.parse(a.data.d), n.loading = !1 }, function (a) { n.loading = !1, alert(a.data.d) }) }; e(); var o = function () { n.loading = !0, a({ url: t.config.backend + "Users.asmx/Load", method: "POST", data: { limit: n.limit, page: n.page } }).then(function (a) { n.loading = !1, n.d = JSON.parse(a.data.d) }, function (a) { n.loading = !1, alert(a.data.d) }) }; n.search = function () { n.loading = !0, n.page = 1, a({ url: t.config.backend + "Users.asmx/Search", method: "POST", data: { query: n.searchQuery, limit: n.limit, page: n.page } }).then(function (a) { n.d = JSON.parse(a.data.d), n.loading = !1 }, function (a) { n.loading = !1, alert(a.data.d) }) }, n.search(), n.update = function (n) { a({ url: t.config.backend + "Users.asmx/Update", method: "POST", data: { x: n } }).then(function (n) { o(), e(), alert(n.data.d) }, function (n) { alert(n.data.d) }) }, n.remove = function (n) { 1 == confirm("BriÅ¡i " + n.firstName + " " + n.lastName + "?") && i(n) }; var i = function (n) { a({ url: t.config.backend + "Users.asmx/Delete", method: "POST", data: { x: n } }).then(function (n) { o(), e(), alert(n.data.d) }, function (n) { alert(n.data.d) }) }; n.idxStart = 0, n.idxEnd = 10, n.setPage = function (a) { n.idxStart = 0 + a, n.idxEnd = 10 + a }, n.showAllPages = function () { n.idxStart = 0, n.idxEnd = n.d.length }, google.charts.load("current", { packages: ["line"] }), google.charts.setOnLoadCallback(function () { var n = new google.visualization.DataTable; n.addColumn("number", "Aktivacije"), n.addColumn("number", "Postotak licenci"), n.addColumn("number", "Licence"), a({ url: t.config.backend + "Users.asmx/TotalList", method: "POST", data: "" }).then(function (a) { var t = JSON.parse(a.data.d); angular.forEach(t, function (a, t) { n.addRows([[t, a.licencepercentage, a.licence]]) }); var e = new google.charts.Line(document.getElementById("chart_ppweb")); e.draw(n, google.charts.Line.convertOptions({ chart: { title: "Pregled registracija i aktivacija" }, height: 250 })) }, function (n) { alert(n.data.d) }) }), n.nextPage = function () { n.page = n.page + 1, o() }, n.prevPage = function () { n.page > 1 && (n.page = n.page - 1, o()) } }]).controller("ordersCtrl", ["$scope", "$http", "$rootScope", function (n, a, t) { a({ url: t.config.backend + "Orders.asmx/Load", method: "POST", data: "" }).then(function (a) { n.orders = JSON.parse(a.data.d) }, function (n) { alert(n.data.d) }), n.createInvoice = function (n, e) { a({ url: t.config.backend + "Invoice.asmx/InitPP", method: "POST", data: { order: n } }).then(function (n) { t.i = JSON.parse(n.data.d), t.tpl = e }, function (n) { alert(n.data.d) }) } }]).controller("invoiceCtrl", ["$scope", "$http", "$rootScope", function (n, a, t) { n.isInvoice = !1, n.pdfTempLink = null, n.loading = !1, n.invoices = [], n.showInvoices = !1, n.total = 0, n.init = function () { n.showInvoices = !1, a({ url: t.config.backend + "Invoice.asmx/Init", method: "POST", data: "" }).then(function (n) { t.i = JSON.parse(n.data.d) }, function (n) { alert(n.data.d) }) }, angular.isUndefined(t.i) && n.init(), n.load = function () { n.showInvoices = !0, a({ url: t.config.backend + "Invoice.asmx/Load", method: "POST", data: "" }).then(function (a) { n.invoices = JSON.parse(a.data.d) }, function (n) { alert(n.data.d) }) }, n.get = function (a) { n.showInvoices = !1, t.i = a }, n.add = function () { t.i.items.push({ title: "", qty: 1, unitPrice: 0 }) }, n.remove = function (n) { t.i.items.splice(n, 1) }, n.createPdf = function (e) { if ("" == e.number || null == e.number) return alert("enter order number"), !1; n.loading = !0, n.pdfTempLink = null, n.tempFileName = null, a({ url: t.config.backend + "PrintPdf.asmx/InvoicePdf", method: "POST", data: { invoice: e } }).then(function (a) { n.loading = !1, n.tempFileName = a.data.d, n.pdfTempLink = t.config.backend + "upload/invoice/temp/" + n.tempFileName + ".pdf" }, function (a) { n.loading = !1, alert(a.data.d) }) }, n.loading_1 = !1, n.save = function (e) { n.loading_1 = !0, a({ url: t.config.backend + "Invoice.asmx/Save", method: "POST", data: { x: e, pdf: n.tempFileName } }).then(function (a) { n.loading_1 = !1, n.fileName = a.data.d, n.pdfLink = t.config.backend + "upload/invoice/" + n.fileName + ".pdf" }, function (a) { n.loading_1 = !1, alert(a.data.d) }) }, n.getTotal = function (a) { var t = 0; angular.forEach(a, function (n, a) { t += n.unitPrice * n.qty }), n.total = t }, n.setPaidAmount = function (a) { n.getTotal(a.items), 1 == a.isPaid ? n.i.paidAmount = n.total : (n.i.paidAmount = 0, n.i.paidDate = "") } }]);