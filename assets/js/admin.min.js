/*!
admin.js
(c) 2018 IG PROG, www.igprog.hr
*/
angular.module("app", []).config(["$httpProvider", function (a) { a.defaults.headers.get || (a.defaults.headers.get = {}), a.defaults.headers.get["If-Modified-Since"] = "Mon, 26 Jul 1997 05:00:00 GMT", a.defaults.headers.get["Cache-Control"] = "no-cache", a.defaults.headers.get.Pragma = "no-cache" }]).controller("adminCtrl", ["$scope", "$http", "$rootScope", function (a, n, t) { n.get("./config/config.json").then(function (a) { t.config = a.data }), a.islogin = !1; var e = new Date; a.year = e.getFullYear(), a.toggleTpl = function (a) { t.tpl = a }, a.toggleTpl("login"), init = function () { a.user = { username: "", password: "" } }, init(), a.login = function (e) { n({ url: t.config.backend + "Admin.asmx/Login", method: "POST", data: { username: e.username, password: e.password } }).then(function (n) { a.islogin = JSON.parse(n.data.d), 1 == a.islogin ? a.toggleTpl("programPrehraneWeb") : alert("error login") }, function (n) { a.islogin = !1, alert(n.data.d) }) }, a.logout = function () { a.islogin = !1, a.toggleTpl("login"), init() } }]).controller("applicationCtrl", ["$scope", "$http", "$rootScope", function (a, n, t) { n({ url: t.config.backend + "Instal.asmx/Load", method: "POST", data: "" }).then(function (n) { a.d = JSON.parse(n.data.d) }, function (a) { alert(a.data.d) }) }]).controller("webAppCtrl", ["$scope", "$http", "$rootScope", function (a, n, t) { a.showDetails = !1, a.showActive = !1, a.loading = !1, a.limit = 10, a.page = 1, a.searchQuery = "", a.showUsers = !0; var e = function () { a.loading = !0, n({ url: t.config.backend + "Users.asmx/Total", method: "POST", data: "" }).then(function (n) { a.t = JSON.parse(n.data.d), a.loading = !1 }, function (n) { a.loading = !1, alert(n.data.d) }) }; e(), a.total = function () { a.showUsers = !1, google.charts.load("current", { packages: ["line"] }), google.charts.setOnLoadCallback(d), e() }; var i = function () { a.loading = !0, n({ url: t.config.backend + "Users.asmx/Load", method: "POST", data: { limit: a.limit, page: a.page } }).then(function (n) { a.loading = !1, a.d = JSON.parse(n.data.d) }, function (n) { a.loading = !1, alert(n.data.d) }) }; a.search = function (e, i) { a.loading = !0, a.showUsers = !0, a.page = 1, n({ url: t.config.backend + "Users.asmx/Search", method: "POST", data: { query: e, limit: a.limit, page: a.page, activeUsers: i } }).then(function (n) { a.d = JSON.parse(n.data.d), a.loading = !1 }, function (n) { a.loading = !1, alert(n.data.d) }) }, a.search(null, !1), a.update = function (a) { n({ url: t.config.backend + "Users.asmx/Update", method: "POST", data: { x: a } }).then(function (a) { i(), e(), alert(a.data.d) }, function (a) { alert(a.data.d) }) }, a.info = function (e) { n({ url: t.config.backend + "Users.asmx/GetUserSum", method: "POST", data: { userId: e } }).then(function (n) { a.userTotal = JSON.parse(n.data.d) }, function (a) { alert(a.data.d) }) }, a.remove = function (a) { 1 == confirm("Briši " + a.firstName + " " + a.lastName + "?") && o(a) }; var o = function (a) { n({ url: t.config.backend + "Users.asmx/Delete", method: "POST", data: { x: a } }).then(function (a) { i(), e(), alert(a.data.d) }, function (a) { alert(a.data.d) }) }; function d() { a.loadingChart = !0; var e = new google.visualization.DataTable; e.addColumn("number", "Aktivacije"), e.addColumn("number", "Postotak licenci"), e.addColumn("number", "Licence"), n({ url: t.config.backend + "Users.asmx/TotalList", method: "POST", data: "" }).then(function (n) { var t = JSON.parse(n.data.d); angular.forEach(t, function (a, n) { e.addRows([[n, a.licencepercentage, a.licence]]) }); new google.charts.Line(document.getElementById("chart_ppweb")).draw(e, google.charts.Line.convertOptions({ chart: { title: "Pregled registracija i aktivacija" }, height: 250 })), a.loadingChart = !1 }, function (n) { a.loadingChart = !1, alert(n.data.d) }) } a.idxStart = 0, a.idxEnd = 10, a.setPage = function (n) { a.idxStart = 0 + n, a.idxEnd = 10 + n }, a.showAllPages = function () { a.idxStart = 0, a.idxEnd = a.d.length }, a.nextPage = function () { a.page = a.page + 1, i() }, a.prevPage = function () { a.page > 1 && (a.page = a.page - 1, i()) }, a.updateInfo = function (a) { n({ url: t.config.backend + "Users.asmx/UpdateUserInfoFromOrdersTbl", method: "POST", data: { email: a } }).then(function (a) { alert(a.data.d) }, function (a) { alert(a.data.d) }) } }]).controller("ordersCtrl", ["$scope", "$http", "$rootScope", function (a, n, t) { n({ url: t.config.backend + "Orders.asmx/Load", method: "POST", data: "" }).then(function (n) { a.orders = JSON.parse(n.data.d) }, function (a) { alert(a.data.d) }), a.createInvoice = function (a, e) { n({ url: t.config.backend + "Invoice.asmx/InitPP", method: "POST", data: { order: a } }).then(function (a) { t.i = JSON.parse(a.data.d), t.tpl = e }, function (a) { alert(a.data.d) }) } }]).controller("invoiceCtrl", ["$scope", "$http", "$rootScope", function (a, n, t) { a.getTotal = function (n) { var t = 0; return angular.forEach(n, function (a, n) { t += a.unitPrice * a.qty }), a.total = t, t }; var e = function () { a.isInvoice = !1, a.pdfTempLink = null, a.pdfLink = null, a.loading = !1, a.loading_1 = !1, a.loading_2 = !1, a.invoices = [], a.showInvoices = !1, a.total = angular.isDefined(t.i) ? a.getTotal(t.i.items) : 0, a.year = (new Date).getFullYear(), a.isForeign = !1, a.clientLeftSpacing = 300 }; e(), a.init = function () { a.showInvoices = !1, n({ url: t.config.backend + "Invoice.asmx/Init", method: "POST", data: "" }).then(function (a) { t.i = JSON.parse(a.data.d), e() }, function (a) { alert(a.data.d) }) }, angular.isUndefined(t.i) && a.init(), a.load = function (e) { a.showInvoices = !0, n({ url: t.config.backend + "Invoice.asmx/Load", method: "POST", data: { year: e } }).then(function (n) { a.invoices = JSON.parse(n.data.d) }, function (a) { alert(a.data.d) }) }, a.get = function (n) { a.showInvoices = !1, t.i = n, a.getTotal(t.i.items) }, a.copy = function (i) { a.showInvoices = !1, n({ url: t.config.backend + "Invoice.asmx/Init", method: "POST", data: "" }).then(function (n) { t.i = JSON.parse(n.data.d), e(), t.i.firstName = i.firstName, t.i.lastName = i.lastName, t.i.companyName = i.companyName, t.i.address = i.address, t.i.postalCode = i.postalCode, t.i.city = i.city, t.i.country = i.country, t.i.pin = i.pin, t.i.note = i.note, t.i.items = i.items, a.getTotal(t.i.items) }, function (a) { alert(a.data.d) }) }, a.add = function () { t.i.items.push({ title: "", qty: 1, unitPrice: 0 }), a.getTotal(t.i.items) }, a.remove = function (n) { t.i.items.splice(n, 1), a.getTotal(t.i.items) }, a.totPrice_eur = 0, a.createPdf = function (e, i, o, d) { return null == t.i.firstName && null == t.i.lastName && null == t.i.companyName ? (alert("Upiši ime ili naziv"), !1) : "" == e.number || null == e.number ? (alert("enter order number"), !1) : (a.loading = !0, a.pdfTempLink = null, a.pdfLink = null, a.tempFileName = null, void n({ url: t.config.backend + "PrintPdf.asmx/InvoicePdf", method: "POST", data: { invoice: e, isForeign: i, totPrice_eur: o, clientLeftSpacing: d } }).then(function (n) { a.loading = !1, a.tempFileName = n.data.d, a.pdfTempLink = t.config.backend + "upload/invoice/temp/" + a.tempFileName + ".pdf" }, function (n) { a.loading = !1, alert(n.data.d) })) }, a.save = function (e) { if (null == t.i.firstName && null == t.i.lastName && null == t.i.companyName) return alert("Upiši ime ili naziv"), !1; a.loading_1 = !0, n({ url: t.config.backend + "Invoice.asmx/Save", method: "POST", data: { x: e, pdf: a.tempFileName } }).then(function (n) { a.loading_1 = !1, t.i = JSON.parse(n.data.d), a.fileName = t.i.year + "/" + t.i.fileName, a.pdfLink = t.config.backend + "upload/invoice/" + a.fileName + ".pdf" }, function (n) { a.loading_1 = !1, alert(n.data.d) }) }, a.saveDb = function (e) { if (null == t.i.firstName && null == t.i.lastName && null == t.i.companyName) return alert("Upiši ime ili naziv"), !1; a.loading_2 = !0, n({ url: t.config.backend + "Invoice.asmx/SaveDb", method: "POST", data: { x: e } }).then(function (n) { a.loading_2 = !1, t.i = JSON.parse(n.data.d) }, function (n) { a.loading_2 = !1, alert(n.data.d) }) }, a.setPaidAmount = function (n) { a.getTotal(n.items), 1 == n.isPaid ? a.i.paidAmount = a.total : (a.i.paidAmount = 0, a.i.paidDate = "") } }]);